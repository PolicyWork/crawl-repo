
=========================================================
[CODE-CHANGE-URL]:https://github.com/PolicyWork/crawl-repo/commit/8879e0e2b1bbcb1e97c50abf927a229a2cb7fa6d

[COMMIT MESSAGE]:committing all changes till now||
=========================================================

++ @PostAuthorize("(returnObject.email == principal.Username) or hasRole('ROLE_ADMIN')")
++/* @PostAuthorize("returnObject?.summary == authentication.name")*/
++/* @PostAuthorize("returnObject?.summary == authentication.name")*/
+- @PostAuthorize("hasRole('ROLE_ADMIN') or authentication.name == returnObject.email")
++ @PostAuthorize("hasRole('ROLE_USER')")
++ @PostAuthorize("hasRole('ROLE_ADMIN') or authentication.name == returnObject.user.email")
++ @PostAuthorize("hasRole('ROLE_ADMIN') or authentication.name == returnObject.user.email")
++ @PostAuthorize("hasRole('ROLE_ADMIN') or authentication.name == returnObject.email")
++ @PostAuthorize("returnObject.length() == #input.length()")
++ @PostAuthorize("returnObject.spitter.username == principal.username")
++ @PostAuthorize("returnObject.length() == #input.length()")
++ @PostAuthorize("returnObject.spitter.username == principal.username")
++ @PostAuthorize("returnObject.length() == #input.length()")
++ @PostAuthorize("returnObject.spitter.username == principal.username")
++ @PostAuthorize("returnObject.length() == #input.length()")
++ @PostAuthorize("returnObject.spitter.username == principal.username")
++ @PostAuthorize("returnObject.length() == #input.length()")
++ @PostAuthorize("returnObject.spitter.username == principal.username")
+@PostAuthorize("
-/home/manish/workspace/crawl-repo/OUTPUT/BEST_MATCH/CrawlerOutput_Round2_run1.txt:1332:+ @PostAuthorize("returnObject == null or returnObject.julkinen or isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/PolicyWork/crawl-repo/commit/83036191816b4643851691195e08c167244a1aac

[COMMIT MESSAGE]:committing.||
=========================================================

++ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
++ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
++ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
++ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
++ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
++ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
++ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
++ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
++ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
++ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
++ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
++ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
++ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
++ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
++ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("this.belongsToTenant(returnObject)")
++ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")
++ @PostAuthorize("@paa.hasAccess(returnObject)")
++ @PostAuthorize("@paa.hasAccess(returnObject)")
++ @PostAuthorize("@paa.hasAccess(returnObject)")
++ @PostAuthorize("@paa.hasAccess(returnObject)")
++ @PostAuthorize("hasPermission(returnObject,'read')")
++ @PostAuthorize("hasPermission(returnObject,'read')")
++ @PostAuthorize("hasPermission(returnObject,'read')")
++ @PostAuthorize("hasPermission(returnObject,'read')")
++ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
++ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
++ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
++ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
++ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
++ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
++ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
++ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
++ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
+- @PostAuthorize("hasPermission(#entity, 'write')")
+- @PostAuthorize("hasPermission(returnObject, 'read')")
+- @PostAuthorize("hasPermission(#entity, 'write')")
++ @PostAuthorize("hasPermission(returnObject, 'write')")
++ @PostAuthorize("hasPermission(#entity, 'write')")
++ @PostAuthorize("hasPermission(#entity, 'read')")
++ @PostAuthorize("hasPermission(#entity, 'write')")
++ @PostAuthorize("hasPermission(#entity, 'write')")
++ @PostAuthorize("hasPermission(returnObject, 'read') and hasPermission(returnObject, 'write')")
++ @PostAuthorize("hasPermission(returnObject, 'read')")
+- @PostAuthorize("hasAuthority('ADMIN') or hasPermission(returnObject, 'READ') or hasPermission(returnObject, 'WRITE') or hasPermission(returnObject, 'ADMINISTRATION')")
++ @PostAuthorize("hasAuthority('ADMIN') or hasPermission(returnObject, 'READ') or hasPermission(returnObject, 'WRITE') or hasPermission(returnObject, 'CREATE') or hasPermission(returnObject, 'DELETE') or hasPermission(returnObject, 'ADMINISTRATION')")
+- @PostAuthorize("hasPermission(returnObject, 'READ')")
++ @PostAuthorize("hasAuthority('ADMIN') or hasPermission(returnObject, 'READ') or hasPermission(returnObject, 'WRITE') or hasPermission(returnObject, 'ADMINISTRATION')")
++ @PostAuthorize("hasPermission(returnObject, 'READ')")
++ @PostAuthorize("returnObject.length() == #input.length()")
++ @PostAuthorize("returnObject.spitter.username == principal.username")
++ @PostAuthorize("returnObject.length() == #input.length()")
++ @PostAuthorize("returnObject.spitter.username == principal.username")
++ @PostAuthorize("returnObject.id == T(Long).parseLong(principal.username) or hasRole('ROLE_ADMIN')")
++ @PostAuthorize("hasRole('ROLE_USER_AUTHENTICATOR') or hasRole('ROLE_ADMIN') or hasPermission(returnObject, 'read') or hasPermission(returnObject, admin)")
+- @PostAuthorize("hasRole('admin') or principal.username == returnObject.teamName")
++ @PostAuthorize("hasRole('ROLE_ADMIN') or principal.username == returnObject.teamName")
+- @PostAuthorize("returnObject.owner.domainUser.username == principal.username or hasRole('ROLE_VET')")
++ @PostAuthorize("principal.username == returnObject.owner.domainUser.username or hasRole('ROLE_VET')")
+- * @PostAuthorize("#to == returnObject.to")
++ * {@code @PostAuthorize("#to == returnObject.to")}
+- * @PostAuthorize("#to == returnObject.to")
++ * {@code @PostAuthorize("#to == returnObject.to")}
++ @PostAuthorize("#o?.contains('grant')")
++ * @PostAuthorize("#to == returnObject.to")
++ * @PostAuthorize("#to == returnObject.to")
+++ @PostAuthorize("(returnObject.email == principal.Username) or hasRole('ROLE_ADMIN')")
+++/* @PostAuthorize("returnObject?.summary == authentication.name")*/
+++/* @PostAuthorize("returnObject?.summary == authentication.name")*/
++- @PostAuthorize("hasRole('ROLE_ADMIN') or authentication.name == returnObject.email")
+++ @PostAuthorize("hasRole('ROLE_USER')")
+++ @PostAuthorize("hasRole('ROLE_ADMIN') or authentication.name == returnObject.user.email")
+++ @PostAuthorize("hasRole('ROLE_ADMIN') or authentication.name == returnObject.user.email")
+++ @PostAuthorize("hasRole('ROLE_ADMIN') or authentication.name == returnObject.email")
+++ @PostAuthorize("returnObject.length() == #input.length()")
+++ @PostAuthorize("returnObject.spitter.username == principal.username")
+++ @PostAuthorize("returnObject.length() == #input.length()")
+++ @PostAuthorize("returnObject.spitter.username == principal.username")
+++ @PostAuthorize("returnObject.length() == #input.length()")
+++ @PostAuthorize("returnObject.spitter.username == principal.username")
+++ @PostAuthorize("returnObject.length() == #input.length()")
+++ @PostAuthorize("returnObject.spitter.username == principal.username")
+++ @PostAuthorize("returnObject.length() == #input.length()")
+++ @PostAuthorize("returnObject.spitter.username == principal.username")
++@PostAuthorize("
+-/home/manish/workspace/crawl-repo/OUTPUT/BEST_MATCH/CrawlerOutput_Round2_run1.txt:1332:+ @PostAuthorize("returnObject == null or returnObject.julkinen or isAuthenticated()")
++ @PostAuthorize("returnObject.id == T(Long).parseLong(principal.username) or hasRole('ROLE_ADMIN')")
++ @PostAuthorize("returnObject.owner.name == principal.username or hasRole('ROLE_ADMIN')")
++ @PostAuthorize("returnObject.owner.name == principal.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/3418b4045c3ef65458ac00e4265d8e6a04231f6e

[COMMIT MESSAGE]:Permissions refactoring; User permissions removed, only user.manageme…||…nt permission remained. DPU template screen is now protected with new permission;
=========================================================

- @PostAuthorize("hasPermission(returnObject, 'user.read')")
+ @PostAuthorize("hasPermission(returnObject, 'user.management')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/3f9ddecf74cad1bc6758c331c6953c4154e0f82b

[COMMIT MESSAGE]:new permission model||
=========================================================

- @PostAuthorize("hasPermission(returnObject,'view')")
+ @PostAuthorize("hasPermission(returnObject,'pipeline.read')")
- @PostAuthorize("hasPermission(returnObject, 'view')")
+ @PostAuthorize("hasPermission(returnObject, 'user.read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/68229a28cd0f742ceeaf7964938f45fd4748ea97

[COMMIT MESSAGE]:user provisioning finished||
=========================================================

- @PostAuthorize("hasPermission(returnObject, 'view')")
+ @PostAuthorize("hasPermission(returnObject, 'view')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/5d9842d583e56f25940ececf01799e82824bcc63

[COMMIT MESSAGE]:user provisioning a case integracia||
=========================================================

- @PostAuthorize("hasPermission(returnObject, 'view')")
+ @PostAuthorize("hasPermission(returnObject, 'view')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/817237840498ada06aa99fd03fdc315a6b6fae0c

[COMMIT MESSAGE]:130 - the code was formatted by our template||
=========================================================

- @PostAuthorize("hasPermission(returnObject, 'view')")
+ @PostAuthorize("hasPermission(returnObject, 'view')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/638ebe28563e951b6a8393554a531048d8b47fd1

[COMMIT MESSAGE]:Facades split into interfaces and implementations||
=========================================================

- @PostAuthorize("hasPermission(returnObject,'view')")
+ @PostAuthorize("hasPermission(returnObject,'view')")
- @PostAuthorize("hasPermission(returnObject, 'view')")
+ @PostAuthorize("hasPermission(returnObject, 'view')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/d9e7beaa94ed382ee4a41f609b5c7ad013ad5f17

[COMMIT MESSAGE]:Bugfix of #367; Fixed security annotation on DPUFacadeImp||
=========================================================

+ @PostAuthorize("hasPermission(returnObject, 'dpuTemplate.read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/d9e7beaa94ed382ee4a41f609b5c7ad013ad5f17

[COMMIT MESSAGE]:Bugfix of #367; Fixed security annotation on DPUFacadeImp||
=========================================================

+ @PostAuthorize("hasPermission(returnObject, 'dpuTemplate.read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/059f2ed034b9d1eb96f092e120d3c3ac7858bb20

[COMMIT MESSAGE]:Further permission fixes according to documentation||
=========================================================

+ @PostAuthorize("hasPermission(returnObject, 'pipelineExecution.read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/3f9ddecf74cad1bc6758c331c6953c4154e0f82b

[COMMIT MESSAGE]:new permission model||
=========================================================

- @PostAuthorize("hasPermission(returnObject,'view')")
+ @PostAuthorize("hasPermission(returnObject,'pipeline.read')")
- @PostAuthorize("hasPermission(returnObject, 'view')")
+ @PostAuthorize("hasPermission(returnObject, 'user.read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/817237840498ada06aa99fd03fdc315a6b6fae0c

[COMMIT MESSAGE]:130 - the code was formatted by our template||
=========================================================

- @PostAuthorize("hasPermission(returnObject, 'view')")
+ @PostAuthorize("hasPermission(returnObject, 'view')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/638ebe28563e951b6a8393554a531048d8b47fd1

[COMMIT MESSAGE]:Facades split into interfaces and implementations||
=========================================================

- @PostAuthorize("hasPermission(returnObject,'view')")
+ @PostAuthorize("hasPermission(returnObject,'view')")
- @PostAuthorize("hasPermission(returnObject, 'view')")
+ @PostAuthorize("hasPermission(returnObject, 'view')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/b376048c2e0a937d26953d4a1513135aaca09944

[COMMIT MESSAGE]:Fixes of permissions for scheduling pipeline runs and fixed bug (cach…||…ing) in pipelines conflicts
=========================================================

+ @PostAuthorize("hasPermission(returnObject, 'scheduleRule.read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/059f2ed034b9d1eb96f092e120d3c3ac7858bb20

[COMMIT MESSAGE]:Further permission fixes according to documentation||
=========================================================

+ @PostAuthorize("hasPermission(returnObject, 'pipelineExecution.read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/3f9ddecf74cad1bc6758c331c6953c4154e0f82b

[COMMIT MESSAGE]:new permission model||
=========================================================

- @PostAuthorize("hasPermission(returnObject,'view')")
+ @PostAuthorize("hasPermission(returnObject,'pipeline.read')")
- @PostAuthorize("hasPermission(returnObject, 'view')")
+ @PostAuthorize("hasPermission(returnObject, 'user.read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/817237840498ada06aa99fd03fdc315a6b6fae0c

[COMMIT MESSAGE]:130 - the code was formatted by our template||
=========================================================

- @PostAuthorize("hasPermission(returnObject, 'view')")
+ @PostAuthorize("hasPermission(returnObject, 'view')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/638ebe28563e951b6a8393554a531048d8b47fd1

[COMMIT MESSAGE]:Facades split into interfaces and implementations||
=========================================================

- @PostAuthorize("hasPermission(returnObject,'view')")
+ @PostAuthorize("hasPermission(returnObject,'view')")
- @PostAuthorize("hasPermission(returnObject, 'view')")
+ @PostAuthorize("hasPermission(returnObject, 'view')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/059f2ed034b9d1eb96f092e120d3c3ac7858bb20

[COMMIT MESSAGE]:Further permission fixes according to documentation||
=========================================================

+ @PostAuthorize("hasPermission(returnObject, 'pipelineExecution.read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/3f9ddecf74cad1bc6758c331c6953c4154e0f82b

[COMMIT MESSAGE]:new permission model||
=========================================================

- @PostAuthorize("hasPermission(returnObject,'view')")
+ @PostAuthorize("hasPermission(returnObject,'pipeline.read')")
- @PostAuthorize("hasPermission(returnObject, 'view')")
+ @PostAuthorize("hasPermission(returnObject, 'user.read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/spanishkangaroo/rooacl/commit/8f7cd8b190a6f3b8778b8afd9680b189214f858b

[COMMIT MESSAGE]:No commit message||
=========================================================

+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/spanishkangaroo/rooacl/commit/8f7cd8b190a6f3b8778b8afd9680b189214f858b

[COMMIT MESSAGE]:No commit message||
=========================================================

+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/spanishkangaroo/rooacl/commit/8f7cd8b190a6f3b8778b8afd9680b189214f858b

[COMMIT MESSAGE]:No commit message||
=========================================================

+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=2&q=%40PostAuthorize%28%22&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/Popo-lth/SpringInActionCode/commit/5dce9c9112cb7957471d9627667e245169d591e3

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PostAuthorize("returnObject.length() == #input.length()")
+ @PostAuthorize("returnObject.spitter.username == principal.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Popo-lth/SpringInActionCode/commit/5dce9c9112cb7957471d9627667e245169d591e3

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PostAuthorize("returnObject.length() == #input.length()")
+ @PostAuthorize("returnObject.spitter.username == principal.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/danillogontijo/geddireto/commit/f370a7f0979a0f9b3fd27ac2a90a6391b2407208

[COMMIT MESSAGE]:No commit message||
=========================================================

- @PostAuthorize("(returnObject == null) or (returnObject.granted)")
+ /*@PostAuthorize("(returnObject == null) or (returnObject.granted)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/danillogontijo/geddireto/commit/205db7780a257e0ebe88c40b1255742283ee9398

[COMMIT MESSAGE]:No commit message||
=========================================================

- @PostAuthorize("(returnObject == null) or (returnObject.carteira.idCarteira == principal.idCarteira)")
+ //@PostAuthorize("(returnObject == null) or (returnObject.carteira.idCarteira == principal.idCarteira)")
+ @PostAuthorize("(returnObject == null) or (returnObject.granted)")
+ @PostAuthorize("(returnObject == null) or (returnObject.granted)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/danillogontijo/geddireto/commit/79b832137f6c67b1c1778eabe52ec0dce3a5ec25

[COMMIT MESSAGE]:No commit message||
=========================================================

+ //@PostAuthorize("returnObject.idCarteira == principal.idCarteira")
+ //@PostAuthorize("returnObject.idCarteira == principal.idCarteira")
+ @PostAuthorize("(returnObject == null) or (returnObject.carteira.idCarteira == principal.idCarteira)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/danillogontijo/geddireto/commit/79b832137f6c67b1c1778eabe52ec0dce3a5ec25

[COMMIT MESSAGE]:No commit message||
=========================================================

+ //@PostAuthorize("returnObject.idCarteira == principal.idCarteira")
+ //@PostAuthorize("returnObject.idCarteira == principal.idCarteira")
+ @PostAuthorize("(returnObject == null) or (returnObject.carteira.idCarteira == principal.idCarteira)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sequenceiq/cloudbreak/commit/bc498a2f04214d86154da94bdca635574a669253

[COMMIT MESSAGE]:CLOUD-659 create network abstraction||
=========================================================

+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sequenceiq/cloudbreak/commit/9c88ba965bd4a135842c8dfdf2db2a0c76d2808a

[COMMIT MESSAGE]:CLOUD-41897 Remove Security annotations from DB layer||
=========================================================

- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sequenceiq/cloudbreak/commit/9c88ba965bd4a135842c8dfdf2db2a0c76d2808a

[COMMIT MESSAGE]:CLOUD-41897 Remove Security annotations from DB layer||
=========================================================

- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sequenceiq/cloudbreak/commit/43c9a6374c8206bf64babb2c4a3c42a6881c7160

[COMMIT MESSAGE]:CLOUD-872 create new security- group and rule resources||
=========================================================

+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sequenceiq/cloudbreak/commit/9c88ba965bd4a135842c8dfdf2db2a0c76d2808a

[COMMIT MESSAGE]:CLOUD-41897 Remove Security annotations from DB layer||
=========================================================

- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=3&q=%40PostAuthorize%28%22&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/sequenceiq/cloudbreak/commit/9c88ba965bd4a135842c8dfdf2db2a0c76d2808a

[COMMIT MESSAGE]:CLOUD-41897 Remove Security annotations from DB layer||
=========================================================

- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sequenceiq/cloudbreak/commit/43c9a6374c8206bf64babb2c4a3c42a6881c7160

[COMMIT MESSAGE]:CLOUD-872 create new security- group and rule resources||
=========================================================

+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sequenceiq/cloudbreak/commit/bc498a2f04214d86154da94bdca635574a669253

[COMMIT MESSAGE]:CLOUD-659 create network abstraction||
=========================================================

+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sequenceiq/cloudbreak/commit/9c88ba965bd4a135842c8dfdf2db2a0c76d2808a

[COMMIT MESSAGE]:CLOUD-41897 Remove Security annotations from DB layer||
=========================================================

- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sequenceiq/cloudbreak/commit/9c88ba965bd4a135842c8dfdf2db2a0c76d2808a

[COMMIT MESSAGE]:CLOUD-41897 Remove Security annotations from DB layer||
=========================================================

- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sequenceiq/cloudbreak/commit/43c9a6374c8206bf64babb2c4a3c42a6881c7160

[COMMIT MESSAGE]:CLOUD-872 create new security- group and rule resources||
=========================================================

+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sequenceiq/cloudbreak/commit/9c88ba965bd4a135842c8dfdf2db2a0c76d2808a

[COMMIT MESSAGE]:CLOUD-41897 Remove Security annotations from DB layer||
=========================================================

- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
- @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sequenceiq/cloudbreak/commit/bc498a2f04214d86154da94bdca635574a669253

[COMMIT MESSAGE]:CLOUD-659 create network abstraction||
=========================================================

+ @PostAuthorize("hasPermission(returnObject,'read')")
+ @PostAuthorize("hasPermission(returnObject,'read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/biyefeilan/xyplatform/commit/271465ebb650bc4437bf92c6ada783684436af5f

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PostAuthorize("returnObject.id == T(Long).parseLong(principal.username) or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cherimojava/orchidae/commit/eb1bb9427d58eb15c5c97b4319fbd7e5729dbc6b

[COMMIT MESSAGE]:reformat code||
=========================================================

- @PostAuthorize("@paa.hasAccess(returnObject)")
- @PostAuthorize("@paa.hasAccess(returnObject)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cherimojava/orchidae/commit/81cf17579ebe389a47e4cd94293ae1e7339488cb

[COMMIT MESSAGE]:provide endpoints for next/previous picture ref #31||
=========================================================

+ @PostAuthorize("@paa.hasAccess(returnObject)")
+ @PostAuthorize("@paa.hasAccess(returnObject)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/terasolunaorg/terasoluna-tourreservation/commit/d0699a596b61da63fa11fc3244246e21d23c645b

[COMMIT MESSAGE]:Implement access control for other owner resource. terasolunaorg/tera…||…soluna-tourreservation#213
=========================================================

+ @PostAuthorize("returnObject == null or returnObject.customer.customerCode == principal.customer.customerCode")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=4&q=%40PostAuthorize%28%22&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/serdyuk-alex/RestaurantSample/commit/e87243385c9e7b8a75b6e28217f921a01f930d94

[COMMIT MESSAGE]:fixes, refactoring||+escape errorMessage string for js
+handle user creation in service
+show all orders for admin at home page
+don't send ajax save on load of page (first model change event)
+don't show buttons on submitted and not user orders
+forbid group deletion if there are some orders in it
=========================================================

- @PostAuthorize("returnObject.owner.name == principal.username or hasRole('ROLE_ADMIN')")
+ @PostAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/serdyuk-alex/RestaurantSample/commit/44cdcd35eb6622ebfec781d1562a1e32cdc55abe

[COMMIT MESSAGE]:l2 cache, tx service, fixes||+l2 cache ehcache
+transactional service
+split order page
+security for group order read
+nice icons
=========================================================

+ @PostAuthorize("hasRole('ROLE_ADMIN') or @groupOrderSecurity.isMemberOrGroupOwner(returnObject)")
- @PostAuthorize("returnObject.owner.name == principal.username")
+ @PostAuthorize("returnObject.owner.name == principal.username or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/serdyuk-alex/RestaurantSample/commit/548fb0e5f64ad68ccfeb074b8f52b93ac6fb820d

[COMMIT MESSAGE]:v2 version with good UI & edit dishes ability||+spring security update
+rest-webmvc
+light jsp templating lib
+remove useless tomcat plugin config
+readme
+html design
+update of ORM model (with many2many with extra field)
=========================================================

+ @PostAuthorize("returnObject.owner.name == principal.username or hasRole('ROLE_ADMIN')")
+ @PostAuthorize("returnObject.owner.name == principal.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/kTT/adjule/commit/753c343d994e5f08407a2386a05f6384f5d2c323

[COMMIT MESSAGE]:Upgrades dependecies||
=========================================================

- @PostAuthorize("hasRole('admin') or principal.username == returnObject.teamName")
+ @PostAuthorize("hasRole('ROLE_ADMIN') or principal.username == returnObject.teamName")

=========================================================
[CODE-CHANGE-URL]:https://github.com/serdyuk-alex/RestaurantSample/commit/44cdcd35eb6622ebfec781d1562a1e32cdc55abe

[COMMIT MESSAGE]:l2 cache, tx service, fixes||+l2 cache ehcache
+transactional service
+split order page
+security for group order read
+nice icons
=========================================================

+ @PostAuthorize("hasRole('ROLE_ADMIN') or @groupOrderSecurity.isMemberOrGroupOwner(returnObject)")
- @PostAuthorize("returnObject.owner.name == principal.username")
+ @PostAuthorize("returnObject.owner.name == principal.username or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/spring-projects/spring-security/commit/ad1d858e2bbe06e51230e6fd5b30bdff17b08bbd

[COMMIT MESSAGE]:SEC-3056 - Fix JavaDoc errors.||Fixed JavaDoc errors accross multiple modules in order to make javadoc happy with Java 8.
=========================================================

- * @PostAuthorize("#to == returnObject.to")
+ * {@code @PostAuthorize("#to == returnObject.to")}
- * @PostAuthorize("#to == returnObject.to")
+ * {@code @PostAuthorize("#to == returnObject.to")}

=========================================================
[CODE-CHANGE-URL]:https://github.com/spring-projects/spring-security/commit/a09756745fd95bcfa8c05eb977227ef06d929ad4

[COMMIT MESSAGE]:SEC-2151: Support binding method arguments with Annotations||This allow utilizing method arguments for method access control on
interfaces prior to JDK 8.
=========================================================

+ @PostAuthorize("#o?.contains('grant')")
+ * @PostAuthorize("#to == returnObject.to")
+ * @PostAuthorize("#to == returnObject.to")

=========================================================
[CODE-CHANGE-URL]:https://github.com/danielberecz/petclinic/commit/fcc12e07ebb11225be19a3860f380cebfc4b7529

[COMMIT MESSAGE]:Introduced Hystrix||
=========================================================

- @PostAuthorize("returnObject.owner.domainUser.username == principal.username or hasRole('ROLE_VET')")
+ @PostAuthorize("principal.username == returnObject.owner.domainUser.username or hasRole('ROLE_VET')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=5&q=%40PostAuthorize%28%22&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/chpladmin/chpl-api/commit/57db02fd4cf11eed8ba2ffd22e54e611ecba098f

[COMMIT MESSAGE]:Fixed issue in UserManagementController which prevented users from||changing their passwords.
=========================================================

+ @PostAuthorize("hasRole('ROLE_USER_AUTHENTICATOR') or hasRole('ROLE_ADMIN') or hasPermission(returnObject, 'read') or hasPermission(returnObject, admin)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/HenryXi/Spring_in_action/commit/19f36a42da5dcdd67d18ee8dc11f7967e8619901

[COMMIT MESSAGE]:commit all files||
=========================================================

+ @PostAuthorize("returnObject.length() == #input.length()")
+ @PostAuthorize("returnObject.spitter.username == principal.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/HenryXi/Spring_in_action/commit/19f36a42da5dcdd67d18ee8dc11f7967e8619901

[COMMIT MESSAGE]:commit all files||
=========================================================

+ @PostAuthorize("returnObject.length() == #input.length()")
+ @PostAuthorize("returnObject.spitter.username == principal.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/ZhernakovMikhail/spring-acl-sample/commit/51f7accc0feb646758de36b276c63bced95eb864

[COMMIT MESSAGE]:Добавил простейший интерфейс||
=========================================================

- @PostAuthorize("hasAuthority('ADMIN') or hasPermission(returnObject, 'READ') or hasPermission(returnObject, 'WRITE') or hasPermission(returnObject, 'ADMINISTRATION')")
+ @PostAuthorize("hasAuthority('ADMIN') or hasPermission(returnObject, 'READ') or hasPermission(returnObject, 'WRITE') or hasPermission(returnObject, 'CREATE') or hasPermission(returnObject, 'DELETE') or hasPermission(returnObject, 'ADMINISTRATION')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/ZhernakovMikhail/spring-acl-sample/commit/c4c869bcf60e4b01645b4f64fb36dde42ad86cee

[COMMIT MESSAGE]:вынес конфигурацию из xml||
=========================================================

- @PostAuthorize("hasPermission(returnObject, 'READ')")
+ @PostAuthorize("hasAuthority('ADMIN') or hasPermission(returnObject, 'READ') or hasPermission(returnObject, 'WRITE') or hasPermission(returnObject, 'ADMINISTRATION')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/ZhernakovMikhail/spring-acl-sample/commit/2833ddfb778877a4ac4bb902beee5065cd0123d1

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+ @PostAuthorize("hasPermission(returnObject, 'READ')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=6&q=%40PostAuthorize%28%22&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/spebbe/cryson/commit/3ca1a4e2f575f5d7184a7ebff55024b548794132

[COMMIT MESSAGE]:Don't try to validate deleted entity.||
=========================================================

- @PostAuthorize("hasPermission(#entity, 'write')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/spebbe/cryson/commit/1d56743aafa46b6ec794a97a6943ebab253175f9

[COMMIT MESSAGE]:Extended support for Restrictable entities.||
=========================================================

- @PostAuthorize("hasPermission(returnObject, 'read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/spebbe/cryson/commit/0a5811fe9153fcef77bc908d1da9430d8fad549e

[COMMIT MESSAGE]:Check permissions on refreshed version of updated entity.||
=========================================================

- @PostAuthorize("hasPermission(#entity, 'write')")
+ @PostAuthorize("hasPermission(returnObject, 'write')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/spebbe/cryson/commit/8540c1de69556dacd7366250209f51577c4c4603

[COMMIT MESSAGE]:Authorization was messed up -- trying to fix.||
=========================================================

+ @PostAuthorize("hasPermission(#entity, 'write')")
+ @PostAuthorize("hasPermission(#entity, 'read')")
+ @PostAuthorize("hasPermission(#entity, 'write')")
+ @PostAuthorize("hasPermission(#entity, 'write')")
+ @PostAuthorize("hasPermission(returnObject, 'read') and hasPermission(returnObject, 'write')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/spebbe/cryson/commit/6bcfce6ed2ccb7f410d4175ea85faf9ccda00a4f

[COMMIT MESSAGE]:Imported server and client sources.||
=========================================================

+ @PostAuthorize("hasPermission(returnObject, 'read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/handiono/rooacl/commit/8f7cd8b190a6f3b8778b8afd9680b189214f858b

[COMMIT MESSAGE]:No commit message||
=========================================================

+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/handiono/rooacl/commit/8f7cd8b190a6f3b8778b8afd9680b189214f858b

[COMMIT MESSAGE]:No commit message||
=========================================================

+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/handiono/rooacl/commit/8f7cd8b190a6f3b8778b8afd9680b189214f858b

[COMMIT MESSAGE]:No commit message||
=========================================================

+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
+ @PostAuthorize("hasPermission(returnObject, 'WRITE')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=7&q=%40PostAuthorize%28%22&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/cherimojava/orchidae/commit/81cf17579ebe389a47e4cd94293ae1e7339488cb

[COMMIT MESSAGE]:provide endpoints for next/previous picture ref #31||
=========================================================

+ @PostAuthorize("@paa.hasAccess(returnObject)")
+ @PostAuthorize("@paa.hasAccess(returnObject)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/AmericanConsultants/gsa-aeec-pool2-prototype/commit/8c875d1d8daca8f53ac1f28bf4c2428d59c2ed9e

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
+ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
+ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
+ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
+ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/AmericanConsultants/gsa-aeec-pool2-prototype/commit/8c875d1d8daca8f53ac1f28bf4c2428d59c2ed9e

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
+ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
+ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
+ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
+ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/AmericanConsultants/gsa-aeec-pool2-prototype/commit/8c875d1d8daca8f53ac1f28bf4c2428d59c2ed9e

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
+ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
+ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
+ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
+ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/AmericanConsultants/gsa-aeec-pool2-prototype/commit/8c875d1d8daca8f53ac1f28bf4c2428d59c2ed9e

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+ @PostAuthorize("this.belongsToTenant(returnObject) && (hasAnyRole('ROLE_ADMIN_INVOICE','ROLE_RUN_AS_ADMIN_INVOICE') or this.belongsToUser(returnObject, authentication.name))")
+ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
+ @PostAuthorize("hasRole('ROLE_ADMIN_MEMBER') or this.belongsToUser(returnObject, authentication.name)")
+ @PostAuthorize("hasRole('ROLE_REINDEX') or (this.belongsToTenant(returnObject) and (hasAnyRole('ROLE_ADMIN_GYMNAST','ROLE_RUN_AS_ADMIN_GYMNAST') or this.belongsToUser(returnObject, authentication.name) or this.userIsInstructor(authentication.name) or this.sanitize(returnObject)))")
+ @PostAuthorize("this.belongsToTenant(returnObject) or hasRole('ROLE_REINDEX')")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("hasRole('ROLE_ALL_NOTIFICATIONS') or this.belongsToUser(returnObject, authentication.name)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("this.belongsToTenant(returnObject)")
+ @PostAuthorize("hasAnyRole('ROLE_ADMIN_CART','ROLE_RUN_AS_ADMIN_CART') or this.belongsToUser(returnObject, authentication.name)")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=8&q=%40PostAuthorize%28%22&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93

