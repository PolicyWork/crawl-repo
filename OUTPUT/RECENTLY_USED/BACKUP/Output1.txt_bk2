
=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/23fbb2c5252fb9778a22a0b4b47c623d6090b805

[COMMIT MESSAGE]:- changed the PlateMapService import call to return a PlateMap along …||…with the list of possible PlateTypes that could be used
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/6e2e6c170c2705101929fee3a112c40b3673baee

[COMMIT MESSAGE]:- added roles/permissions||- added PreAuthorize to the service methods
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_USERROLE')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/45479707eb1eb66e458930f11b0d25f2445d537b

[COMMIT MESSAGE]:- added some more listing services||- moved the path of the result service
- now populating creation date for results
- added iso8601 scrubber for json assertions
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/6e2e6c170c2705101929fee3a112c40b3673baee

[COMMIT MESSAGE]:- added roles/permissions||- added PreAuthorize to the service methods
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_USERROLE')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/45479707eb1eb66e458930f11b0d25f2445d537b

[COMMIT MESSAGE]:- added some more listing services||- moved the path of the result service
- now populating creation date for results
- added iso8601 scrubber for json assertions
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/9af6facd0b9edab15ef60a159e02dd7826eee03c

[COMMIT MESSAGE]:- added permission for reading/modifying||
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")// todo do we need a new permission for results?
+ @PreAuthorize("hasRole('PERM_MODIFY_RESULTS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_RESULTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/5154236d65aa735626ba8a4561031f93dfffc879

[COMMIT MESSAGE]:- added permissions for experiments||- first pass at some results
- list experiments
- use DateTime hibernate lib
- renamed MEASURED to COMP for WellType
- added flag to know when the pw has been set
- added ExperimentService
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')") // todo do we need a new permission for results?

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/45479707eb1eb66e458930f11b0d25f2445d537b

[COMMIT MESSAGE]:- added some more listing services||- moved the path of the result service
- now populating creation date for results
- added iso8601 scrubber for json assertions
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/23fbb2c5252fb9778a22a0b4b47c623d6090b805

[COMMIT MESSAGE]:- changed the PlateMapService import call to return a PlateMap along …||…with the list of possible PlateTypes that could be used
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/9d22962bf78270dd3af5eb17b3b7890ac233efde

[COMMIT MESSAGE]:- small cleanup on the dependencies||- added listing for Compound's + service test
- renamed PlateTemplate to PlateMap
- added basic CSV parser
- changed barcode from Long to String. More flexible this way
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/9af6facd0b9edab15ef60a159e02dd7826eee03c

[COMMIT MESSAGE]:- added permission for reading/modifying||
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")// todo do we need a new permission for results?
+ @PreAuthorize("hasRole('PERM_MODIFY_RESULTS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_RESULTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/5154236d65aa735626ba8a4561031f93dfffc879

[COMMIT MESSAGE]:- added permissions for experiments||- first pass at some results
- list experiments
- use DateTime hibernate lib
- renamed MEASURED to COMP for WellType
- added flag to know when the pw has been set
- added ExperimentService
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')") // todo do we need a new permission for results?

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/6e2e6c170c2705101929fee3a112c40b3673baee

[COMMIT MESSAGE]:- added roles/permissions||- added PreAuthorize to the service methods
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_USERROLE')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/execom-eu/ECLunchOrder/commit/fe5522a282125b1d55d23bfce26c2108f1857167

[COMMIT MESSAGE]:Model corrections, supplier admin GUI elements.||
=========================================================

+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/octo888/blog/commit/6f7ba01a04aaf8a28e0bc3c0e56dc7a8ed85467b

[COMMIT MESSAGE]:after unit 34||
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/deccanrock/planovik/commit/9a150ec126a27732914527a648cf353f914efea6

[COMMIT MESSAGE]:relocated resources||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERADMIN')")
+ @PreAuthorize("hasRole('ROLE_SUPERADMIN')")
+ @PreAuthorize("hasRole('ROLE_SUPERADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/imrich2/46C869B8/commit/9ed9330db57188d14043c38cc02a876e9d73ba71

[COMMIT MESSAGE]:big refactor about security & wechatAdapter||
=========================================================

+// @PreAuthorize("hasRole('ROLE_ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=5&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/if6was9/macgyver/commit/19a09dead62932317787f60c5155c908c260379e

[COMMIT MESSAGE]:re-added script invocation interface||
=========================================================

-@PreAuthorize("hasRole('ROLE_MACGYVER_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/0b049ff5fb7087a26e59a9c4a722d14be8b81f61

[COMMIT MESSAGE]:EP-214 & EP-215: Lisätty mahdollisuus hakea tiedotteita julkisuus-lip…||…un ja/tai alkaen-päivämäärän avulla. Kirjautumaton käyttäjäkin pystyy nyt lukemaan julkisia tiedotteita.
=========================================================

- @PreAuthorize("hasPermission(#id, 'tiedote', 'LUKU')")
+ @PreAuthorize("permitAll()")
- @PreAuthorize("hasPermission(#id, 'tiedote', 'LUKU')")
+ @PreAuthorize("permitAll()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/1d4f7cfc6ca75cdf77b88fe759d045b80fbf8fce

[COMMIT MESSAGE]:Lisätty tiedotteiden hallinta backendissä||
=========================================================

+ @PreAuthorize("hasPermission(#id, 'tiedote', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'tiedote', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'tiedote', 'LUONTI')")
+ @PreAuthorize("hasPermission(#id, 'tiedote', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'tiedote', 'POISTO')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/5c6574bc9093da3c005fc3dfdf2f5c7e40ce960e

[COMMIT MESSAGE]:Salli perusteen korjaus||Salli perusteen rajoitettu muokkaus julkaisun jälkeen.
Tekemättä: Estä tutkinnon osan ja oppiaineen rakenteen muokkaaminen.
=========================================================

+ @PreAuthorize("hasPermission(#event.perusteId, 'peruste', 'KORJAUS') or hasPermission(#event.perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#tid, #t.toString(), #p.toString())")
+ @PreAuthorize("hasPermission(#tid, #t.toString(), #p)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/8036d7ee9caa619397f64e829316ee029ad659e9

[COMMIT MESSAGE]:Oikeustarkastelu käyttöliittymätasolle.||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/629a82d86fc0ddfe138cabd5c2c987994a1e9fde

[COMMIT MESSAGE]:korjauksia.||
=========================================================

- @PreAuthorize("hasPermission(#kommenttidto.perusteprojektiId, 'perusteProjekti', 'KOMMENTOINTI')")
- //@PreAuthorize("hasPermission(#kommenttidto.perusteprojektiId, 'perusteProjekti', 'KOMMENTOINTI')")
+ @PreAuthorize("hasPermission(#tid, #t.toString(), #p.toString())")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/114c46dae4c04de4addc95ddaa435244e951db29

[COMMIT MESSAGE]:palvelu oikeuksien tarkistamiseen||
=========================================================

+ @PreAuthorize("hasPermission(#o,#p)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet-ylops/commit/fb86634ecbe724d8edf3a0329b664806b8fba820

[COMMIT MESSAGE]:Lisätty oikeudet-endpoint opetussuunnitelma-controlleriin||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/tusharkhonde/cmpe273/commit/1e32044a61bbc713e38344c8f447e318e018c155

[COMMIT MESSAGE]:First commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sophia2901/assignment1/commit/75395d27cbd4fdcd251a4d1acd17ceff97d6a1c4

[COMMIT MESSAGE]:validation and security check||
=========================================================

+////@PreAuthorize("hasRole('MODERATOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sophia2901/assignment1/commit/a816e304df0cf9a11f29de81a651ea8903bb06d1

[COMMIT MESSAGE]:Security check||
=========================================================

+//@PreAuthorize("hasRole('MODERATOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+@PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/1630814b9f5c7738b141156d9da2427bd257ef12

[COMMIT MESSAGE]:Marked classes where error handling needs to be added/changed||
=========================================================

- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/c9bdba3f3a2cab6ab780d352ce840edff9695eaa

[COMMIT MESSAGE]:API now bound to USER for read, ADMIN for write, addresses #267||
=========================================================

+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/f9b0670ae953bea7a6b227cf29a5abea6ed3dc64

[COMMIT MESSAGE]:Merged ClientAPI and ClientDynamicRegistrationEndpoitn by hand||
=========================================================

- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/1630814b9f5c7738b141156d9da2427bd257ef12

[COMMIT MESSAGE]:Marked classes where error handling needs to be added/changed||
=========================================================

- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/c9bdba3f3a2cab6ab780d352ce840edff9695eaa

[COMMIT MESSAGE]:API now bound to USER for read, ADMIN for write, addresses #267||
=========================================================

+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/d5551e96923e2306122c374f0c0eb94515d87a61

[COMMIT MESSAGE]:Added services for data import/export and modified JpaAuthenticationH…||…olderEntity and Repository to allow getting all objects
=========================================================

+@PreAuthorize("hasRole('ROLE_ADMIN')") // you need to be an admin to even think about this -- this is a potentially dangerous API!!

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/c34357a433d45d260b2c7fe570c32aa29bbd6aa1

[COMMIT MESSAGE]:added resource registration endpoint with basic functionality and spe…||…cialized tokens
=========================================================

+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + SystemScopeService.RESOURCE_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + SystemScopeService.RESOURCE_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + SystemScopeService.RESOURCE_TOKEN_SCOPE + "')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=6&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/1630814b9f5c7738b141156d9da2427bd257ef12

[COMMIT MESSAGE]:Marked classes where error handling needs to be added/changed||
=========================================================

- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/757e21a722b5bb5528029e1fbd663a48ceb579f5

[COMMIT MESSAGE]:added blacklist API||
=========================================================

+@PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/856c0ea0b5c7812fadf7f14a611eb5fb9401f4c7

[COMMIT MESSAGE]:Merge commit '023dd440d4a0e6e59a14c88013837d79a77c74e0' into 1.1-merge||Conflicts:
	openid-connect-client/pom.xml
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/AuthorizationRequestImpl.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectingTokenService.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionAuthorityGranter.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionUrlProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationFilter.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisher.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisherMapping.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/JwkViewResolver.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/AuthRequestUrlBuilder.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/ClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticServerConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticSingleIssuerService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/ThirdPartyIssuerService.java
	openid-connect-client/src/test/java/org/mitre/openid/connect/client/AbstractOIDCAuthenticationFilterTest.java
	openid-connect-common/pom.xml
	openid-connect-common/src/main/java/org/mitre/jose/keystore/JWKSetKeyStore.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/JwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/DefaultJwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/JWKSetSigningAndValidationServiceCacheService.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/AuthorizationCodeEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/ClientDetailsEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2AccessTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2RefreshTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/SystemScope.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/AuthorizationCodeRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/OAuth2TokenRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/service/OAuth2TokenEntityService.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ConfigurationPropertiesBean.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ServerConfiguration.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/ApprovedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/BlacklistedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/Event.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/OIDCAuthenticationToken.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/WhitelistedSite.java
	openid-connect-common/src/main/java/org/mitre/util/jpa/JpaUtil.java
	openid-connect-server/.gitignore
	openid-connect-server/pom.xml
	openid-connect-server/src/main/java/org/mitre/oauth2/repository/impl/JpaAuthorizationCodeRepository.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2AuthorizationCodeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ClientDetailsEntityService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ProviderTokenService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultSystemScopeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/ChainedTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/JwtAssertionTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/view/TokenIntrospectionView.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/IntrospectionEndpoint.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/OAuthConfirmationController.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/RevocationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/ConnectOAuth2RequestFactory.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerAuthenticationProvider.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerClientAssertionTokenEndpointFilter.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/InvalidJwtSignatureException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UnknownUserInfoSchemaException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UserNotFoundException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaApprovedSiteRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaUserInfoRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultApprovedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultNonceService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultStatsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultUserInfoUserDetailsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultWhitelistedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/ConnectTokenEnhancer.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/TofuUserApprovalHandler.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/AbstractClientEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ClientInformationResponseView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ExceptionAsJSONView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonErrorView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/POCOUserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/StatsSummary.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/UserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ApprovedSiteAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/BlacklistAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientDynamicRegistrationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ManagerController.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/RequestObjectAuthorizationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/StatsAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoInterceptor.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/WhitelistAPI.java
	openid-connect-server/src/main/webapp/WEB-INF/tags/aboutContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/breadcrumbs.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/contactContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/copyright.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/header.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageAbout.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageContact.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageStats.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageWelcome.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/sidebar.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/statsContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/topbar.tag
	openid-connect-server/src/main/webapp/WEB-INF/views/about.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/approve.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/contact.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/exception/usernotfound.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/login.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/manage.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/stats.jsp
	pom.xml
=========================================================

+//@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_CLIENT')")
- @PreAuthorize("hasRole('ROLE_CLIENT')")
+//@PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/15aea61fbec078b90083f19515786dfae9668bd7

[COMMIT MESSAGE]:Applied code cleanup||
=========================================================

-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/1630814b9f5c7738b141156d9da2427bd257ef12

[COMMIT MESSAGE]:Marked classes where error handling needs to be added/changed||
=========================================================

- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/d24ecd2e7c953007424063f08c43e8809b5d891c

[COMMIT MESSAGE]:Removed extra scope validation endpoint||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/96e333afa6206c1b140a257b7cc6166868ee97ca

[COMMIT MESSAGE]:Working on error handling||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/c9bdba3f3a2cab6ab780d352ce840edff9695eaa

[COMMIT MESSAGE]:API now bound to USER for read, ADMIN for write, addresses #267||
=========================================================

+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/ab35186696eb266102b2e511bd57e1332eb1ccca

[COMMIT MESSAGE]:added scope service, repository, and API||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/0b8dbc4f68a814c228baa8a5f8a67e52d52e1535

[COMMIT MESSAGE]:added registration token API||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/81634e616588f6138d848df079c0715d72e5d711

[COMMIT MESSAGE]:added API for getting tokens by clientid||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/89f015cf1c62933fcd48b2ea8dac48b7386e2401

[COMMIT MESSAGE]:Updated Token API to be less leaky||
=========================================================

-//@PreAuthorize("hasRole('ROLE_USER')")
-//@PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/856c0ea0b5c7812fadf7f14a611eb5fb9401f4c7

[COMMIT MESSAGE]:Merge commit '023dd440d4a0e6e59a14c88013837d79a77c74e0' into 1.1-merge||Conflicts:
	openid-connect-client/pom.xml
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/AuthorizationRequestImpl.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectingTokenService.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionAuthorityGranter.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionUrlProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationFilter.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisher.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisherMapping.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/JwkViewResolver.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/AuthRequestUrlBuilder.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/ClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticServerConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticSingleIssuerService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/ThirdPartyIssuerService.java
	openid-connect-client/src/test/java/org/mitre/openid/connect/client/AbstractOIDCAuthenticationFilterTest.java
	openid-connect-common/pom.xml
	openid-connect-common/src/main/java/org/mitre/jose/keystore/JWKSetKeyStore.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/JwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/DefaultJwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/JWKSetSigningAndValidationServiceCacheService.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/AuthorizationCodeEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/ClientDetailsEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2AccessTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2RefreshTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/SystemScope.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/AuthorizationCodeRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/OAuth2TokenRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/service/OAuth2TokenEntityService.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ConfigurationPropertiesBean.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ServerConfiguration.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/ApprovedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/BlacklistedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/Event.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/OIDCAuthenticationToken.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/WhitelistedSite.java
	openid-connect-common/src/main/java/org/mitre/util/jpa/JpaUtil.java
	openid-connect-server/.gitignore
	openid-connect-server/pom.xml
	openid-connect-server/src/main/java/org/mitre/oauth2/repository/impl/JpaAuthorizationCodeRepository.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2AuthorizationCodeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ClientDetailsEntityService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ProviderTokenService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultSystemScopeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/ChainedTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/JwtAssertionTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/view/TokenIntrospectionView.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/IntrospectionEndpoint.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/OAuthConfirmationController.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/RevocationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/ConnectOAuth2RequestFactory.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerAuthenticationProvider.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerClientAssertionTokenEndpointFilter.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/InvalidJwtSignatureException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UnknownUserInfoSchemaException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UserNotFoundException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaApprovedSiteRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaUserInfoRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultApprovedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultNonceService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultStatsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultUserInfoUserDetailsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultWhitelistedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/ConnectTokenEnhancer.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/TofuUserApprovalHandler.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/AbstractClientEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ClientInformationResponseView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ExceptionAsJSONView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonErrorView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/POCOUserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/StatsSummary.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/UserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ApprovedSiteAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/BlacklistAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientDynamicRegistrationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ManagerController.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/RequestObjectAuthorizationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/StatsAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoInterceptor.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/WhitelistAPI.java
	openid-connect-server/src/main/webapp/WEB-INF/tags/aboutContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/breadcrumbs.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/contactContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/copyright.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/header.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageAbout.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageContact.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageStats.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageWelcome.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/sidebar.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/statsContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/topbar.tag
	openid-connect-server/src/main/webapp/WEB-INF/views/about.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/approve.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/contact.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/exception/usernotfound.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/login.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/manage.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/stats.jsp
	pom.xml
=========================================================

+//@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_CLIENT')")
- @PreAuthorize("hasRole('ROLE_CLIENT')")
+//@PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/15aea61fbec078b90083f19515786dfae9668bd7

[COMMIT MESSAGE]:Applied code cleanup||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/1630814b9f5c7738b141156d9da2427bd257ef12

[COMMIT MESSAGE]:Marked classes where error handling needs to be added/changed||
=========================================================

- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/856c0ea0b5c7812fadf7f14a611eb5fb9401f4c7

[COMMIT MESSAGE]:Merge commit '023dd440d4a0e6e59a14c88013837d79a77c74e0' into 1.1-merge||Conflicts:
	openid-connect-client/pom.xml
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/AuthorizationRequestImpl.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectingTokenService.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionAuthorityGranter.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionUrlProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationFilter.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisher.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisherMapping.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/JwkViewResolver.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/AuthRequestUrlBuilder.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/ClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticServerConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticSingleIssuerService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/ThirdPartyIssuerService.java
	openid-connect-client/src/test/java/org/mitre/openid/connect/client/AbstractOIDCAuthenticationFilterTest.java
	openid-connect-common/pom.xml
	openid-connect-common/src/main/java/org/mitre/jose/keystore/JWKSetKeyStore.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/JwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/DefaultJwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/JWKSetSigningAndValidationServiceCacheService.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/AuthorizationCodeEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/ClientDetailsEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2AccessTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2RefreshTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/SystemScope.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/AuthorizationCodeRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/OAuth2TokenRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/service/OAuth2TokenEntityService.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ConfigurationPropertiesBean.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ServerConfiguration.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/ApprovedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/BlacklistedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/Event.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/OIDCAuthenticationToken.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/WhitelistedSite.java
	openid-connect-common/src/main/java/org/mitre/util/jpa/JpaUtil.java
	openid-connect-server/.gitignore
	openid-connect-server/pom.xml
	openid-connect-server/src/main/java/org/mitre/oauth2/repository/impl/JpaAuthorizationCodeRepository.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2AuthorizationCodeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ClientDetailsEntityService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ProviderTokenService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultSystemScopeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/ChainedTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/JwtAssertionTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/view/TokenIntrospectionView.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/IntrospectionEndpoint.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/OAuthConfirmationController.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/RevocationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/ConnectOAuth2RequestFactory.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerAuthenticationProvider.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerClientAssertionTokenEndpointFilter.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/InvalidJwtSignatureException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UnknownUserInfoSchemaException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UserNotFoundException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaApprovedSiteRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaUserInfoRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultApprovedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultNonceService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultStatsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultUserInfoUserDetailsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultWhitelistedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/ConnectTokenEnhancer.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/TofuUserApprovalHandler.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/AbstractClientEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ClientInformationResponseView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ExceptionAsJSONView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonErrorView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/POCOUserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/StatsSummary.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/UserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ApprovedSiteAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/BlacklistAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientDynamicRegistrationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ManagerController.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/RequestObjectAuthorizationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/StatsAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoInterceptor.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/WhitelistAPI.java
	openid-connect-server/src/main/webapp/WEB-INF/tags/aboutContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/breadcrumbs.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/contactContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/copyright.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/header.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageAbout.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageContact.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageStats.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageWelcome.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/sidebar.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/statsContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/topbar.tag
	openid-connect-server/src/main/webapp/WEB-INF/views/about.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/approve.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/contact.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/exception/usernotfound.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/login.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/manage.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/stats.jsp
	pom.xml
=========================================================

+//@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_CLIENT')")
- @PreAuthorize("hasRole('ROLE_CLIENT')")
+//@PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/15aea61fbec078b90083f19515786dfae9668bd7

[COMMIT MESSAGE]:Applied code cleanup||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/856c0ea0b5c7812fadf7f14a611eb5fb9401f4c7

[COMMIT MESSAGE]:Merge commit '023dd440d4a0e6e59a14c88013837d79a77c74e0' into 1.1-merge||Conflicts:
	openid-connect-client/pom.xml
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/AuthorizationRequestImpl.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectingTokenService.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionAuthorityGranter.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionUrlProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationFilter.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisher.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisherMapping.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/JwkViewResolver.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/AuthRequestUrlBuilder.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/ClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticServerConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticSingleIssuerService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/ThirdPartyIssuerService.java
	openid-connect-client/src/test/java/org/mitre/openid/connect/client/AbstractOIDCAuthenticationFilterTest.java
	openid-connect-common/pom.xml
	openid-connect-common/src/main/java/org/mitre/jose/keystore/JWKSetKeyStore.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/JwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/DefaultJwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/JWKSetSigningAndValidationServiceCacheService.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/AuthorizationCodeEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/ClientDetailsEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2AccessTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2RefreshTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/SystemScope.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/AuthorizationCodeRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/OAuth2TokenRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/service/OAuth2TokenEntityService.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ConfigurationPropertiesBean.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ServerConfiguration.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/ApprovedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/BlacklistedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/Event.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/OIDCAuthenticationToken.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/WhitelistedSite.java
	openid-connect-common/src/main/java/org/mitre/util/jpa/JpaUtil.java
	openid-connect-server/.gitignore
	openid-connect-server/pom.xml
	openid-connect-server/src/main/java/org/mitre/oauth2/repository/impl/JpaAuthorizationCodeRepository.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2AuthorizationCodeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ClientDetailsEntityService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ProviderTokenService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultSystemScopeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/ChainedTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/JwtAssertionTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/view/TokenIntrospectionView.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/IntrospectionEndpoint.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/OAuthConfirmationController.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/RevocationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/ConnectOAuth2RequestFactory.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerAuthenticationProvider.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerClientAssertionTokenEndpointFilter.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/InvalidJwtSignatureException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UnknownUserInfoSchemaException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UserNotFoundException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaApprovedSiteRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaUserInfoRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultApprovedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultNonceService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultStatsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultUserInfoUserDetailsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultWhitelistedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/ConnectTokenEnhancer.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/TofuUserApprovalHandler.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/AbstractClientEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ClientInformationResponseView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ExceptionAsJSONView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonErrorView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/POCOUserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/StatsSummary.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/UserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ApprovedSiteAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/BlacklistAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientDynamicRegistrationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ManagerController.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/RequestObjectAuthorizationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/StatsAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoInterceptor.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/WhitelistAPI.java
	openid-connect-server/src/main/webapp/WEB-INF/tags/aboutContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/breadcrumbs.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/contactContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/copyright.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/header.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageAbout.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageContact.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageStats.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageWelcome.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/sidebar.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/statsContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/topbar.tag
	openid-connect-server/src/main/webapp/WEB-INF/views/about.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/approve.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/contact.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/exception/usernotfound.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/login.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/manage.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/stats.jsp
	pom.xml
=========================================================

+//@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_CLIENT')")
- @PreAuthorize("hasRole('ROLE_CLIENT')")
+//@PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")// TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/15aea61fbec078b90083f19515786dfae9668bd7

[COMMIT MESSAGE]:Applied code cleanup||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/1630814b9f5c7738b141156d9da2427bd257ef12

[COMMIT MESSAGE]:Marked classes where error handling needs to be added/changed||
=========================================================

- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/fbc3c4612846ee361f0b57338166929bb1f095ed

[COMMIT MESSAGE]:Introspection now draft spec compliant, requires client auth||Currently this is the client that originally sent the token, we want to have a way to bind other "clients" to this token as well, like resource services. Also want to let open calls, sometimes.
=========================================================

+ @PreAuthorize("hasRole('ROLE_CLIENT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/856c0ea0b5c7812fadf7f14a611eb5fb9401f4c7

[COMMIT MESSAGE]:Merge commit '023dd440d4a0e6e59a14c88013837d79a77c74e0' into 1.1-merge||Conflicts:
	openid-connect-client/pom.xml
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/AuthorizationRequestImpl.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectingTokenService.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionAuthorityGranter.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionUrlProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationFilter.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisher.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisherMapping.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/JwkViewResolver.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/AuthRequestUrlBuilder.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/ClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticServerConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticSingleIssuerService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/ThirdPartyIssuerService.java
	openid-connect-client/src/test/java/org/mitre/openid/connect/client/AbstractOIDCAuthenticationFilterTest.java
	openid-connect-common/pom.xml
	openid-connect-common/src/main/java/org/mitre/jose/keystore/JWKSetKeyStore.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/JwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/DefaultJwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/JWKSetSigningAndValidationServiceCacheService.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/AuthorizationCodeEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/ClientDetailsEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2AccessTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2RefreshTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/SystemScope.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/AuthorizationCodeRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/OAuth2TokenRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/service/OAuth2TokenEntityService.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ConfigurationPropertiesBean.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ServerConfiguration.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/ApprovedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/BlacklistedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/Event.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/OIDCAuthenticationToken.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/WhitelistedSite.java
	openid-connect-common/src/main/java/org/mitre/util/jpa/JpaUtil.java
	openid-connect-server/.gitignore
	openid-connect-server/pom.xml
	openid-connect-server/src/main/java/org/mitre/oauth2/repository/impl/JpaAuthorizationCodeRepository.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2AuthorizationCodeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ClientDetailsEntityService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ProviderTokenService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultSystemScopeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/ChainedTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/JwtAssertionTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/view/TokenIntrospectionView.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/IntrospectionEndpoint.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/OAuthConfirmationController.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/RevocationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/ConnectOAuth2RequestFactory.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerAuthenticationProvider.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerClientAssertionTokenEndpointFilter.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/InvalidJwtSignatureException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UnknownUserInfoSchemaException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UserNotFoundException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaApprovedSiteRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaUserInfoRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultApprovedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultNonceService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultStatsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultUserInfoUserDetailsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultWhitelistedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/ConnectTokenEnhancer.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/TofuUserApprovalHandler.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/AbstractClientEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ClientInformationResponseView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ExceptionAsJSONView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonErrorView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/POCOUserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/StatsSummary.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/UserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ApprovedSiteAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/BlacklistAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientDynamicRegistrationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ManagerController.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/RequestObjectAuthorizationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/StatsAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoInterceptor.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/WhitelistAPI.java
	openid-connect-server/src/main/webapp/WEB-INF/tags/aboutContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/breadcrumbs.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/contactContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/copyright.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/header.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageAbout.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageContact.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageStats.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageWelcome.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/sidebar.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/statsContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/topbar.tag
	openid-connect-server/src/main/webapp/WEB-INF/views/about.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/approve.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/contact.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/exception/usernotfound.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/login.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/manage.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/stats.jsp
	pom.xml
=========================================================

+//@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_CLIENT')")
- @PreAuthorize("hasRole('ROLE_CLIENT')")
+//@PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")// TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/15aea61fbec078b90083f19515786dfae9668bd7

[COMMIT MESSAGE]:Applied code cleanup||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/sergeevii123/gwtcrud/commit/38cf23051880ef6b18b9d57fb021d97cc9e75c9b

[COMMIT MESSAGE]:1||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=7&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/Shepherd/commit/c60fa8d050c3af157e62993d18968dbe75d1e53c

[COMMIT MESSAGE]:refactor admin project||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/Shepherd/commit/976251cd4085aeab8483996b46fa3ba86e373f33

[COMMIT MESSAGE]:refactor config||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/marioasdf/function-grapher/commit/b196e2aada2d016fc73778bda0868e63a700d9f8

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("permitAll")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=8&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=9&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=10&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=11&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=12&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/raouldh/web-app/commit/e17ebff4cf82c8b3190f7c9d27f35a0375a96fb7

[COMMIT MESSAGE]:added account and blog functionalitie incl. spring securty||
=========================================================

+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/raouldh/web-app/commit/e17ebff4cf82c8b3190f7c9d27f35a0375a96fb7

[COMMIT MESSAGE]:added account and blog functionalitie incl. spring securty||
=========================================================

+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/motomen/my-qualification-work/commit/376a91bbefeb1feb535f4357b5b4ba97889fe8c1

[COMMIT MESSAGE]:add calculator calories||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/motomen/my-qualification-work/commit/376a91bbefeb1feb535f4357b5b4ba97889fe8c1

[COMMIT MESSAGE]:add calculator calories||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/motomen/my-qualification-work/commit/726ed8c920b9178393b2b31d45b55d8e6a7b960b

[COMMIT MESSAGE]:complete show food||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('Admin') or hasRole('User')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/motomen/my-qualification-work/commit/376a91bbefeb1feb535f4357b5b4ba97889fe8c1

[COMMIT MESSAGE]:add calculator calories||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/motomen/my-qualification-work/commit/5c0fbcb3a5e788db44ebede3779a01188627c3d0

[COMMIT MESSAGE]:add comments and try add rating||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/motomen/my-qualification-work/commit/726ed8c920b9178393b2b31d45b55d8e6a7b960b

[COMMIT MESSAGE]:complete show food||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('Admin') or hasRole('User')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/nazar-art/SpringInAction/commit/f365c09374613f658939706b8d89ebfe2f1452a6

[COMMIT MESSAGE]:Initial commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SPITTER') and #amount > 10")
+ @PreAuthorize("#input.length() <= 3")

=========================================================
[CODE-CHANGE-URL]:https://github.com/nazar-art/SpringInAction/commit/f365c09374613f658939706b8d89ebfe2f1452a6

[COMMIT MESSAGE]:Initial commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SPITTER') and #amount > 10")
+ @PreAuthorize("#input.length() <= 3")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=13&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/Shepherd/commit/976251cd4085aeab8483996b46fa3ba86e373f33

[COMMIT MESSAGE]:refactor config||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/Shepherd/commit/2af407f3e6f6ca93de9f7fd06f5ffc27a6740535

[COMMIT MESSAGE]:refactor config||
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/Shepherd/commit/2af407f3e6f6ca93de9f7fd06f5ffc27a6740535

[COMMIT MESSAGE]:refactor config||
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/maxsap/springBootPrimefaces/commit/343193c3ce07ee54d74e0795e6d927e1e5eae0f9

[COMMIT MESSAGE]:Initial commit.||Things that remain to be fixed:
- Jersey-springrest OAuth security provider.
=========================================================

+ @PreAuthorize("isFullyAuthenticated() and hasRole('ADMIN')")
+ @PreAuthorize("isFullyAuthenticated() and hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/maxsap/springBootPrimefaces/commit/343193c3ce07ee54d74e0795e6d927e1e5eae0f9

[COMMIT MESSAGE]:Initial commit.||Things that remain to be fixed:
- Jersey-springrest OAuth security provider.
=========================================================

+ @PreAuthorize("isFullyAuthenticated() and hasRole('ADMIN')")
+ @PreAuthorize("isFullyAuthenticated() and hasRole('ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=14&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/spring-cloud-microservices/audit-service/commit/21712c114df41e40cfdebd1ad7b321821efc109e

[COMMIT MESSAGE]:enable cloud,discovery,actuator. move to data-rest.||
=========================================================

- @PreAuthorize("#oauth2.hasScope('audit-service/audit.write')")
+ @PreAuthorize("#oauth2.hasScope('audit-service/audit.write')")
+ @PreAuthorize("#oauth2.hasScope('audit-service/audit.write')")
+ @PreAuthorize("#oauth2.hasScope('audit-service/audit.write')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/openanalytics/RSB/commit/b3b384db57abe7422d58044f723ed2ea0ba6b4f0

[COMMIT MESSAGE]:review catalog security to better support non-partitionned mode||
=========================================================

- @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#applicationName, 'CATALOG_USER')")
- @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#applicationName, 'CATALOG_USER')")
- @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_ADMIN')")
+ @PreAuthorize("hasPermission(#applicationName, 'CATALOG_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/openanalytics/RSB/commit/1320ee40f4e17c16a01390c32227a9171c044100

[COMMIT MESSAGE]:redesign security permissions to support notion of app user and admin||
=========================================================

+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/openanalytics/RSB/commit/59e03f6c9930217889ec8fd1b76145fe98818d7b

[COMMIT MESSAGE]:#166 added support application-level security||
=========================================================

+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#job.applicationName, 'APPLICATION_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/openanalytics/RSB/commit/fa08fc384c53b0eb94e9d7d52792027c95db187c

[COMMIT MESSAGE]:added fine grained security control for apps||
=========================================================

- @PreAuthorize("hasPermission(#job.applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#job, 'APPLICATION_JOB')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/openanalytics/RSB/commit/59e03f6c9930217889ec8fd1b76145fe98818d7b

[COMMIT MESSAGE]:#166 added support application-level security||
=========================================================

+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#job.applicationName, 'APPLICATION_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/openanalytics/RSB/commit/8f44dfc87695633c90a51ec7d63bdcdd267e0a3e

[COMMIT MESSAGE]:secured direct processing||
=========================================================

+ @PreAuthorize("hasPermission(#job, 'APPLICATION_JOB')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/openanalytics/RSB/commit/fa08fc384c53b0eb94e9d7d52792027c95db187c

[COMMIT MESSAGE]:added fine grained security control for apps||
=========================================================

- @PreAuthorize("hasPermission(#job.applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#job, 'APPLICATION_JOB')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/bedmansz/files/commit/6647c54fb0c92cbe79f36c7d4ebed1b1a9641038

[COMMIT MESSAGE]:edit search||
=========================================================

+ @PreAuthorize("hasRole('user')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/bedmansz/files/commit/8279219e23ffa1e2f1c9b2768e11ff59ebe24339

[COMMIT MESSAGE]:edit login||
=========================================================

+ @PreAuthorize("hasRole('user')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Unidata/thredds/commit/c4749087cd1bed027ddaa962864114de81b59246

[COMMIT MESSAGE]:added spring security for user authentication/access control||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN') or #userName == authentication.name")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #userName == authentication.name")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #user.userName == authentication.name")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Unidata/thredds/commit/c4749087cd1bed027ddaa962864114de81b59246

[COMMIT MESSAGE]:added spring security for user authentication/access control||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN') or #userName == authentication.name")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #userName == authentication.name")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #user.userName == authentication.name")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=15&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=16&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/lhalam/JExercises/commit/a1a148a95f15e0f2e09d1db4241618c334ad47b6

[COMMIT MESSAGE]:add Users DataTable view||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/we2seek/sales/commit/0030b43b786fe62cb4004e4b44fb92342fdd326e

[COMMIT MESSAGE]:Add Plans||
=========================================================

+@PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/we2seek/sales/commit/0645df6bb89b2e86c05d78016ec93109d88f34ff

[COMMIT MESSAGE]:User monthly report with month selec capability||
=========================================================

+@PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/we2seek/sales/commit/71a4bc72490b21eb437d86c263e70816544ceff5

[COMMIT MESSAGE]:Deny access to delete, and edit other people's entries||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/we2seek/sales/commit/c516c3437ac8f0e3b796ed355bdeea2ab438d867

[COMMIT MESSAGE]:Add sales management||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/817237840498ada06aa99fd03fdc315a6b6fae0c

[COMMIT MESSAGE]:130 - the code was formatted by our template||
=========================================================

- @PreAuthorize("hasPermission(#dpu,'save')")
- @PreAuthorize("hasPermission(#dpu,'delete')")
+ @PreAuthorize("hasPermission(#dpu,'save')")
+ @PreAuthorize("hasPermission(#dpu,'delete')")
- @PreAuthorize("hasPermission(#user, 'save')")
- @PreAuthorize("hasPermission(#user, 'delete')")
+ @PreAuthorize("hasPermission(#user, 'save')")
+ @PreAuthorize("hasPermission(#user, 'delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/dd0dd9196846226bc5f37c4b2edb3eee7603a192

[COMMIT MESSAGE]:User can stop pipeline execution only if he started it.||
=========================================================

+ @PreAuthorize("hasPermission(#execution, 'save')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/3837204ee513fff763eac72389cd60cc5e861fc3

[COMMIT MESSAGE]:Author of DPU template can see all pipelines using it. #907||
=========================================================

+ @PreAuthorize("hasPermission(#dpu, 'delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/638ebe28563e951b6a8393554a531048d8b47fd1

[COMMIT MESSAGE]:Facades split into interfaces and implementations||
=========================================================

- @PreAuthorize("hasPermission(#dpu,'save')")
- @PreAuthorize("hasPermission(#dpu,'delete')")
+ @PreAuthorize("hasPermission(#dpu,'save')")
+ @PreAuthorize("hasPermission(#dpu,'delete')")
- @PreAuthorize("hasPermission(#pipeline, 'copy')")
- @PreAuthorize("hasPermission(#pipeline,'save')")
- @PreAuthorize("hasPermission(#pipeline, 'delete')")
- @PreAuthorize("hasPermission(#dpu, 'view')")
+ @PreAuthorize("hasPermission(#pipeline, 'copy')")
+ @PreAuthorize("hasPermission(#pipeline,'save')")
+ @PreAuthorize("hasPermission(#pipeline, 'delete')")
+ @PreAuthorize("hasPermission(#dpu, 'view')")
- @PreAuthorize("hasPermission(#schedule, 'save')")
+ @PreAuthorize("hasPermission(#schedule, 'save')")
- @PreAuthorize("hasPermission(#user, 'save')")
- @PreAuthorize("hasPermission(#user, 'delete')")
+ @PreAuthorize("hasPermission(#user, 'save')")
+ @PreAuthorize("hasPermission(#user, 'delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/FormBuilderBackend/commit/5508392a623cb7e849121e4aaea6a901095e14d6

[COMMIT MESSAGE]:The backend is now fully functional to create forms and responses and…||… to make edits to them.

Know issues
-Delete resource is not available, will re-enable

Missing Features
-"nested questions" where one question is displayed if another question is answered particular way
-"themes" or tags which allow easy filtering of questions
=========================================================

- @PreAuthorize("hasPermission(#response, 'write') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#formResponse, 'write') or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasPermission(#response, 'write') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#formResponse, 'write') or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasPermission(#response, 'delete') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#formResponse, 'delete') or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasPermission(#question, 'write') or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasPermission(#question, 'write') or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasPermission(#question, 'delete') or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ROOT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/1eaa44c6b262d0b2229805469351344adb0a976e

[COMMIT MESSAGE]:Create, assign users, roles||
=========================================================

- @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('CREATE_RESOURCE')")
+ @PreAuthorize("hasRole('CREATE_ROLE')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/1eaa44c6b262d0b2229805469351344adb0a976e

[COMMIT MESSAGE]:Create, assign users, roles||
=========================================================

- @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('CREATE_RESOURCE')")
+ @PreAuthorize("hasRole('CREATE_ROLE')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/f68be6d7c2e6066a528daa082cd1cb1c881b0b65

[COMMIT MESSAGE]:Controller, jsp, service, dao impl||
=========================================================

+ @PreAuthorize("hasRole('Admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/1eaa44c6b262d0b2229805469351344adb0a976e

[COMMIT MESSAGE]:Create, assign users, roles||
=========================================================

- @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('CREATE_RESOURCE')")
+ @PreAuthorize("hasRole('CREATE_ROLE')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/f68be6d7c2e6066a528daa082cd1cb1c881b0b65

[COMMIT MESSAGE]:Controller, jsp, service, dao impl||
=========================================================

+ @PreAuthorize("hasRole('Admin')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=17&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/1eaa44c6b262d0b2229805469351344adb0a976e

[COMMIT MESSAGE]:Create, assign users, roles||
=========================================================

- @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('CREATE_RESOURCE')")
+ @PreAuthorize("hasRole('CREATE_ROLE')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/1eaa44c6b262d0b2229805469351344adb0a976e

[COMMIT MESSAGE]:Create, assign users, roles||
=========================================================

- @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('CREATE_RESOURCE')")
+ @PreAuthorize("hasRole('CREATE_ROLE')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/f68be6d7c2e6066a528daa082cd1cb1c881b0b65

[COMMIT MESSAGE]:Controller, jsp, service, dao impl||
=========================================================

+ @PreAuthorize("hasRole('Admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/1eaa44c6b262d0b2229805469351344adb0a976e

[COMMIT MESSAGE]:Create, assign users, roles||
=========================================================

- @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('CREATE_RESOURCE')")
+ @PreAuthorize("hasRole('CREATE_ROLE')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/f68be6d7c2e6066a528daa082cd1cb1c881b0b65

[COMMIT MESSAGE]:Controller, jsp, service, dao impl||
=========================================================

+ @PreAuthorize("hasRole('Admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/molgenis/molgenis/commit/40996148008db8914b9c2582be80c24d74921d12

[COMMIT MESSAGE]:Adding classes to molgenis-core-ui.||Removed from OMX and PALGA where duplicated
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SU')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/oegegr/java-blog-aggregator/commit/67f6afec428c5327ee6047eef0fa8c6d9e74cf94

[COMMIT MESSAGE]:-validation||-jquery
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/europeana/Europeana-Cloud/commit/ecb1aa5b38143d305f1911d0bab28bdda63dbd0b

[COMMIT MESSAGE]:ECL-385 - fixed aas spring context||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/europeana/Europeana-Cloud/commit/6e54aeec63b13cc842510a2783af22d1845619d5

[COMMIT MESSAGE]:ECL-332: aas-rest is now admin-only, + added aas-rest-client||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/europeana/Europeana-Cloud/commit/58a24a399dcfe494c56748cd82b5d79197a445db

[COMMIT MESSAGE]:ECL-299 aas-rest cleanup||
=========================================================

-// @PreAuthorize("isAuthenticated()")
-// @PreAuthorize("hasPermission(#cloudId, 'eu.europeana.cloud.common.model.CloudId', delete)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/europeana/Europeana-Cloud/commit/7e721925fb2d1073dd4624818593264342056738

[COMMIT MESSAGE]:heavy refactoring on UIS, homogenizing naming conventions||authentication has now rest service and has some basic testing
missing still is integration with other services and authorization testing
=========================================================

+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("hasPermission(#cloudId, 'eu.europeana.cloud.common.model.CloudId', delete)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/861830bcc4cb35c5f7692b45ad44adc4d4eaca2d

[COMMIT MESSAGE]:JC-2073 Deletion of comments implementation||Now comments from Q&A topics can be deleted by marking them as deleted.
Fro this new database column DELETION_DATE was created.
We use hibernate "where" clause to load only comments which is not marked as deleted.
=========================================================

+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.EDIT_OWN_POSTS') and " +
+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/b07dc6100a6f7d126ae5807e1771efcaa4f331ee

[COMMIT MESSAGE]:#JC-2031:Implemented service layer of vote logic||To vote for posts from core forum PostService should be used
To vote for posts from plugins created separate service in plugin API
=========================================================

+ @PreAuthorize("hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.CREATE_POSTS') " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/167846b930534c8aa387736d23326363bc25d47e

[COMMIT MESSAGE]:#JC-2023:Refactoried code review to use same table as topic||Now we have different topic types 'discussion' and 'code review' to determine wathever this topic code review or not. Also this approach allow plugins store custom topic types

Code review comment now relates to post intead of code review itself

Code review entity removed now
=========================================================

- @PreAuthorize("(hasPermission(#codeReview.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +
+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +
- @PreAuthorize("hasPermission(#topicDto.branch.id, 'BRANCH', 'BranchPermission.CREATE_POSTS')")
+ @PreAuthorize("( not #topicDto.codeReview " +
- @PreAuthorize("hasPermission(#topicDto.branch.id, 'BRANCH', 'BranchPermission.CREATE_CODE_REVIEW')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/11838a7cb5559aa3ba2b49f8e21bea25bfac70e1

[COMMIT MESSAGE]:Merge remote-tracking branch 'origin/JC-1494'||Conflicts:
	jcommune-service/src/main/java/org/jtalks/jcommune/service/transactional/TransactionalPostService.java
=========================================================

- @PreAuthorize("hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.VIEW_TOPICS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/4055f14a946b7b1e649f640db4a7d02d3c71638a

[COMMIT MESSAGE]:#JC-1494 Removed usages of the setPostIndex method||
=========================================================

- @PreAuthorize("hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.VIEW_TOPICS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/e940596fa4078699beaa9e04eff8b1b9db187b7f

[COMMIT MESSAGE]:JC-2073 Fixed permissions issue, implemented localization||
=========================================================

- @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.EDIT_OWN_POSTS') and " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/861830bcc4cb35c5f7692b45ad44adc4d4eaca2d

[COMMIT MESSAGE]:JC-2073 Deletion of comments implementation||Now comments from Q&A topics can be deleted by marking them as deleted.
Fro this new database column DELETION_DATE was created.
We use hibernate "where" clause to load only comments which is not marked as deleted.
=========================================================

+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.EDIT_OWN_POSTS') and " +
+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/167846b930534c8aa387736d23326363bc25d47e

[COMMIT MESSAGE]:#JC-2023:Refactoried code review to use same table as topic||Now we have different topic types 'discussion' and 'code review' to determine wathever this topic code review or not. Also this approach allow plugins store custom topic types

Code review comment now relates to post intead of code review itself

Code review entity removed now
=========================================================

- @PreAuthorize("(hasPermission(#codeReview.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +
+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +
- @PreAuthorize("hasPermission(#topicDto.branch.id, 'BRANCH', 'BranchPermission.CREATE_POSTS')")
+ @PreAuthorize("( not #topicDto.codeReview " +
- @PreAuthorize("hasPermission(#topicDto.branch.id, 'BRANCH', 'BranchPermission.CREATE_CODE_REVIEW')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/molgenis/molgenis/commit/7c0493f301b61433664f46a90473cc0e0e911266

[COMMIT MESSAGE]:Improved user manager. Both users and groups can now easily be create…||…d, updated, and (de)activated.
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SU')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/molgenis/molgenis/commit/2ab8d7c0e739e3682b3a753969a85bf34170036a

[COMMIT MESSAGE]:Merge branch 'master' of https://github.com/molgenis/molgenis||Conflicts:
	molgenis-app-omx/src/main/java/org/molgenis/omx/WebAppDatabasePopulatorServiceImpl.java
	molgenis-omx-protocolviewer/src/main/java/org/molgenis/omx/study/StudyDataRequestDecorator.java
	molgenis-security/src/main/java/org/molgenis/security/account/AccountService.java
	molgenis-security/src/main/java/org/molgenis/security/user/MolgenisUserService.java
	molgenis-security/src/main/java/org/molgenis/security/user/MolgenisUserServiceImpl.java
	molgenis-security/src/main/java/org/molgenis/security/user/UserAccountController.java
	molgenis-security/src/main/java/org/molgenis/security/usermanager/UserManagerServiceImpl.java
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SU', 'ROLE_PLUGIN_READ_USERACCOUNT')")
+ @PreAuthorize("hasAnyRole('ROLE_SU', 'ROLE_PLUGIN_WRITE_USERACCOUNT')")
+ @PreAuthorize("hasAnyRole('ROLE_SU', 'ROLE_PLUGIN_READ_USERACCOUNT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/molgenis/molgenis/commit/7a32d1b45e8049fd9abcfbc1db85986bd8c5eb23

[COMMIT MESSAGE]:hierarchical permissions in permission manager||
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_WRITE_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_WRITE_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_WRITE_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_WRITE_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=18&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/e940596fa4078699beaa9e04eff8b1b9db187b7f

[COMMIT MESSAGE]:JC-2073 Fixed permissions issue, implemented localization||
=========================================================

- @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.EDIT_OWN_POSTS') and " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/861830bcc4cb35c5f7692b45ad44adc4d4eaca2d

[COMMIT MESSAGE]:JC-2073 Deletion of comments implementation||Now comments from Q&A topics can be deleted by marking them as deleted.
Fro this new database column DELETION_DATE was created.
We use hibernate "where" clause to load only comments which is not marked as deleted.
=========================================================

+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.EDIT_OWN_POSTS') and " +
+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/167846b930534c8aa387736d23326363bc25d47e

[COMMIT MESSAGE]:#JC-2023:Refactoried code review to use same table as topic||Now we have different topic types 'discussion' and 'code review' to determine wathever this topic code review or not. Also this approach allow plugins store custom topic types

Code review comment now relates to post intead of code review itself

Code review entity removed now
=========================================================

- @PreAuthorize("(hasPermission(#codeReview.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +
+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +
- @PreAuthorize("hasPermission(#topicDto.branch.id, 'BRANCH', 'BranchPermission.CREATE_POSTS')")
+ @PreAuthorize("( not #topicDto.codeReview " +
- @PreAuthorize("hasPermission(#topicDto.branch.id, 'BRANCH', 'BranchPermission.CREATE_CODE_REVIEW')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/molgenis/molgenis/commit/7c0493f301b61433664f46a90473cc0e0e911266

[COMMIT MESSAGE]:Improved user manager. Both users and groups can now easily be create…||…d, updated, and (de)activated.
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SU')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/molgenis/molgenis/commit/2ab8d7c0e739e3682b3a753969a85bf34170036a

[COMMIT MESSAGE]:Merge branch 'master' of https://github.com/molgenis/molgenis||Conflicts:
	molgenis-app-omx/src/main/java/org/molgenis/omx/WebAppDatabasePopulatorServiceImpl.java
	molgenis-omx-protocolviewer/src/main/java/org/molgenis/omx/study/StudyDataRequestDecorator.java
	molgenis-security/src/main/java/org/molgenis/security/account/AccountService.java
	molgenis-security/src/main/java/org/molgenis/security/user/MolgenisUserService.java
	molgenis-security/src/main/java/org/molgenis/security/user/MolgenisUserServiceImpl.java
	molgenis-security/src/main/java/org/molgenis/security/user/UserAccountController.java
	molgenis-security/src/main/java/org/molgenis/security/usermanager/UserManagerServiceImpl.java
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SU', 'ROLE_PLUGIN_READ_USERACCOUNT')")
+ @PreAuthorize("hasAnyRole('ROLE_SU', 'ROLE_PLUGIN_WRITE_USERACCOUNT')")
+ @PreAuthorize("hasAnyRole('ROLE_SU', 'ROLE_PLUGIN_READ_USERACCOUNT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/molgenis/molgenis/commit/7a32d1b45e8049fd9abcfbc1db85986bd8c5eb23

[COMMIT MESSAGE]:hierarchical permissions in permission manager||
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_WRITE_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_WRITE_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_WRITE_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_WRITE_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/term1n/mongoWebClient/commit/8e6f2096f4db95f4308c0357f440d4c1bce86c69

[COMMIT MESSAGE]:redesign of user management, bugfixes||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_PRUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_PRUSER','ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/term1n/mongoWebClient/commit/8c1a72a5098841c2a7eb382b811842fe8ea88f51

[COMMIT MESSAGE]:role-based security policy, beta version||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER')")
+ @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER')")
+ @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/term1n/mongoWebClient/commit/8e6f2096f4db95f4308c0357f440d4c1bce86c69

[COMMIT MESSAGE]:redesign of user management, bugfixes||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_PRUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_PRUSER','ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/term1n/mongoWebClient/commit/8c1a72a5098841c2a7eb382b811842fe8ea88f51

[COMMIT MESSAGE]:role-based security policy, beta version||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER')")
+ @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER')")
+ @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/term1n/mongoWebClient/commit/268639a7f456377bdf8effc5e3bf1925934addac

[COMMIT MESSAGE]:role-based security policy, beginning||
=========================================================

+@PreAuthorize("hasRole('ROLE_PRUSER')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_PRUSER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/term1n/mongoWebClient/commit/8e6f2096f4db95f4308c0357f440d4c1bce86c69

[COMMIT MESSAGE]:redesign of user management, bugfixes||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_PRUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_PRUSER','ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/term1n/mongoWebClient/commit/8c1a72a5098841c2a7eb382b811842fe8ea88f51

[COMMIT MESSAGE]:role-based security policy, beta version||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER')")
+ @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER')")
+ @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/term1n/mongoWebClient/commit/268639a7f456377bdf8effc5e3bf1925934addac

[COMMIT MESSAGE]:role-based security policy, beginning||
=========================================================

+@PreAuthorize("hasRole('ROLE_PRUSER')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_PRUSER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yeyan/spring-test/commit/acae29aa99388d169bfaa2ae868e285358a4e9a4

[COMMIT MESSAGE]:Initial commit||
=========================================================

+ @PreAuthorize("hasPermission(#username, 'isAdmin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Patouche/blog-testing/commit/03f1eb0677da5b24d86e716f3e55156d4226667a

[COMMIT MESSAGE]:Add DMS in application||This will be usefull to show how to handle fs and using the @Rule TemporayFolder
=========================================================

+ @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")
+ @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Patouche/blog-testing/commit/bd2d7052cc739e5dd4bac9e0d565e16319d0c5c4

[COMMIT MESSAGE]:Create a custom repository for full text search||
=========================================================

+ @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")
- @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Patouche/blog-testing/commit/03f1eb0677da5b24d86e716f3e55156d4226667a

[COMMIT MESSAGE]:Add DMS in application||This will be usefull to show how to handle fs and using the @Rule TemporayFolder
=========================================================

+ @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")
+ @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Patouche/blog-testing/commit/bd2d7052cc739e5dd4bac9e0d565e16319d0c5c4

[COMMIT MESSAGE]:Create a custom repository for full text search||
=========================================================

+ @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")
- @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Patouche/blog-testing/commit/7ba42abbcb61d0c3b285e99e7bb871d7be128f8a

[COMMIT MESSAGE]:Fix root user event||
=========================================================

- @PreAuthorize("hasRole('ADMIN', 'EDITOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Patouche/blog-testing/commit/b73dca0e0f59e0c1da8d527a08711e1a8a4b9436

[COMMIT MESSAGE]:Add less and move some files||
=========================================================

+ @PreAuthorize("hasRole('ADMIN', 'EDITOR')")
+ @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")
+ @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")
- @PreAuthorize("hasRole('ADMIN')")
- @PreAuthorize("hasRole('ADMIN')")
- @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=19&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/81342f4978a6b9f284f9233727a3161ea768bf6c

[COMMIT MESSAGE]:Made the names for travel expense classes much shorter. More package …||…structure.
=========================================================

- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("(isAuthenticated() and @travelExpenseReportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/2b064dcb11054571b854b51e4232dab891e21829

[COMMIT MESSAGE]:TRACKR-174 - Track sick days||
=========================================================

+ @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e0c9ab7ed6615e9a60cd2c88a6806274ccf8c3d3

[COMMIT MESSAGE]:TRACKR-123 - Implement address book||Added an address book controller.
=========================================================

+ @PreAuthorize("hasRole('ROLE_EMPLOYEE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/81342f4978a6b9f284f9233727a3161ea768bf6c

[COMMIT MESSAGE]:Made the names for travel expense classes much shorter. More package …||…structure.
=========================================================

- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("(isAuthenticated() and @travelExpenseReportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/8e237e54e34789d92b23bc7bfd8deb8f3e98b7d0

[COMMIT MESSAGE]:TRACKR-79 - Tracking of travel expenses||Travel expense reports are now approvable and rejectable by supervisors
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/3076e018c2d6758aa5e53ec42f4effd51083220e

[COMMIT MESSAGE]:TRACKR-79 - Tracking of travel expenses||New travel expenses are only creatable if the report is not accepted
Translations
Don't display the add travel expense form on accepted reports
=========================================================

- @PreAuthorize("#travelExpense.report.employee.id == principal.id")
+ @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() && @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() && @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/1ae0fe747203078b61002f4105c59edb2828cc4c

[COMMIT MESSAGE]:TRACKR-79 - Tracking of travel expenses||Deleting and editing of accepted travel expenses is forbidden for employees
=========================================================

- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( #travelExpense.report.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() && @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( #travelExpense.report.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() && @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/970bbc7afd1e3f581cdc944ea1dfb97977c000ed

[COMMIT MESSAGE]:TRACKR-79 - Tracking of travel expenses||Migrated tests
TravelExpenseEventHandler added
=========================================================

+ @PreAuthorize("#travelExpense.report.employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( #travelExpense.report.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( #travelExpense.report.employee.id == principal.id )")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/81342f4978a6b9f284f9233727a3161ea768bf6c

[COMMIT MESSAGE]:Made the names for travel expense classes much shorter. More package …||…structure.
=========================================================

- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("(isAuthenticated() and @travelExpenseReportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/81342f4978a6b9f284f9233727a3161ea768bf6c

[COMMIT MESSAGE]:Made the names for travel expense classes much shorter. More package …||…structure.
=========================================================

- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("(isAuthenticated() and @travelExpenseReportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/2c865e168d558d1b07eb8c09bd0f06d9d3310c02

[COMMIT MESSAGE]:TRACKR-231 - Delete approved vacation request||Changed security requirements for deleting vacation requests, supervisors now can not delete their own requests anymore.
=========================================================

- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/9041b998f73843c2e2232fb456bee37c695a15b3

[COMMIT MESSAGE]:TRACKR-203 - Supervisors can create vacation requests for other emplo…||…yees

Now admin or owner is needed to create a vacation request.
=========================================================

- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/089f18681dd5d0b6e567f3267a70fe7cf7f30ed6

[COMMIT MESSAGE]:TRACKR-54 - Request vacation||
=========================================================

- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/f1b572837ad84f263dc405eda34e60017739f441

[COMMIT MESSAGE]:TRACKR-55 - Approve and reject vacation requests||Supervisor may not edit his own vacation requests.
=========================================================

- @PreAuthorize("hasRole('ROLE_SUPERVISOR')")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e95acdf019c27d69c989913538180d66ab6f45b5

[COMMIT MESSAGE]:TRACKR-54 - Request vacation||Added further vacation request tests and an event handler
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR')")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=20&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/81342f4978a6b9f284f9233727a3161ea768bf6c

[COMMIT MESSAGE]:Made the names for travel expense classes much shorter. More package …||…structure.
=========================================================

- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("(isAuthenticated() and @travelExpenseReportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/2b064dcb11054571b854b51e4232dab891e21829

[COMMIT MESSAGE]:TRACKR-174 - Track sick days||
=========================================================

+ @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/04e9d813a42a5879f5a44dc511fa39e6219de5e3

[COMMIT MESSAGE]:TRACKR-158 - Supervisors can approve their own vacation requests via …||…the API

Replaced @PostAuthorize with @PreAuthorize and based the service on vacation requests instead of ids.
Also implemented a generic way for new conversion services from string (id) to our entities.
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/82986570d3870c2e41eb27b0f2d8e9e50747f6ec

[COMMIT MESSAGE]:TRACKR-60 - Automatically approve vacation request||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/81342f4978a6b9f284f9233727a3161ea768bf6c

[COMMIT MESSAGE]:Made the names for travel expense classes much shorter. More package …||…structure.
=========================================================

- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("(isAuthenticated() and @travelExpenseReportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/c6320f4ab6055a01eed26977d147eec9fdc066f4

[COMMIT MESSAGE]:TRACKR-164 - Add vacation reporting||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/82986570d3870c2e41eb27b0f2d8e9e50747f6ec

[COMMIT MESSAGE]:TRACKR-60 - Automatically approve vacation request||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e8920459f383bda1a6dbd090edb26831981477e3

[COMMIT MESSAGE]:TRACKR-55 - Approve and reject vacation requests||Wrote tests for the repository find methods
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e95acdf019c27d69c989913538180d66ab6f45b5

[COMMIT MESSAGE]:TRACKR-54 - Request vacation||Added further vacation request tests and an event handler
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR')")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/3bb05a53c7987f840223ea83a25308ca478cd4aa

[COMMIT MESSAGE]:Added a string to employee converter.||
=========================================================

- @PreAuthorize("isAuthenticated() and #employeeId == principal.id")
+ @PreAuthorize("isAuthenticated() and #employee.id == principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/d306de90ace79a91f2d5366462e684fb4b94d85b

[COMMIT MESSAGE]:TRACKR-240 - Enable employees to download expense reports||Changed security expression
Added test
=========================================================

- @PreAuthorize("hasRole('ROLE_SUPERVISOR')")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/81342f4978a6b9f284f9233727a3161ea768bf6c

[COMMIT MESSAGE]:Made the names for travel expense classes much shorter. More package …||…structure.
=========================================================

- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("(isAuthenticated() and @travelExpenseReportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/encuestame/encuestame/commit/7776fac0192db2ad2443b00c1d83f878c63283d5

[COMMIT MESSAGE]:Separated mvc in 4 modules||Poll creation bug fixes
achieved i18n integration
=========================================================

+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_EDITOR')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_EDITOR')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/encuestame/encuestame/commit/26e1a5bc88673d3f9e762226ab0ed3d136dac5de

[COMMIT MESSAGE]:Added additional test TPController||
=========================================================

- @PreAuthorize("hasRole('ENCUESTAME_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/encuestame/encuestame/commit/7776fac0192db2ad2443b00c1d83f878c63283d5

[COMMIT MESSAGE]:Separated mvc in 4 modules||Poll creation bug fixes
achieved i18n integration
=========================================================

+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_EDITOR')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_EDITOR')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=21&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/encuestame/encuestame/commit/87ef9b3d9fa6adb2145bf9380d3c3485f0f73aeb

[COMMIT MESSAGE]:ENCUESTAME-518 Poll create view bug fixes||
=========================================================

+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/encuestame/encuestame/commit/7776fac0192db2ad2443b00c1d83f878c63283d5

[COMMIT MESSAGE]:Separated mvc in 4 modules||Poll creation bug fixes
achieved i18n integration
=========================================================

+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_EDITOR')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_EDITOR')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/felansu/Qr-BiblioKode-Ws/commit/9569b4e356f6cd24a9ec00cab880efb2d2bfe62f

[COMMIT MESSAGE]:-Atualizada versão do postgres||-Implementado diagrama ObjectAid
-Criada classe abstract Pessoa
-Criadas classes Funcionario, Aluno e Autor <--extendem Pessoa
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/uchicago-sg/shibboleth-mitreid-connect/commit/bdd7ab0bfcee7cd94c244e502e69d958a7f2e076

[COMMIT MESSAGE]:Initial commit.||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cdiepend/hh/commit/c6354357c2ba2d321246528c1236108ad986cf06

[COMMIT MESSAGE]:Inladen project||eerste load van het project
=========================================================

+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cdiepend/hh/commit/c6354357c2ba2d321246528c1236108ad986cf06

[COMMIT MESSAGE]:Inladen project||eerste load van het project
=========================================================

+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/silbermm/anchorotr/commit/66ef146e869093fdf4952d2570beb53d813f81ba

[COMMIT MESSAGE]:fixed menuitem query to orderby weight||
=========================================================

+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/silbermm/anchorotr/commit/38d5a1a7dda7d2c61caaa9eb49966977d4833b95

[COMMIT MESSAGE]:more fixes for the Mail settings||
=========================================================

+@PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/silbermm/anchorotr/commit/33bf010410013d5b2d1ab926a76dede9c3c2facf

[COMMIT MESSAGE]:Fixed bug when adding new item and item would show in multiple||catagories
Added editing menu item capability
Secured methods on backend
=========================================================

+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/silbermm/anchorotr/commit/33bf010410013d5b2d1ab926a76dede9c3c2facf

[COMMIT MESSAGE]:Fixed bug when adding new item and item would show in multiple||catagories
Added editing menu item capability
Secured methods on backend
=========================================================

+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/silbermm/anchorotr/commit/66ef146e869093fdf4952d2570beb53d813f81ba

[COMMIT MESSAGE]:fixed menuitem query to orderby weight||
=========================================================

+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/silbermm/anchorotr/commit/33bf010410013d5b2d1ab926a76dede9c3c2facf

[COMMIT MESSAGE]:Fixed bug when adding new item and item would show in multiple||catagories
Added editing menu item capability
Secured methods on backend
=========================================================

+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=22&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=23&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sophia2901/assignment1/commit/75395d27cbd4fdcd251a4d1acd17ceff97d6a1c4

[COMMIT MESSAGE]:validation and security check||
=========================================================

+////@PreAuthorize("hasRole('MODERATOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yoshutch/mybyu/commit/55f103f31f1162af4f634091975943eb57aedd63

[COMMIT MESSAGE]:UP-3515: Provide a new REST endpoint for permissions at /assignments/…||…{principalType}/{id}.json
=========================================================

+ @PreAuthorize("(#entityType == 'person' and #id == authentication.name) or hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yoshutch/mybyu/commit/0ecdf72b867c62e90ce3cb57860e216e571ab476

[COMMIT MESSAGE]:UP-3311 Fix package name for AuthorizableActivity||
=========================================================

- @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
- @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
- @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
- @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yoshutch/mybyu/commit/d0c37171d5da56d4b2681cfd56da45293771fc2b

[COMMIT MESSAGE]:UP-2950 Adding support and configuration for Spring Security annotati…||…on-based permission expressions under a pre-authentication setup. This commit also includes adding support for SpringMVC's ContentNegotiatingViewResolver.
=========================================================

+ @PreAuthorize("hasPermission('string', 'REST', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yoshutch/mybyu/commit/d0c37171d5da56d4b2681cfd56da45293771fc2b

[COMMIT MESSAGE]:UP-2950 Adding support and configuration for Spring Security annotati…||…on-based permission expressions under a pre-authentication setup. This commit also includes adding support for SpringMVC's ContentNegotiatingViewResolver.
=========================================================

+ @PreAuthorize("hasPermission('string', 'REST', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=24&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

