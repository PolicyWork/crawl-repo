
=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=67&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=68&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=69&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=70&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=71&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=72&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/8957db5ff2c0be81195416ca50a1323551ece6b0

[COMMIT MESSAGE]:object permission||
=========================================================

+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('groupAccess') and hasPermission(#group, 'groupAccess')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/d1c243c35e1f7d02a7efb06ad81f97d2e9a015c3

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/8957db5ff2c0be81195416ca50a1323551ece6b0

[COMMIT MESSAGE]:object permission||
=========================================================

+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('groupAccess') and hasPermission(#group, 'groupAccess')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/d1c243c35e1f7d02a7efb06ad81f97d2e9a015c3

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/8957db5ff2c0be81195416ca50a1323551ece6b0

[COMMIT MESSAGE]:object permission||
=========================================================

+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('groupAccess') and hasPermission(#group, 'groupAccess')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/d1c243c35e1f7d02a7efb06ad81f97d2e9a015c3

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/1966ee63632d7128fecd15880a8f208e42f60358

[COMMIT MESSAGE]:file system||
=========================================================

- @PreAuthorize("hasRole('groupAccess') and hasPermission(#group, 'groupAccess')")
+ @PreAuthorize("hasAnyRole('groupAccess', 'groupsManagement') and hasPermission(#group, 'groupAccess')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/8957db5ff2c0be81195416ca50a1323551ece6b0

[COMMIT MESSAGE]:object permission||
=========================================================

+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('groupAccess') and hasPermission(#group, 'groupAccess')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/d1c243c35e1f7d02a7efb06ad81f97d2e9a015c3

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=73&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/1966ee63632d7128fecd15880a8f208e42f60358

[COMMIT MESSAGE]:file system||
=========================================================

- @PreAuthorize("hasRole('groupAccess') and hasPermission(#group, 'groupAccess')")
+ @PreAuthorize("hasAnyRole('groupAccess', 'groupsManagement') and hasPermission(#group, 'groupAccess')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/8957db5ff2c0be81195416ca50a1323551ece6b0

[COMMIT MESSAGE]:object permission||
=========================================================

+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('groupAccess') and hasPermission(#group, 'groupAccess')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/d1c243c35e1f7d02a7efb06ad81f97d2e9a015c3

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/valdy89/stavebniStroje/commit/a8b5b9fea0f1dec433c8c9ec91d029e985c4e30b

[COMMIT MESSAGE]:Access privilegies corrected||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/valdy89/stavebniStroje/commit/a8b5b9fea0f1dec433c8c9ec91d029e985c4e30b

[COMMIT MESSAGE]:Access privilegies corrected||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/valdy89/stavebniStroje/commit/c2f755e6dd1e7d3fb7b2d29a2a978a5c31d1e77e

[COMMIT MESSAGE]:Authorization fix - rent methods||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN','ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN','ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN','ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN','ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN','ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN','ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN','ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/loki2302/spring-pizza-experiment/commit/07ca1b50d4aa0a48ae1fad5563c0c70c9dbdd2e1

[COMMIT MESSAGE]:Extracted TicketLockController||
=========================================================

- @PreAuthorize("@ticketSecurityService.canRead(#userId, #ticketId)")
+ @PreAuthorize("@ticketLockService.userCanReadTicket(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")
+ @PreAuthorize("@ticketLockService.userCanWriteTicket(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")
+ @PreAuthorize("@ticketLockService.userCanWriteTicket(#userId, #ticketId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/loki2302/spring-pizza-experiment/commit/fa61f1eb62844b9c86ef1b7534753f347126078e

[COMMIT MESSAGE]:More cleanup||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+@PreAuthorize("isAuthenticated()")
- @PreAuthorize("@ticketSecurityService.canRead(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canRead(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/loki2302/spring-pizza-experiment/commit/a539720145022fc141750d79bad20d8b1cecb901

[COMMIT MESSAGE]:Trying to apply spring security||
=========================================================

+ @PreAuthorize("@ticketSecurityService.canRead(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canWrite(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canWrite(#ticketId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/loki2302/spring-pizza-experiment/commit/fa61f1eb62844b9c86ef1b7534753f347126078e

[COMMIT MESSAGE]:More cleanup||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+@PreAuthorize("isAuthenticated()")
- @PreAuthorize("@ticketSecurityService.canRead(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canRead(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/loki2302/spring-pizza-experiment/commit/07ca1b50d4aa0a48ae1fad5563c0c70c9dbdd2e1

[COMMIT MESSAGE]:Extracted TicketLockController||
=========================================================

- @PreAuthorize("@ticketSecurityService.canRead(#userId, #ticketId)")
+ @PreAuthorize("@ticketLockService.userCanReadTicket(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")
+ @PreAuthorize("@ticketLockService.userCanWriteTicket(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")
+ @PreAuthorize("@ticketLockService.userCanWriteTicket(#userId, #ticketId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/loki2302/spring-pizza-experiment/commit/fa61f1eb62844b9c86ef1b7534753f347126078e

[COMMIT MESSAGE]:More cleanup||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+@PreAuthorize("isAuthenticated()")
- @PreAuthorize("@ticketSecurityService.canRead(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canRead(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/gsolecki/authserver/commit/67eb67b52e5420136544d34e94f02402d607ada1

[COMMIT MESSAGE]:Initializes a project||
=========================================================

+ @PreAuthorize("#oauth2.clientHasRole('ROLE_CLIENT')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=74&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/francarl/MonProvv/commit/b62eb676e8587da9394168bf09054f431d23e37f

[COMMIT MESSAGE]:Implementazione sicurezza||
=========================================================

+ //@PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#id, 'modifica')")
+ //@PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#id, 'modifica')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/francarl/MonProvv/commit/0a07573384e1de47294b2856bdf534f7023343ae

[COMMIT MESSAGE]:Gestione accesso notifiche da mail inviata||
=========================================================

+ @PreAuthorize("hasPermission(#id, 'accessoNotifica')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/francarl/MonProvv/commit/c720d8b71d8683ec15f25580a91be6b5297c8c91

[COMMIT MESSAGE]:fix varie dettaglio provvedimento||
=========================================================

+ //@PreAuthorize("hasPermission(#idAss, 'confermaAssegnazione')")
+ //@PreAuthorize("hasPermission(#idAss, 'confermaAssegnazione')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/francarl/MonProvv/commit/63e2d3c3b782a02416cd5d26e972543a2be2e3d2

[COMMIT MESSAGE]:Fix varie||
=========================================================

+ //@PreAuthorize("hasPermission(#idAss, 'confermaAssegnazione')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/francarl/MonProvv/commit/b62eb676e8587da9394168bf09054f431d23e37f

[COMMIT MESSAGE]:Implementazione sicurezza||
=========================================================

+ //@PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#id, 'modifica')")
+ //@PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#id, 'modifica')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/habuma/SpringREST/commit/528819bc4d74527164d0e32f4c3ade7a585939f6

[COMMIT MESSAGE]:Add SDR/OAuth example||
=========================================================

+ @PreAuthorize("#oauth2.hasScope('read')")
+ @PreAuthorize("#oauth2.hasScope('read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/habuma/SpringREST/commit/da0706b5675491b9d9f0224b78eddfe4c92d4e92

[COMMIT MESSAGE]:Initial commit||
=========================================================

+ @PreAuthorize("#oauth2.hasScope('read')")
+ @PreAuthorize("#oauth2.hasScope('write')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/boeboe/apress-springblog/commit/6eb12d32629c94c50ab4b6fafe7a084fef7e0767

[COMMIT MESSAGE]:Added springblog code||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/MichaelWMerritt/TheAcreage_v2/commit/8e31833efaeff266ddcd683c35643bf19a79e310

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/MichaelWMerritt/TheAcreage_v2/commit/8e31833efaeff266ddcd683c35643bf19a79e310

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=75&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/MichaelWMerritt/TheAcreage_v2/commit/8e31833efaeff266ddcd683c35643bf19a79e310

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/OSCTeam/WebServer/commit/ed15f7aea8406e5276b9b386d35096b5af02714b

[COMMIT MESSAGE]:2014.11.30 in home // 입력 할때 vailidation 구성 // 사용자 정의 vaildator 작성 현재||여러개의 vaildation이 작동함. 기본적으로 style-'color' css에서 하는 vaildation 또는
bootstrap에서 하는 vaildation 등등.. jQuery validation을 통해서 하는 부분과 서버측 과
클라이언트에서 하는 vaildation ==> 종합적으로 정리해서 구성을 다시 해야할 필요가 있음.        38-41 번
video 까지. // 이외에 버튼 border round 와 tab에서 border round 그리고 입력 필드에서 도...
border round 설정 확인 필요.
=========================================================

+ @PreAuthorize("#blog.user.email == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/JonJon240/CustomerSupport/commit/5a7bce54ce7d9a9020d10bf117a9c3b072f00f12

[COMMIT MESSAGE]:Setup a working Project Structure. Basic Login Authentication and Signup||features exist.
=========================================================

+ @PreAuthorize("hasAuthority('VIEW_TICKETS')")
+ @PreAuthorize("hasAuthority('VIEW_TICKETS')")
+ @PreAuthorize("hasAuthority('VIEW_TICKET')")
+ @PreAuthorize("#ticket.id == 0 and hasAuthority('CREATE_TICKET')")
+ @PreAuthorize("(authentication.principal.equals(#ticket.customer) and " +
+ @PreAuthorize("hasAuthority('DELETE_TICKET')")
+ @PreAuthorize("hasAuthority('VIEW_COMMENTS')")
+ @PreAuthorize("#comment.id == 0 and hasAuthority('CREATE_COMMENT')")
+ @PreAuthorize("(authentication.principal.equals(#comment.customer) and " +
+ @PreAuthorize("hasAuthority('DELETE_COMMENT')")
+ @PreAuthorize("hasAuthority('VIEW_ATTACHMENT')")
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#message.user) and " +
+ @PreAuthorize("hasAuthority('VIEW_CHAT_REQUESTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/JonJon240/CustomerSupport/commit/5a7bce54ce7d9a9020d10bf117a9c3b072f00f12

[COMMIT MESSAGE]:Setup a working Project Structure. Basic Login Authentication and Signup||features exist.
=========================================================

+ @PreAuthorize("hasAuthority('VIEW_TICKETS')")
+ @PreAuthorize("hasAuthority('VIEW_TICKETS')")
+ @PreAuthorize("hasAuthority('VIEW_TICKET')")
+ @PreAuthorize("#ticket.id == 0 and hasAuthority('CREATE_TICKET')")
+ @PreAuthorize("(authentication.principal.equals(#ticket.customer) and " +
+ @PreAuthorize("hasAuthority('DELETE_TICKET')")
+ @PreAuthorize("hasAuthority('VIEW_COMMENTS')")
+ @PreAuthorize("#comment.id == 0 and hasAuthority('CREATE_COMMENT')")
+ @PreAuthorize("(authentication.principal.equals(#comment.customer) and " +
+ @PreAuthorize("hasAuthority('DELETE_COMMENT')")
+ @PreAuthorize("hasAuthority('VIEW_ATTACHMENT')")
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#message.user) and " +
+ @PreAuthorize("hasAuthority('VIEW_CHAT_REQUESTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/matejkv1/MusicLibraryPA165/commit/4d2bc5a2d6317b544e8f7af30b2d12267ef90662

[COMMIT MESSAGE]:Service authentication and authorization added. REST is working too.||
=========================================================

+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/matejkv1/MusicLibraryPA165/commit/4d2bc5a2d6317b544e8f7af30b2d12267ef90662

[COMMIT MESSAGE]:Service authentication and authorization added. REST is working too.||
=========================================================

+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/matejkv1/MusicLibraryPA165/commit/4d2bc5a2d6317b544e8f7af30b2d12267ef90662

[COMMIT MESSAGE]:Service authentication and authorization added. REST is working too.||
=========================================================

+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/matejkv1/MusicLibraryPA165/commit/4d2bc5a2d6317b544e8f7af30b2d12267ef90662

[COMMIT MESSAGE]:Service authentication and authorization added. REST is working too.||
=========================================================

+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/matejkv1/MusicLibraryPA165/commit/4d2bc5a2d6317b544e8f7af30b2d12267ef90662

[COMMIT MESSAGE]:Service authentication and authorization added. REST is working too.||
=========================================================

+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=76&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/linian365boy/lanyuan/commit/3bdc87c0940c3bba8f635790f1782aa3e3affa98

[COMMIT MESSAGE]:456||
=========================================================

+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/linian365boy/lanyuan/commit/3bdc87c0940c3bba8f635790f1782aa3e3affa98

[COMMIT MESSAGE]:456||
=========================================================

+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/gauravbrills/springtdd/commit/7e8812d45f08db8889b860a164501d7b4f2d3c8f

[COMMIT MESSAGE]:updated||
=========================================================

+ @PreAuthorize("authenticated")

=========================================================
[CODE-CHANGE-URL]:https://github.com/gauravbrills/springtdd/commit/bde3633d8ff3fbe63e723c7e7dae45dc0f8b1d67

[COMMIT MESSAGE]:secured http BASic||
=========================================================

- @PreAuthorize("authenticated")

=========================================================
[CODE-CHANGE-URL]:https://github.com/gauravbrills/springtdd/commit/cfa8073973a09f1fd4344d8032570d60a5f13a89

[COMMIT MESSAGE]:Method level security demo||
=========================================================

+ @PreAuthorize("authenticated")

=========================================================
[CODE-CHANGE-URL]:https://github.com/ese-unibe-ch/ese2014-team3/commit/6e6b2b9765b1bffcbb8151acb6874d11ba3ebd12

[COMMIT MESSAGE]:display of first picture in ad overview implemented||
=========================================================

- @PreAuthorize("#ad.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/ese-unibe-ch/ese2014-team3/commit/8120c3311dabe588d93639006823da0f4820eb0e

[COMMIT MESSAGE]:room4you skeleton with basic functionality for registration, login, ad||overview and placing new ads
=========================================================

+ @PreAuthorize("#ad.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/java8ee/web-app-skeleton/commit/59345d4d9b1e15d076df692c5d0948fc511ee4b2

[COMMIT MESSAGE]:Remove user functionality on user-list page||
=========================================================

- @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/java8ee/web-app-skeleton/commit/367305da9da53199e7befb70b13feac20fb8f403

[COMMIT MESSAGE]:Add user list and secure for register method with annotation||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/peterarsentev/Spring-Security-Acl-MongoDB/commit/18b8fc5fb4300c9fee927488a7bfe8c5c5ed5c8a

[COMMIT MESSAGE]:added the login page, client page, create client dialog||
=========================================================

+ @PreAuthorize("hasPermission(#t, 'create')")
+ @PreAuthorize("hasPermission(#t, 'update')")
+ @PreAuthorize("hasPermission(#t, 'delete')")
- @PreAuthorize("hasPermission(#pet, 'create')")
- @PreAuthorize("hasPermission(#pet, 'update')")
- @PreAuthorize("hasPermission(#pet, 'delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/junsmooth/wujinsuo/commit/b1db714c2313b93cc5c6805d579990589cb2a2a6

[COMMIT MESSAGE]:Allow @EnableGlobalMethodSecurity in a non webapp||Fixes gh-202
=========================================================

+ @PreAuthorize("true")
+ @PreAuthorize("false")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sugarlisu/sp_security/commit/ebd0d0aabc000ebb9aae3797ec2f4bdc041db5a9

[COMMIT MESSAGE]:spring_secuirty||
=========================================================

+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/sugarlisu/sp_security/commit/ebd0d0aabc000ebb9aae3797ec2f4bdc041db5a9

[COMMIT MESSAGE]:spring_secuirty||
=========================================================

+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=77&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/sugarlisu/sp_security/commit/ebd0d0aabc000ebb9aae3797ec2f4bdc041db5a9

[COMMIT MESSAGE]:spring_secuirty||
=========================================================

+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/nhidy/prospring3/commit/88df6b2936d6791509d264ac5f35c3b6533d13c0

[COMMIT MESSAGE]:No commit message||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/nhidy/prospring3/commit/bac8a0a60445f195d8e646eee6469ed6b287db6c

[COMMIT MESSAGE]:Version 1.0_2014/09/11||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/nhidy/prospring3/commit/e7fad650a21ce692f79d06ee9ad4521c1bdb3ad5

[COMMIT MESSAGE]:No commit message||
=========================================================

+ /* @PreAuthorize("isAuthenticated()") */

=========================================================
[CODE-CHANGE-URL]:https://github.com/aksndr/Asgn2-VideoLike/commit/42cbb98c4a5563a3cd25114d6a1c95ce3aaaab1f

[COMMIT MESSAGE]:complete||
=========================================================

+ @PreAuthorize("hasRole(user)")
+ @PreAuthorize("hasRole(user)")
+ @PreAuthorize("hasRole(user)")
+ @PreAuthorize("hasRole(user)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/aksndr/Asgn2-VideoLike/commit/172874ea56abf9d77f22a0960136d4805d4074e4

[COMMIT MESSAGE]:made first 4 tests||
=========================================================

+ @PreAuthorize("hasRole(user)")
+ @PreAuthorize("hasRole(user)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/OlegPahhomov/java-blog/commit/1ac4e8c4222f924124d26ab4e03dd4cdd4cee685

[COMMIT MESSAGE]:trying again||
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/partharamanujam/spring-rest/commit/95b062777e2dc4f9f895a7633892e0b98bb982df

[COMMIT MESSAGE]:added RBAC||
=========================================================

+ @PreAuthorize("hasRole('CREATE')")
+ @PreAuthorize("hasRole('READ')")
+ @PreAuthorize("hasRole('UPDATE')")
+ @PreAuthorize("hasRole('DELETE')")
+ @PreAuthorize("hasRole('PERMS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/blacknight1982/IDCloud/commit/6bd052b653231c302be51f8a188e65296759e86a

[COMMIT MESSAGE]:Items: 3, 6, 0, 5, 9, 2 …||0. Better UI, clean the project - following
0.1 Clean up the CSS file - following
1. Website published to http://idcloud.iego.net/
1.1 Synchronize Database - script on the dropbox
1.2 Check out the code on laptop - has problem
2. Social integration - fb integrated, twitter needs to be checked
3. Inspiration title and location seperation - not started
4. Image upload through nicEditor is 3rd party Web - done with self
developed image upload service - almost done
5. User sign up email sending  - Not Started
5.1 User sign up anti-robot protection - Not Started
6. Publish file upload - Not Started
7. Spring REST/oDATA - half way
8. WebSocket/HTTP Streaming for realtime communication -done!
9. Server side Cache enabling - Not Started
10. Apache access control - Done

New: REST service, image upload service, CORS filter, Add inspiration
authorizations, added inspiration briefing, added access log, fixed tag
bug

Signed-off-by: John Liu <blacknight1982@gmail.com>
=========================================================

- @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/blacknight1982/IDCloud/commit/4a1462f9ccc49294075f54613a3b4a143c83b9ed

[COMMIT MESSAGE]:Switched the online HTML editor from CKEditor to nicEditor||Implemented direct link to single inspiration
Better UI
Method level security implemented

Next Steps:
(Need consider again)
1. Publish the website
1.1 Synchronize Database
2. Social integration
3. iFrame/embed problem
3.1. iPAD scrolling doesn't work
4. Image upload through nicEditor is 3rd party Web
5. User sign up email sending
6.1 User sign up anti-robot protection
7. Study Spring REST/oDATA)
8. Enable scrolling framework only for inspiration table page, not
other page
9. Need a save button for publish inspiration
10. Cache enabling

Signed-off-by: John Liu <blacknight1982@gmail.com>
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zyw/autho/commit/cc863b60c362368503a860c877a203c96a63b986

[COMMIT MESSAGE]:初始化||
=========================================================

+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=78&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/zyw/autho/commit/cc863b60c362368503a860c877a203c96a63b986

[COMMIT MESSAGE]:初始化||
=========================================================

+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=79&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/alyahmed/Customer-Support-Application/commit/5a7bce54ce7d9a9020d10bf117a9c3b072f00f12

[COMMIT MESSAGE]:Setup a working Project Structure. Basic Login Authentication and Signup||features exist.
=========================================================

+ @PreAuthorize("hasAuthority('VIEW_TICKETS')")
+ @PreAuthorize("hasAuthority('VIEW_TICKETS')")
+ @PreAuthorize("hasAuthority('VIEW_TICKET')")
+ @PreAuthorize("#ticket.id == 0 and hasAuthority('CREATE_TICKET')")
+ @PreAuthorize("(authentication.principal.equals(#ticket.customer) and " +
+ @PreAuthorize("hasAuthority('DELETE_TICKET')")
+ @PreAuthorize("hasAuthority('VIEW_COMMENTS')")
+ @PreAuthorize("#comment.id == 0 and hasAuthority('CREATE_COMMENT')")
+ @PreAuthorize("(authentication.principal.equals(#comment.customer) and " +
+ @PreAuthorize("hasAuthority('DELETE_COMMENT')")
+ @PreAuthorize("hasAuthority('VIEW_ATTACHMENT')")
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#message.user) and " +
+ @PreAuthorize("hasAuthority('VIEW_CHAT_REQUESTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/alyahmed/Customer-Support-Application/commit/5a7bce54ce7d9a9020d10bf117a9c3b072f00f12

[COMMIT MESSAGE]:Setup a working Project Structure. Basic Login Authentication and Signup||features exist.
=========================================================

+ @PreAuthorize("hasAuthority('VIEW_TICKETS')")
+ @PreAuthorize("hasAuthority('VIEW_TICKETS')")
+ @PreAuthorize("hasAuthority('VIEW_TICKET')")
+ @PreAuthorize("#ticket.id == 0 and hasAuthority('CREATE_TICKET')")
+ @PreAuthorize("(authentication.principal.equals(#ticket.customer) and " +
+ @PreAuthorize("hasAuthority('DELETE_TICKET')")
+ @PreAuthorize("hasAuthority('VIEW_COMMENTS')")
+ @PreAuthorize("#comment.id == 0 and hasAuthority('CREATE_COMMENT')")
+ @PreAuthorize("(authentication.principal.equals(#comment.customer) and " +
+ @PreAuthorize("hasAuthority('DELETE_COMMENT')")
+ @PreAuthorize("hasAuthority('VIEW_ATTACHMENT')")
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#message.user) and " +
+ @PreAuthorize("hasAuthority('VIEW_CHAT_REQUESTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/andreas-schilling/spring-boot-thymeleaf-test/commit/ecab6bbef3c81a7ee6711cc966725674945cce5c

[COMMIT MESSAGE]:Initial commit.||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/wikibook/beginning-spring-4/commit/0eb2aae35620c3aa6295d50110ae622e0d1a7917

[COMMIT MESSAGE]:<시작하세요! 스프링 4 프로그래밍> 예제 코드||
=========================================================

+ @PreAuthorize("hasRole('ROLE_CUSTOMER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_CUSTOMER')")
+ @PreAuthorize("hasPermission(#fixedDepositId, 'sample.spring.chapter14.domain.FixedDepositDetails', read) or "
+ @PreAuthorize("hasPermission(#fixedDepositId, 'sample.spring.chapter14.domain.FixedDepositDetails', delete)")
+ @PreAuthorize("hasPermission(#fixedDepositDetails, write)")
+ @PreAuthorize("hasPermission(#fixedDepositId, 'sample.spring.chapter14.domain.FixedDepositDetails', write)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/markoradinovic/Vaadin4Spring-MVP-Sample-SpringSecurity/commit/d2d6f5eefa7c4276c4eb876a888554aa424ebc56

[COMMIT MESSAGE]:Initial import||
=========================================================

+@PreAuthorize("isFullyAuthenticated()") //do not allow Remember-Me

=========================================================
[CODE-CHANGE-URL]:https://github.com/Phaiwan/JavaCreate/commit/82f5c80dcda47f17858340c92b175dbb6e928f1e

[COMMIT MESSAGE]:java-blogs||
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/aelingold/sgsp-core/commit/b7dd764298bb313a55c505c2d2d51b431308e3e4

[COMMIT MESSAGE]:deshabitar usuarios, pagina error||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=80&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/aelingold/sgsp-core/commit/f685b5c84a47781610ef94a20d16dcbb949de542

[COMMIT MESSAGE]:resuelto pantalla baja usuarios||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/6e2e6c170c2705101929fee3a112c40b3673baee

[COMMIT MESSAGE]:- added roles/permissions||- added PreAuthorize to the service methods
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_USERROLE')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/psychic0111/eht_project/commit/f9bbbea6c6f9e8cb24d8dec1344345234089f101

[COMMIT MESSAGE]:first import||
=========================================================

+ @PreAuthorize("#oauth2.clientHasRole('ROLE_CLIENT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jackmew/spring-boot-security/commit/6ceffe8b9b826a52ed8e0dd097016482e1237b91

[COMMIT MESSAGE]:Method Security with Permission||
=========================================================

-@PreAuthorize("hasRole('ROLE_ADMIN')")
+//@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_LIST_GET')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_ADD_POST')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_EDIT_GET')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_EDIT_POST')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_DELETE_GET')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jackmew/spring-boot-security/commit/a637076ad1117662dbca26e1931dc39ac20f8b1f

[COMMIT MESSAGE]:add method level role based security to the controller||
=========================================================

+@PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/st-tu-dresden/videoshop/commit/f4b93519dd9d9fa29d397f6b8c18ecc3c38eb986

[COMMIT MESSAGE]:#1 - Extracted VideoShop example from Salespoint repository.||
=========================================================

+@PreAuthorize("hasRole('ROLE_CUSTOMER')")
+@PreAuthorize("hasRole('ROLE_BOSS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/st-tu-dresden/videoshop/commit/53226cc7e7e5654f94d3178433c334e798cbda15

[COMMIT MESSAGE]:#23 - Improve CartController to use new Cart API.||CartController now introduces the new Cart API about to be released with Salespoint 6.0 GA. We also moved to the Spring MVC way of working with the session. The cart.html template now also uses the price attribute of the object instance.

We now also generally allow authenticated users to use the CartController. Previously, other authenticated roles except ROLE_CUSTOMER (e.g. the boss user) had been denied access to it.

Related pull request: #24.
=========================================================

-@PreAuthorize("hasRole('ROLE_CUSTOMER')")
+@PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/st-tu-dresden/videoshop/commit/c1b36f3b9a29fcf32d3abf1dd880f978fa9ea0c0

[COMMIT MESSAGE]:#16 - Upgrade to Salespoint snapshots and switch from Basket to Cart.||
=========================================================

-@PreAuthorize("hasRole('ROLE_CUSTOMER')")
+@PreAuthorize("hasRole('ROLE_CUSTOMER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/3b8eb1e9f838584a115731658050d191444cc91e

[COMMIT MESSAGE]:Added API to restrict the retrieval of player based on whether a play…||…er had previously been selected for that team.
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/74680a26d419108677269e4271b3d494e8c48fd6

[COMMIT MESSAGE]:Added method to retrieve players by position and the fact that they a…||…re available.
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/5c7de407c2f8c034a8b08f4829f0e9b6d6cf269d

[COMMIT MESSAGE]:Secured get players by position endpoint.||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/0a2b3876c82afe56cd1bd9374e01c69b94b45ac2

[COMMIT MESSAGE]:Added Spring security for securing REST APIs.||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/3a9258d73cd0b45621d106e3cc53b0fd02f151c3

[COMMIT MESSAGE]:Changes for getting league table.||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/c9698235144f9472d68329ac0583fd4f2159e960

[COMMIT MESSAGE]:Changes for providing team summaries for all teams in a league.||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/1ca3e0c87b83a3bd3e6710d392643671cc85c025

[COMMIT MESSAGE]:Changes for team summary UI integration.||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/be05831d19c98733b3e548931066b8fbd560f3c2

[COMMIT MESSAGE]:Removed authorisation on start draft round endpoint.||
=========================================================

- @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/1c1364fbd6311b56636e111312f11bbb1011b326

[COMMIT MESSAGE]:Added API method for starting a draft round.||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/a125690c3e5b42d52f63ab2bd106beb7393325bd

[COMMIT MESSAGE]:Added draft round controller with functionality to submit bids.||
=========================================================

+ @PreAuthorize("isAuthenticated()")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=81&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/1ca3e0c87b83a3bd3e6710d392643671cc85c025

[COMMIT MESSAGE]:Changes for team summary UI integration.||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/alexander-komlik/library-training-project/commit/2ed20f3fe6aa4d939107ab80fcd3476113d8ed36

[COMMIT MESSAGE]:commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isAuthorOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isAuthorOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ANONYMOUS')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/alexander-komlik/library-training-project/commit/2ed20f3fe6aa4d939107ab80fcd3476113d8ed36

[COMMIT MESSAGE]:commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isAuthorOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isAuthorOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ANONYMOUS')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/alexander-komlik/library-training-project/commit/2ed20f3fe6aa4d939107ab80fcd3476113d8ed36

[COMMIT MESSAGE]:commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isAuthorOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isAuthorOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ANONYMOUS')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/IrinaMakarushko/testingGit/commit/7724348f54313eb9dc097c40a8f9e1db91317bf0

[COMMIT MESSAGE]:First commit||
=========================================================

+@PreAuthorize("hasAnyRole('USER', 'ADMIN')")
+@PreAuthorize("hasAnyRole('USER', 'ADMIN')")
+@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/IrinaMakarushko/testingGit/commit/7724348f54313eb9dc097c40a8f9e1db91317bf0

[COMMIT MESSAGE]:First commit||
=========================================================

+@PreAuthorize("hasAnyRole('USER', 'ADMIN')")
+@PreAuthorize("hasAnyRole('USER', 'ADMIN')")
+@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/IrinaMakarushko/testingGit/commit/7724348f54313eb9dc097c40a8f9e1db91317bf0

[COMMIT MESSAGE]:First commit||
=========================================================

+@PreAuthorize("hasAnyRole('USER', 'ADMIN')")
+@PreAuthorize("hasAnyRole('USER', 'ADMIN')")
+@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/57be6eac04f92372d9c1b886816967db87fe1547

[COMMIT MESSAGE]:TRACKR-201 - Contact persons links are updateable/deletable with no s…||…ecurity

Secured the links, company is now updateable by supervisors and not deletable.
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR')")
+ @PreAuthorize("denyAll()")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=82&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/d61f2a7574deb346d7b60cbd293cc546e126c269

[COMMIT MESSAGE]:TRACKR-163 - Add revenue reporting||Modified the data to be more interesting
Added a date converter for milliseconds
Added function to find all invoices between to dates
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/d526285eeb45c2b583e3d116f481fcff2956d9c1

[COMMIT MESSAGE]:TRACKR-104 - Search for an invoice by identifier||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/c8d371fd90e0a07c46a1bb66fb7e4134f3beb9fd

[COMMIT MESSAGE]:TRACKR-106 - List all invoices||Added security for GET methods.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/4257681a13b9ead6715a84e97caefcb776417390

[COMMIT MESSAGE]:TRACKR-101 - Add invoice||Added all base classes and basic tests for invoices.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/f22a0134a35ff84fdbc4c91764330a6791a9118d

[COMMIT MESSAGE]:TRACKR-200 - Calculate due date for invoice||Calculated due date from timeForPayment when a new invoice is created via the rest service.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/42868079b8e9550a249caebd69abea6ee19a5ccb

[COMMIT MESSAGE]:TRACKR-103 - Delete an existing invoice||Invocies are now deletable.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/4257681a13b9ead6715a84e97caefcb776417390

[COMMIT MESSAGE]:TRACKR-101 - Add invoice||Added all base classes and basic tests for invoices.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/c6320f4ab6055a01eed26977d147eec9fdc066f4

[COMMIT MESSAGE]:TRACKR-164 - Add vacation reporting||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/04e9d813a42a5879f5a44dc511fa39e6219de5e3

[COMMIT MESSAGE]:TRACKR-158 - Supervisors can approve their own vacation requests via …||…the API

Replaced @PostAuthorize with @PreAuthorize and based the service on vacation requests instead of ids.
Also implemented a generic way for new conversion services from string (id) to our entities.
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/0029f4302eb1c762e4e17da4482158dedb2c3f62

[COMMIT MESSAGE]:TRACKR-55 - Approve and reject vacation requests||Added reject web method for vacation requests.
Added new status field to the frontend
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/36280f38f228136a375f3d0ca984cf74de7d8936

[COMMIT MESSAGE]:TRACKR-55 - Approve and reject vacation requests||Separated web and other beans configurations for the API
Wrote a vacation request service
Wrote a vacation request controller
+ Tests
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/cf84a9e732d66d4fc0b51afcb4164c87fd81de3f

[COMMIT MESSAGE]:TRACKR-105 - Mark invoice as paid||Invoices can now be marked as paid.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e0c9ab7ed6615e9a60cd2c88a6806274ccf8c3d3

[COMMIT MESSAGE]:TRACKR-123 - Implement address book||Added an address book controller.
=========================================================

+ @PreAuthorize("hasRole('ROLE_EMPLOYEE')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=83&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/semicolok/spring-java-cofig-example/commit/bc3463ee5e118d15278f5493d54a0dcb43e8b65a

[COMMIT MESSAGE]:create repository||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')") // @EnableGlovalMethodSecurity

=========================================================
[CODE-CHANGE-URL]:https://github.com/astarring/cdc-activity/commit/747f15c51f28a125f26ea0136500c91cd2ea1435

[COMMIT MESSAGE]:init||
=========================================================

+ // @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/0d8bcf3c8fbf9bf04678074d8ad00ad770ecaff8

[COMMIT MESSAGE]:list page||
=========================================================

+ @PreAuthorize("hasRole('user.list')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/e52bfe62782b98b078cc380888e04e6572ed44b0

[COMMIT MESSAGE]:clean up code and db||
=========================================================

- @PreAuthorize("(hasRole('advise.update') and #dto.id != null) or (hasRole('advise.add') and #dto.id == null)")
- @PreAuthorize("hasRole('advise.delete')")
- @PreAuthorize("hasRole('advise.list')")
- @PreAuthorize("(hasRole('adviseReply.update') and #dto.id != null) or (hasRole('adviseReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('adviseReply.delete')")
- @PreAuthorize("hasRole('adviseReply.list')")
- @PreAuthorize("(hasRole('article.update') and #dto.id != null) or (hasRole('article.add') and #dto.id == null)")
- @PreAuthorize("hasRole('article.delete')")
- @PreAuthorize("hasRole('article.list')")
- @PreAuthorize("(hasRole('building.update') and #dto.id != null) or (hasRole('building.add') and #dto.id == null)")
- @PreAuthorize("hasRole('building.delete')")
- @PreAuthorize("hasRole('building.list')")
- @PreAuthorize("(hasRole('category.update') and #dto.id != null) or (hasRole('category.add') and #dto.id == null)")
- @PreAuthorize("hasRole('category.delete')")
- @PreAuthorize("hasRole('category.list')")
- @PreAuthorize("(hasRole('communityAddApply.update') and #dto.id != null) or (hasRole('communityAddApply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('communityAddApply.delete')")
- @PreAuthorize("hasRole('communityAddApply.list')")
- @PreAuthorize("(hasRole('community.update') and #dto.id != null) or (hasRole('community.add') and #dto.id == null)")
- @PreAuthorize("hasRole('community.delete')")
- @PreAuthorize("hasRole('community.list')")
- @PreAuthorize("(hasRole('convenience.update') and #dto.id != null) or (hasRole('convenience.add') and #dto.id == null)")
- @PreAuthorize("hasRole('convenience.delete')")
- @PreAuthorize("hasRole('convenience.list')")
- @PreAuthorize("(hasRole('doorplate.update') and #dto.id != null) or (hasRole('doorplate.add') and #dto.id == null)")
- @PreAuthorize("hasRole('doorplate.delete')")
- @PreAuthorize("hasRole('doorplate.list')")
- @PreAuthorize("(hasRole('feeItem.update') and #dto.id != null) or (hasRole('feeItem.add') and #dto.id == null)")
- @PreAuthorize("hasRole('feeItem.delete')")
- @PreAuthorize("hasRole('feeItem.list')")
- @PreAuthorize("(hasRole('houseKeeping.update') and #dto.id != null) or (hasRole('houseKeeping.add') and #dto.id == null)")
- @PreAuthorize("hasRole('houseKeeping.delete')")
- @PreAuthorize("hasRole('houseKeeping.list')")
- @PreAuthorize("(hasRole('keyword.update') and #dto.id != null) or (hasRole('keyword.add') and #dto.id == null)")
- @PreAuthorize("hasRole('keyword.delete')")
- @PreAuthorize("hasRole('keyword.list')")
- @PreAuthorize("(hasRole('nature.update') and #dto.id != null) or (hasRole('nature.add') and #dto.id == null)")
- @PreAuthorize("hasRole('nature.delete')")
- @PreAuthorize("hasRole('nature.list')")
- @PreAuthorize("(hasRole('noticeReply.update') and #dto.id != null) or (hasRole('noticeReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('noticeReply.delete')")
- @PreAuthorize("hasRole('noticeReply.list')")
- @PreAuthorize("(hasRole('order.update') and #dto.id != null) or (hasRole('order.add') and #dto.id == null)")
- @PreAuthorize("hasRole('order.delete')")
- @PreAuthorize("hasRole('order.list')")
- @PreAuthorize("(hasRole('orderItem.update') and #dto.id != null) or (hasRole('orderItem.add') and #dto.id == null)")
- @PreAuthorize("hasRole('orderItem.delete')")
- @PreAuthorize("hasRole('orderItem.list')")
- @PreAuthorize("(hasRole('payRecord.update') and #dto.id != null) or (hasRole('payRecord.add') and #dto.id == null)")
- @PreAuthorize("hasRole('payRecord.delete')")
- @PreAuthorize("hasRole('payRecord.list')")
- @PreAuthorize("(hasRole('product.update') and #dto.id != null) or (hasRole('product.add') and #dto.id == null)")
- @PreAuthorize("hasRole('product.delete')")
- @PreAuthorize("hasRole('product.list')")
- @PreAuthorize("(hasRole('question.update') and #dto.id != null) or (hasRole('question.add') and #dto.id == null)")
- @PreAuthorize("hasRole('question.delete')")
- @PreAuthorize("hasRole('question.list')")
- @PreAuthorize("(hasRole('questionReply.update') and #dto.id != null) or (hasRole('questionReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('questionReply.delete')")
- @PreAuthorize("hasRole('questionReply.list')")
- @PreAuthorize("(hasRole('repair.update') and #dto.id != null) or (hasRole('repair.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repair.delete')")
- @PreAuthorize("hasRole('repair.list')")
- @PreAuthorize("(hasRole('repairHistory.update') and #dto.id != null) or (hasRole('repairHistory.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repairHistory.delete')")
- @PreAuthorize("hasRole('repairHistory.list')")
- @PreAuthorize("(hasRole('repairReply.update') and #dto.id != null) or (hasRole('repairReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repairReply.delete')")
- @PreAuthorize("hasRole('repairReply.list')")
- @PreAuthorize("(hasRole('reply.update') and #dto.id != null) or (hasRole('reply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('reply.delete')")
- @PreAuthorize("hasRole('reply.list')")
- @PreAuthorize("(hasRole('serviceType.update') and #dto.id != null) or (hasRole('serviceType.add') and #dto.id == null)")
- @PreAuthorize("hasRole('serviceType.delete')")
- @PreAuthorize("hasRole('serviceType.list')")
- @PreAuthorize("(hasRole('store.update') and #dto.id != null) or (hasRole('store.add') and #dto.id == null)")
- @PreAuthorize("hasRole('store.delete')")
- @PreAuthorize("hasRole('store.list')")
- @PreAuthorize("(hasRole('systemMessage.update') and #dto.id != null) or (hasRole('systemMessage.add') and #dto.id == null)")
- @PreAuthorize("hasRole('systemMessage.delete')")
- @PreAuthorize("hasRole('systemMessage.list')")
- @PreAuthorize("(hasRole('topic.update') and #dto.id != null) or (hasRole('topic.add') and #dto.id == null)")
- @PreAuthorize("hasRole('topic.delete')")
- @PreAuthorize("hasRole('topic.list')")
- @PreAuthorize("(hasRole('topicReply.update') and #dto.id != null) or (hasRole('topicReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('topicReply.delete')")
- @PreAuthorize("hasRole('topicReply.list')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/e52bfe62782b98b078cc380888e04e6572ed44b0

[COMMIT MESSAGE]:clean up code and db||
=========================================================

- @PreAuthorize("(hasRole('advise.update') and #dto.id != null) or (hasRole('advise.add') and #dto.id == null)")
- @PreAuthorize("hasRole('advise.delete')")
- @PreAuthorize("hasRole('advise.list')")
- @PreAuthorize("(hasRole('adviseReply.update') and #dto.id != null) or (hasRole('adviseReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('adviseReply.delete')")
- @PreAuthorize("hasRole('adviseReply.list')")
- @PreAuthorize("(hasRole('article.update') and #dto.id != null) or (hasRole('article.add') and #dto.id == null)")
- @PreAuthorize("hasRole('article.delete')")
- @PreAuthorize("hasRole('article.list')")
- @PreAuthorize("(hasRole('building.update') and #dto.id != null) or (hasRole('building.add') and #dto.id == null)")
- @PreAuthorize("hasRole('building.delete')")
- @PreAuthorize("hasRole('building.list')")
- @PreAuthorize("(hasRole('category.update') and #dto.id != null) or (hasRole('category.add') and #dto.id == null)")
- @PreAuthorize("hasRole('category.delete')")
- @PreAuthorize("hasRole('category.list')")
- @PreAuthorize("(hasRole('communityAddApply.update') and #dto.id != null) or (hasRole('communityAddApply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('communityAddApply.delete')")
- @PreAuthorize("hasRole('communityAddApply.list')")
- @PreAuthorize("(hasRole('community.update') and #dto.id != null) or (hasRole('community.add') and #dto.id == null)")
- @PreAuthorize("hasRole('community.delete')")
- @PreAuthorize("hasRole('community.list')")
- @PreAuthorize("(hasRole('convenience.update') and #dto.id != null) or (hasRole('convenience.add') and #dto.id == null)")
- @PreAuthorize("hasRole('convenience.delete')")
- @PreAuthorize("hasRole('convenience.list')")
- @PreAuthorize("(hasRole('doorplate.update') and #dto.id != null) or (hasRole('doorplate.add') and #dto.id == null)")
- @PreAuthorize("hasRole('doorplate.delete')")
- @PreAuthorize("hasRole('doorplate.list')")
- @PreAuthorize("(hasRole('feeItem.update') and #dto.id != null) or (hasRole('feeItem.add') and #dto.id == null)")
- @PreAuthorize("hasRole('feeItem.delete')")
- @PreAuthorize("hasRole('feeItem.list')")
- @PreAuthorize("(hasRole('houseKeeping.update') and #dto.id != null) or (hasRole('houseKeeping.add') and #dto.id == null)")
- @PreAuthorize("hasRole('houseKeeping.delete')")
- @PreAuthorize("hasRole('houseKeeping.list')")
- @PreAuthorize("(hasRole('keyword.update') and #dto.id != null) or (hasRole('keyword.add') and #dto.id == null)")
- @PreAuthorize("hasRole('keyword.delete')")
- @PreAuthorize("hasRole('keyword.list')")
- @PreAuthorize("(hasRole('nature.update') and #dto.id != null) or (hasRole('nature.add') and #dto.id == null)")
- @PreAuthorize("hasRole('nature.delete')")
- @PreAuthorize("hasRole('nature.list')")
- @PreAuthorize("(hasRole('noticeReply.update') and #dto.id != null) or (hasRole('noticeReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('noticeReply.delete')")
- @PreAuthorize("hasRole('noticeReply.list')")
- @PreAuthorize("(hasRole('order.update') and #dto.id != null) or (hasRole('order.add') and #dto.id == null)")
- @PreAuthorize("hasRole('order.delete')")
- @PreAuthorize("hasRole('order.list')")
- @PreAuthorize("(hasRole('orderItem.update') and #dto.id != null) or (hasRole('orderItem.add') and #dto.id == null)")
- @PreAuthorize("hasRole('orderItem.delete')")
- @PreAuthorize("hasRole('orderItem.list')")
- @PreAuthorize("(hasRole('payRecord.update') and #dto.id != null) or (hasRole('payRecord.add') and #dto.id == null)")
- @PreAuthorize("hasRole('payRecord.delete')")
- @PreAuthorize("hasRole('payRecord.list')")
- @PreAuthorize("(hasRole('product.update') and #dto.id != null) or (hasRole('product.add') and #dto.id == null)")
- @PreAuthorize("hasRole('product.delete')")
- @PreAuthorize("hasRole('product.list')")
- @PreAuthorize("(hasRole('question.update') and #dto.id != null) or (hasRole('question.add') and #dto.id == null)")
- @PreAuthorize("hasRole('question.delete')")
- @PreAuthorize("hasRole('question.list')")
- @PreAuthorize("(hasRole('questionReply.update') and #dto.id != null) or (hasRole('questionReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('questionReply.delete')")
- @PreAuthorize("hasRole('questionReply.list')")
- @PreAuthorize("(hasRole('repair.update') and #dto.id != null) or (hasRole('repair.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repair.delete')")
- @PreAuthorize("hasRole('repair.list')")
- @PreAuthorize("(hasRole('repairHistory.update') and #dto.id != null) or (hasRole('repairHistory.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repairHistory.delete')")
- @PreAuthorize("hasRole('repairHistory.list')")
- @PreAuthorize("(hasRole('repairReply.update') and #dto.id != null) or (hasRole('repairReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repairReply.delete')")
- @PreAuthorize("hasRole('repairReply.list')")
- @PreAuthorize("(hasRole('reply.update') and #dto.id != null) or (hasRole('reply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('reply.delete')")
- @PreAuthorize("hasRole('reply.list')")
- @PreAuthorize("(hasRole('serviceType.update') and #dto.id != null) or (hasRole('serviceType.add') and #dto.id == null)")
- @PreAuthorize("hasRole('serviceType.delete')")
- @PreAuthorize("hasRole('serviceType.list')")
- @PreAuthorize("(hasRole('store.update') and #dto.id != null) or (hasRole('store.add') and #dto.id == null)")
- @PreAuthorize("hasRole('store.delete')")
- @PreAuthorize("hasRole('store.list')")
- @PreAuthorize("(hasRole('systemMessage.update') and #dto.id != null) or (hasRole('systemMessage.add') and #dto.id == null)")
- @PreAuthorize("hasRole('systemMessage.delete')")
- @PreAuthorize("hasRole('systemMessage.list')")
- @PreAuthorize("(hasRole('topic.update') and #dto.id != null) or (hasRole('topic.add') and #dto.id == null)")
- @PreAuthorize("hasRole('topic.delete')")
- @PreAuthorize("hasRole('topic.list')")
- @PreAuthorize("(hasRole('topicReply.update') and #dto.id != null) or (hasRole('topicReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('topicReply.delete')")
- @PreAuthorize("hasRole('topicReply.list')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=84&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Osais/java-blog-aggregator/commit/79d02f54724c8219baab8565693bfaa4fd9959aa

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/GavrikGal/display/commit/f3f89f6ece9ec4888bd69286c5d8e42b1c3b78e0

[COMMIT MESSAGE]:ls1710, начал документировать код||
=========================================================

- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/GavrikGal/display/commit/8ec324ec8349f60b6c3a53c6f6c4b8c1072887b2

[COMMIT MESSAGE]:ls1710, добавлены все классы старого проекта, теперь надо все запустить||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=85&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/e52bfe62782b98b078cc380888e04e6572ed44b0

[COMMIT MESSAGE]:clean up code and db||
=========================================================

- @PreAuthorize("(hasRole('advise.update') and #dto.id != null) or (hasRole('advise.add') and #dto.id == null)")
- @PreAuthorize("hasRole('advise.delete')")
- @PreAuthorize("hasRole('advise.list')")
- @PreAuthorize("(hasRole('adviseReply.update') and #dto.id != null) or (hasRole('adviseReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('adviseReply.delete')")
- @PreAuthorize("hasRole('adviseReply.list')")
- @PreAuthorize("(hasRole('article.update') and #dto.id != null) or (hasRole('article.add') and #dto.id == null)")
- @PreAuthorize("hasRole('article.delete')")
- @PreAuthorize("hasRole('article.list')")
- @PreAuthorize("(hasRole('building.update') and #dto.id != null) or (hasRole('building.add') and #dto.id == null)")
- @PreAuthorize("hasRole('building.delete')")
- @PreAuthorize("hasRole('building.list')")
- @PreAuthorize("(hasRole('category.update') and #dto.id != null) or (hasRole('category.add') and #dto.id == null)")
- @PreAuthorize("hasRole('category.delete')")
- @PreAuthorize("hasRole('category.list')")
- @PreAuthorize("(hasRole('communityAddApply.update') and #dto.id != null) or (hasRole('communityAddApply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('communityAddApply.delete')")
- @PreAuthorize("hasRole('communityAddApply.list')")
- @PreAuthorize("(hasRole('community.update') and #dto.id != null) or (hasRole('community.add') and #dto.id == null)")
- @PreAuthorize("hasRole('community.delete')")
- @PreAuthorize("hasRole('community.list')")
- @PreAuthorize("(hasRole('convenience.update') and #dto.id != null) or (hasRole('convenience.add') and #dto.id == null)")
- @PreAuthorize("hasRole('convenience.delete')")
- @PreAuthorize("hasRole('convenience.list')")
- @PreAuthorize("(hasRole('doorplate.update') and #dto.id != null) or (hasRole('doorplate.add') and #dto.id == null)")
- @PreAuthorize("hasRole('doorplate.delete')")
- @PreAuthorize("hasRole('doorplate.list')")
- @PreAuthorize("(hasRole('feeItem.update') and #dto.id != null) or (hasRole('feeItem.add') and #dto.id == null)")
- @PreAuthorize("hasRole('feeItem.delete')")
- @PreAuthorize("hasRole('feeItem.list')")
- @PreAuthorize("(hasRole('houseKeeping.update') and #dto.id != null) or (hasRole('houseKeeping.add') and #dto.id == null)")
- @PreAuthorize("hasRole('houseKeeping.delete')")
- @PreAuthorize("hasRole('houseKeeping.list')")
- @PreAuthorize("(hasRole('keyword.update') and #dto.id != null) or (hasRole('keyword.add') and #dto.id == null)")
- @PreAuthorize("hasRole('keyword.delete')")
- @PreAuthorize("hasRole('keyword.list')")
- @PreAuthorize("(hasRole('nature.update') and #dto.id != null) or (hasRole('nature.add') and #dto.id == null)")
- @PreAuthorize("hasRole('nature.delete')")
- @PreAuthorize("hasRole('nature.list')")
- @PreAuthorize("(hasRole('noticeReply.update') and #dto.id != null) or (hasRole('noticeReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('noticeReply.delete')")
- @PreAuthorize("hasRole('noticeReply.list')")
- @PreAuthorize("(hasRole('order.update') and #dto.id != null) or (hasRole('order.add') and #dto.id == null)")
- @PreAuthorize("hasRole('order.delete')")
- @PreAuthorize("hasRole('order.list')")
- @PreAuthorize("(hasRole('orderItem.update') and #dto.id != null) or (hasRole('orderItem.add') and #dto.id == null)")
- @PreAuthorize("hasRole('orderItem.delete')")
- @PreAuthorize("hasRole('orderItem.list')")
- @PreAuthorize("(hasRole('payRecord.update') and #dto.id != null) or (hasRole('payRecord.add') and #dto.id == null)")
- @PreAuthorize("hasRole('payRecord.delete')")
- @PreAuthorize("hasRole('payRecord.list')")
- @PreAuthorize("(hasRole('product.update') and #dto.id != null) or (hasRole('product.add') and #dto.id == null)")
- @PreAuthorize("hasRole('product.delete')")
- @PreAuthorize("hasRole('product.list')")
- @PreAuthorize("(hasRole('question.update') and #dto.id != null) or (hasRole('question.add') and #dto.id == null)")
- @PreAuthorize("hasRole('question.delete')")
- @PreAuthorize("hasRole('question.list')")
- @PreAuthorize("(hasRole('questionReply.update') and #dto.id != null) or (hasRole('questionReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('questionReply.delete')")
- @PreAuthorize("hasRole('questionReply.list')")
- @PreAuthorize("(hasRole('repair.update') and #dto.id != null) or (hasRole('repair.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repair.delete')")
- @PreAuthorize("hasRole('repair.list')")
- @PreAuthorize("(hasRole('repairHistory.update') and #dto.id != null) or (hasRole('repairHistory.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repairHistory.delete')")
- @PreAuthorize("hasRole('repairHistory.list')")
- @PreAuthorize("(hasRole('repairReply.update') and #dto.id != null) or (hasRole('repairReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repairReply.delete')")
- @PreAuthorize("hasRole('repairReply.list')")
- @PreAuthorize("(hasRole('reply.update') and #dto.id != null) or (hasRole('reply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('reply.delete')")
- @PreAuthorize("hasRole('reply.list')")
- @PreAuthorize("(hasRole('serviceType.update') and #dto.id != null) or (hasRole('serviceType.add') and #dto.id == null)")
- @PreAuthorize("hasRole('serviceType.delete')")
- @PreAuthorize("hasRole('serviceType.list')")
- @PreAuthorize("(hasRole('store.update') and #dto.id != null) or (hasRole('store.add') and #dto.id == null)")
- @PreAuthorize("hasRole('store.delete')")
- @PreAuthorize("hasRole('store.list')")
- @PreAuthorize("(hasRole('systemMessage.update') and #dto.id != null) or (hasRole('systemMessage.add') and #dto.id == null)")
- @PreAuthorize("hasRole('systemMessage.delete')")
- @PreAuthorize("hasRole('systemMessage.list')")
- @PreAuthorize("(hasRole('topic.update') and #dto.id != null) or (hasRole('topic.add') and #dto.id == null)")
- @PreAuthorize("hasRole('topic.delete')")
- @PreAuthorize("hasRole('topic.list')")
- @PreAuthorize("(hasRole('topicReply.update') and #dto.id != null) or (hasRole('topicReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('topicReply.delete')")
- @PreAuthorize("hasRole('topicReply.list')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Osais/java-blog-aggregator/commit/79d02f54724c8219baab8565693bfaa4fd9959aa

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/GavrikGal/display/commit/f3f89f6ece9ec4888bd69286c5d8e42b1c3b78e0

[COMMIT MESSAGE]:ls1710, начал документировать код||
=========================================================

- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/GavrikGal/display/commit/8ec324ec8349f60b6c3a53c6f6c4b8c1072887b2

[COMMIT MESSAGE]:ls1710, добавлены все классы старого проекта, теперь надо все запустить||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=86&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/hermeswaldemarin/testmaker/commit/b9b11d224e428516db624b43091116203eefc167

[COMMIT MESSAGE]:Implementing new functionalities||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/hermeswaldemarin/testmaker/commit/b9b11d224e428516db624b43091116203eefc167

[COMMIT MESSAGE]:Implementing new functionalities||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/hermeswaldemarin/testmaker/commit/fb6a1deffdced8cb6fe69cb60fe7baf2943c96b0

[COMMIT MESSAGE]:recreating package||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/hermeswaldemarin/testmaker/commit/49927e9958469bae285f9dc043aa9fd9092d17c4

[COMMIT MESSAGE]:removing packages||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/hermeswaldemarin/testmaker/commit/b9b11d224e428516db624b43091116203eefc167

[COMMIT MESSAGE]:Implementing new functionalities||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/hermeswaldemarin/testmaker/commit/b9b11d224e428516db624b43091116203eefc167

[COMMIT MESSAGE]:Implementing new functionalities||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/e70e23173d9dc51a8d9a6cd3dc30220723f9abd7

[COMMIT MESSAGE]:change password implementation||expose image set management
fix invalid objectId exception if imageId is not a valid ObjectId
=========================================================

+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/d073dff9cbfc88a1063b2704665ec11262bab940

[COMMIT MESSAGE]:add a DaoTemplate. refactor shop service||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/8296f4e1aaa98b8b0851054195186281d9fa42cd

[COMMIT MESSAGE]:enhance user management and enhance authentication||
=========================================================

+ @PreAuthorize("hasPermission('SYS','USER_ACCOUNT_EDIT')")
+ @PreAuthorize("hasPermission('SYS','USER_ACCOUNT_EDIT')")
+ @PreAuthorize("hasPermission('SYS','USER_ACCOUNT_EDIT')")
+ @PreAuthorize("hasPermission('SYS','USER_ACCOUNT_EDIT')")
- @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL') ")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/fd2aaff8c66b87a7f7224cbe3bd7dfe05833e4b3

[COMMIT MESSAGE]:enable add shop request/approve work flow||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/16c0bbf1f9599b558f7266de7ebeccd29996f1b7

[COMMIT MESSAGE]:move permission control from rs layer to service layer||
=========================================================

- @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
- @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/991a1b8974df6453beaf82cca66a0a76780ffd70

[COMMIT MESSAGE]:add request approve flow for creating speciality||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/8052d925a8751e5004eb9bbf5ba547d36c561c62

[COMMIT MESSAGE]:rename app package name||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL') ")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/e70e23173d9dc51a8d9a6cd3dc30220723f9abd7

[COMMIT MESSAGE]:change password implementation||expose image set management
fix invalid objectId exception if imageId is not a valid ObjectId
=========================================================

+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/d073dff9cbfc88a1063b2704665ec11262bab940

[COMMIT MESSAGE]:add a DaoTemplate. refactor shop service||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/aefdd34b7f4d735be728188737b5d25b5e3a8afe

[COMMIT MESSAGE]:use role name as id||add a new role to comibine security admin and speciality admin
=========================================================

- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/fd2aaff8c66b87a7f7224cbe3bd7dfe05833e4b3

[COMMIT MESSAGE]:enable add shop request/approve work flow||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/e091d2c1b328ce84c9fd5f21a487ef643ff88956

[COMMIT MESSAGE]:fix morphia multiple data store issue||expose create shop interface
adjust security configuration
=========================================================

- @PreAuthorize("hasRole('USER_LIST_READ')")
+ @PreAuthorize("hasPermission('SYS','USER_LIST_READ')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=87&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/8052d925a8751e5004eb9bbf5ba547d36c561c62

[COMMIT MESSAGE]:rename app package name||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL') ")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/8052d925a8751e5004eb9bbf5ba547d36c561c62

[COMMIT MESSAGE]:rename app package name||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL') ")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/8296f4e1aaa98b8b0851054195186281d9fa42cd

[COMMIT MESSAGE]:enhance user management and enhance authentication||
=========================================================

+ @PreAuthorize("hasPermission('SYS','USER_ACCOUNT_EDIT')")
+ @PreAuthorize("hasPermission('SYS','USER_ACCOUNT_EDIT')")
+ @PreAuthorize("hasPermission('SYS','USER_ACCOUNT_EDIT')")
+ @PreAuthorize("hasPermission('SYS','USER_ACCOUNT_EDIT')")
- @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL') ")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/991a1b8974df6453beaf82cca66a0a76780ffd70

[COMMIT MESSAGE]:add request approve flow for creating speciality||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/8052d925a8751e5004eb9bbf5ba547d36c561c62

[COMMIT MESSAGE]:rename app package name||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL') ")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/nikolaynest/catalog/commit/b7f701f7385a851c21e09813748f12ff57c568cd

[COMMIT MESSAGE]:Initial commit||
=========================================================

+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/nikolaynest/catalog/commit/b7f701f7385a851c21e09813748f12ff57c568cd

[COMMIT MESSAGE]:Initial commit||
=========================================================

+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/tfeng/play-oauth2/commit/2ab7b9e74d064f514376759422f3c0dde2268234

[COMMIT MESSAGE]:Initial commit.||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("#oauth2.clientHasRole('ROLE_CLIENT') and #oauth2.hasScope('trust')")
+ @PreAuthorize("#oauth2.clientHasRole('ROLE_CLIENT') and #oauth2.hasScope('trust')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/tfeng/play-oauth2/commit/2ab7b9e74d064f514376759422f3c0dde2268234

[COMMIT MESSAGE]:Initial commit.||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("#oauth2.clientHasRole('ROLE_CLIENT') and #oauth2.hasScope('trust')")
+ @PreAuthorize("#oauth2.clientHasRole('ROLE_CLIENT') and #oauth2.hasScope('trust')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=88&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/zhangjunfang/eclipse-dir/commit/1e7b6a50e0378e346b7fbaf0ed96f0e398a6b7ec

[COMMIT MESSAGE]:3||
=========================================================

+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhangjunfang/eclipse-dir/commit/1e7b6a50e0378e346b7fbaf0ed96f0e398a6b7ec

[COMMIT MESSAGE]:3||
=========================================================

+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhangjunfang/eclipse-dir/commit/1e7b6a50e0378e346b7fbaf0ed96f0e398a6b7ec

[COMMIT MESSAGE]:3||
=========================================================

+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhangjunfang/eclipse-dir/commit/1e7b6a50e0378e346b7fbaf0ed96f0e398a6b7ec

[COMMIT MESSAGE]:3||
=========================================================

+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/NikitaElsukov/MISTmvc/commit/06bca13b310625abdd902a75c819fe5c84b855ca

[COMMIT MESSAGE]:Signed-off-by: Nikita <nikita.elsukov.sa@mail.ru>||
=========================================================

+ //@PreAuthorize("(hasRole('ROLE_ADMIN') and #image != null)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/przodownikR1/springMvcStartKata/commit/c742a62afc62215885e6b45d7fcf00e86bf7146f

[COMMIT MESSAGE]:test||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/i5i/nortal/commit/956033f5c1da742afd80af9a8b26c6d2c0feede0

[COMMIT MESSAGE]:--inital commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_AaaDMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/FrontierPsychiatrist/spring-oauth-example/commit/56f390bdbfb377a34193baa08fbea96572c48652

[COMMIT MESSAGE]:Added the possibility to edit clients||
=========================================================

+ @PreAuthorize("hasRole('ROLE_OAUTH_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_OAUTH_ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=89&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/rebrohead/bank-app/commit/e0beb5e1d7d8a5b87956f021811c527dffc8ebea

[COMMIT MESSAGE]:initial commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_TELLER')")
+ @PreAuthorize("hasRole('ROLE_TELLER')")
+ @PreAuthorize("hasRole('ROLE_TELLER')")
+ @PreAuthorize("hasRole('ROLE_TELLER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/rebrohead/bank-app/commit/e0beb5e1d7d8a5b87956f021811c527dffc8ebea

[COMMIT MESSAGE]:initial commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_TELLER')")
+ @PreAuthorize("hasRole('ROLE_TELLER')")
+ @PreAuthorize("hasRole('ROLE_TELLER')")
+ @PreAuthorize("hasRole('ROLE_TELLER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DmitryShilovich/Blog/commit/84189c2000e3f0a1ea4c253c8cb0e7b5f4bd710c

[COMMIT MESSAGE]:Third commit||
=========================================================

+ @PreAuthorize("#blog.user.userName == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/NesterovAndrey/BlogTest/commit/74a57e949549bfd3bae4130ac9dbd467757dadf2

[COMMIT MESSAGE]:1||
=========================================================

+ @PreAuthorize("checkUser(authentication.name,@articleDAO.getArticleByID(#articleID).getBlog().getBlogAuthor().getLogin())")
+ @PreAuthorize("checkUser(authentication.name,@BlogDAO.getBlogByID(#blogID).getBlogAuthor().getLogin())")
+ @PreAuthorize("checkUser(authentication.name,#article.getBlog().getBlogAuthor().getLogin())")
+ @PreAuthorize("checkUser(authentication.name,@BlogDAO.getBlogByID(#blogID).getBlogAuthor().getLogin())")
+ @PreAuthorize("checkUser(authentication.name,#blogInst.getBlogAuthor().getLogin())")
+ @PreAuthorize("checkUser(authentication.name,#user)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/NesterovAndrey/BlogTest/commit/74a57e949549bfd3bae4130ac9dbd467757dadf2

[COMMIT MESSAGE]:1||
=========================================================

+ @PreAuthorize("checkUser(authentication.name,@articleDAO.getArticleByID(#articleID).getBlog().getBlogAuthor().getLogin())")
+ @PreAuthorize("checkUser(authentication.name,@BlogDAO.getBlogByID(#blogID).getBlogAuthor().getLogin())")
+ @PreAuthorize("checkUser(authentication.name,#article.getBlog().getBlogAuthor().getLogin())")
+ @PreAuthorize("checkUser(authentication.name,@BlogDAO.getBlogByID(#blogID).getBlogAuthor().getLogin())")
+ @PreAuthorize("checkUser(authentication.name,#blogInst.getBlogAuthor().getLogin())")
+ @PreAuthorize("checkUser(authentication.name,#user)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/NesterovAndrey/BlogTest/commit/74a57e949549bfd3bae4130ac9dbd467757dadf2

[COMMIT MESSAGE]:1||
=========================================================

+ @PreAuthorize("checkUser(authentication.name,@articleDAO.getArticleByID(#articleID).getBlog().getBlogAuthor().getLogin())")
+ @PreAuthorize("checkUser(authentication.name,@BlogDAO.getBlogByID(#blogID).getBlogAuthor().getLogin())")
+ @PreAuthorize("checkUser(authentication.name,#article.getBlog().getBlogAuthor().getLogin())")
+ @PreAuthorize("checkUser(authentication.name,@BlogDAO.getBlogByID(#blogID).getBlogAuthor().getLogin())")
+ @PreAuthorize("checkUser(authentication.name,#blogInst.getBlogAuthor().getLogin())")
+ @PreAuthorize("checkUser(authentication.name,#user)")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=90&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/yanavery/Galaxy/commit/52a145be38c2a126948079c6938815502384ec7b

[COMMIT MESSAGE]:Initial Release||Initial commit of an application that demonstrates the integration of a simple barebones Java/Spring web application with AppDirect's Marketplace.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN_GALAXY')")
+ @PreAuthorize("hasRole('ROLE_ADMIN_GALAXY')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yanavery/Galaxy/commit/52a145be38c2a126948079c6938815502384ec7b

[COMMIT MESSAGE]:Initial Release||Initial commit of an application that demonstrates the integration of a simple barebones Java/Spring web application with AppDirect's Marketplace.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN_GALAXY')")
+ @PreAuthorize("hasRole('ROLE_ADMIN_GALAXY')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=91&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/atais/PP-JSON/commit/89c35bb33f65d3b8fb789ef0acbf951647f2c078

[COMMIT MESSAGE]:Hack for transactions||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/atais/PP-JSON/commit/1fd0c5b5a9c507b1c3ef100e8285e117790bc368

[COMMIT MESSAGE]:huge||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/atais/PP-JSON/commit/89c35bb33f65d3b8fb789ef0acbf951647f2c078

[COMMIT MESSAGE]:Hack for transactions||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/atais/PP-JSON/commit/89c35bb33f65d3b8fb789ef0acbf951647f2c078

[COMMIT MESSAGE]:Hack for transactions||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/atais/PP-JSON/commit/89c35bb33f65d3b8fb789ef0acbf951647f2c078

[COMMIT MESSAGE]:Hack for transactions||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/nityah1/OnTheGo/commit/1e88652dea4506eda264452a5040ee7b8494d1e1

[COMMIT MESSAGE]:First commit||
=========================================================

+ //@PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/FGoessler/UPGroupplanerServer/commit/3af966ca6af2ce9f0603eef4986d2812c4191a41

[COMMIT MESSAGE]:bugfix:||- cause of invalid expression language in @PreAuthorize one could not rename groups
=========================================================

- @PreAuthorize("@groupPermissionService.hasWritePermission(authentication, #updatedGroup)")
+ @PreAuthorize("@groupPermissionService.hasWritePermission(authentication, #updatedGroup.getId())")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=92&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/FGoessler/UPGroupplanerServer/commit/77c83248eec38c7a7055858ffdd829b7eb3abed3

[COMMIT MESSAGE]:fixed a bug cause of which users could not accept invites||
=========================================================

- @PreAuthorize("@groupPermissionService.hasWritePermission(authentication, #groupId)")
+ @PreAuthorize("@groupPermissionService.hasWriteOrPartialWritePermission(authentication, #groupId, #memberEmail)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/FGoessler/UPGroupplanerServer/commit/4818ec280f31b2e1cf8f3ac4d6aaf3fb02598750

[COMMIT MESSAGE]:refactored permission check for groups to use @PreAuthorize annotations||
=========================================================

+ * "@PreAuthorize("@groupPermissionService.hasReadPermission(authentication, #groupId)")"
+ @PreAuthorize("@groupPermissionService.hasReadPermission(authentication, #groupId)")
+ @PreAuthorize("@groupPermissionService.hasReadPermission(authentication, #groupId)")
+ @PreAuthorize("@groupPermissionService.hasWritePermission(authentication, #groupId)")
+ @PreAuthorize("@groupPermissionService.hasWritePermission(authentication, #groupId)")
+ @PreAuthorize("@groupPermissionService.hasWritePermission(authentication, #groupId)")
+ @PreAuthorize("@groupPermissionService.hasReadPermission(authentication, #id)")
+ @PreAuthorize("@groupPermissionService.hasWritePermission(authentication, #updatedGroup)")
+ @PreAuthorize("@groupPermissionService.hasReadPermission(authentication, #groupId)")
+ @PreAuthorize("@groupPermissionService.hasReadPermission(authentication, #groupId)")
+ @PreAuthorize("@groupPermissionService.hasWritePermission(authentication, #groupId)")
+ @PreAuthorize("@groupPermissionService.hasWritePermission(authentication, #groupId)")
+ @PreAuthorize("@groupPermissionService.hasReadPermission(authentication, #groupId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/loki2302/spring-security-experiment/commit/4ecd75c1ece4b4e0de04029f29a7183a608c1744

[COMMIT MESSAGE]:Added a NoteService and related tests to check what it looks like in …||…more realistic scenarios
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and #note.owner.equals(principal)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/loki2302/spring-security-experiment/commit/58cf3461cd2bf038b80d296d879347144594b23c

[COMMIT MESSAGE]:Converted to JUnit tests||
=========================================================

- @PreAuthorize("#x < 10")
- @PreAuthorize("@divSecurityDecider.canDivideBy(#y)")
+ @PreAuthorize("#x < 10")
+ @PreAuthorize("@divSecurityDecider.canDivideBy(#y)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/loki2302/spring-security-experiment/commit/e5bc0331908340325430627128daf2d9ac6a0627

[COMMIT MESSAGE]:Added 'by ID' tests||
=========================================================

+ @PreAuthorize("hasPermission(#id, 'Note', 'VIEW')")
+ @PreAuthorize("hasPermission(#id, 'Note', 'EDIT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/loki2302/spring-security-experiment/commit/7df02aa793417013f238ed301d36acba55e64649

[COMMIT MESSAGE]:Added CustomPermissionEvaluatorTest||
=========================================================

+ @PreAuthorize("hasPermission(#note, 'VIEW')")
+ @PreAuthorize("hasPermission(#note, 'EDIT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/soutenanceplanner/soutenanceplanner/commit/158d7c0b53f438da1e9f5adcb88b336f63ddd9f1

[COMMIT MESSAGE]:Ajout menu calendrier CalendrierPrésent||et calendrier auxquels l'utilistaeur est isncris
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/soutenanceplanner/soutenanceplanner/commit/d9cb82acd200eb451d48fd5444fc60983d77be47

[COMMIT MESSAGE]:Merge + filter supplémentaire sur admin_list||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/soutenanceplanner/soutenanceplanner/commit/0d296ddc5e75ffe5a652e50eac2a73ba60f1739d

[COMMIT MESSAGE]:Merge branch 'dev' of||git@github.com:soutenanceplanner/soutenanceplanner.git into dev

Conflicts:
	src/main/java/com/angers/m2sili/soutenance/repository/OralRepository.java
	src/main/java/com/angers/m2sili/soutenance/service/OralService.java
	src/main/java/com/angers/m2sili/soutenance/service/impl/OralServiceImpl.java
	src/main/java/com/angers/m2sili/soutenance/web/CalendarController.java

	SUppresion d'un calendrier
=========================================================

-// @PreAuthorize("isAuthenticated()")
+@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/soutenanceplanner/soutenanceplanner/commit/f827855ae5f5461cb1e53bd5a25a540a83533e3d

[COMMIT MESSAGE]:Résolution de conflits||
=========================================================

- @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/soutenanceplanner/soutenanceplanner/commit/89811173d10287a6d537c7afa07b4ab3e73c4bcd

[COMMIT MESSAGE]:Merge branch 'dev' of||git@github.com:soutenanceplanner/soutenanceplanner.git into dev

Conflicts:
	src/main/java/com/angers/m2sili/soutenance/web/CalendarController.java
=========================================================

- @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
- @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/soutenanceplanner/soutenanceplanner/commit/911b83a6406887babc129604653e8fdae7c27f09

[COMMIT MESSAGE]:Correction||
=========================================================

- @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
- @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/soutenanceplanner/soutenanceplanner/commit/68498f5c8c8212865253d3a413561771813a7650

[COMMIT MESSAGE]:- Modification des routes (partie admin)||- Liste des calendriers (admin)
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/soutenanceplanner/soutenanceplanner/commit/a136431c1c835371cc10e528839805f1045397a1

[COMMIT MESSAGE]:Corrections||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/soutenanceplanner/soutenanceplanner/commit/31bf8e71dd00ed3d747a8c4eb11a2e1d682ec72b

[COMMIT MESSAGE]:Merge branch 'dev' of||git@github.com:soutenanceplanner/soutenanceplanner.git into dev

Conflicts:
	src/main/webapp/src/app/app.js
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/soutenanceplanner/soutenanceplanner/commit/fc157ba072d85722b377d432f02c9218a00d1dab

[COMMIT MESSAGE]:Ajout calendar fonctionnel||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/soutenanceplanner/soutenanceplanner/commit/3eae5572091a1e099178ae25dea876b8ac527978

[COMMIT MESSAGE]:Clean + droits sur User/Admin||
=========================================================

-// @PreAuthorize("isAuthenticated()")
+@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/soutenanceplanner/soutenanceplanner/commit/68498f5c8c8212865253d3a413561771813a7650

[COMMIT MESSAGE]:- Modification des routes (partie admin)||- Liste des calendriers (admin)
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/soutenanceplanner/soutenanceplanner/commit/521cc227c5a99fe7d15b065f07b641462061f2be

[COMMIT MESSAGE]:GSON||
=========================================================

-//@PreAuthorize("isAuthenticated()")
+//@PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/soutenanceplanner/soutenanceplanner/commit/25abcda081ca18b2f920dbf7330da8ff3d06d1b7

[COMMIT MESSAGE]:Login/logout||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/soutenanceplanner/soutenanceplanner/commit/8ba0e3b0ec00829e5e1241574d449f2cd756654d

[COMMIT MESSAGE]:Allow temporaire||
=========================================================

-@PreAuthorize("isAuthenticated()")
+//@PreAuthorize("isAuthenticated()")
-@PreAuthorize("isAuthenticated()")
+//@PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/soutenanceplanner/soutenanceplanner/commit/83e81cda6de15b137599687b2d3c9beaa574dc73

[COMMIT MESSAGE]:Clean||
=========================================================

+@PreAuthorize("isAuthenticated()")
+@PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("denyAll()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("denyAll()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/soutenanceplanner/soutenanceplanner/commit/109dc7cd44a2d1b9fba422c6a4cc1becc4e4c111

[COMMIT MESSAGE]:Spring security||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("denyAll()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/9ba94f7a04373e225d653f6aa6f561a595a3904c

[COMMIT MESSAGE]:add ability for multiple download||
=========================================================

+ @PreAuthorize("#album.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("isAuthenticated()")
-// @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/6726f95288c5d977095e9c701bb0e5843c92ca67

[COMMIT MESSAGE]:minor changes in files||
=========================================================

- @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/6dd84b42191a9daf55067d414f671c6b42d47d0e

[COMMIT MESSAGE]:add Image, Album entities||
=========================================================

+ @PreAuthorize("#album.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#album.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/6726f95288c5d977095e9c701bb0e5843c92ca67

[COMMIT MESSAGE]:minor changes in files||
=========================================================

- @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/ecde0c5e88257838b069d88924304c441bac08e6

[COMMIT MESSAGE]:add addUser view, some view fix and add some js lib||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/2ad6cdf46fd088eb3c0dce981d96405784116279

[COMMIT MESSAGE]:fix security for project||
=========================================================

- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
-// @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
-// @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#user.login == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/c04a90232e2d4b43e156e0641db55484d23aa0ad

[COMMIT MESSAGE]:correct spring-security-acl config||
=========================================================

+// @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/b973bbe5850b9d1699de0a8ed6ab61413f8f61f3

[COMMIT MESSAGE]:add spring-security-acl config||
=========================================================

- @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#userFromForm.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+// @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/b0194bb79604f640619312f35616af84c4772af5

[COMMIT MESSAGE]:add security for service layer, change view||
=========================================================

+ @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#user.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("#user.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/2ad6cdf46fd088eb3c0dce981d96405784116279

[COMMIT MESSAGE]:fix security for project||
=========================================================

- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
-// @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
-// @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#user.login == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/b973bbe5850b9d1699de0a8ed6ab61413f8f61f3

[COMMIT MESSAGE]:add spring-security-acl config||
=========================================================

- @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#userFromForm.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+// @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/c93691c8d1adfca75cc2da297f42a695eaaf46db

[COMMIT MESSAGE]:add functionality for Visitor entity||
=========================================================

+ @PreAuthorize("#userFromForm.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#user.login == authentication.name or hasRole('ROLE_ADMIN')")
-// @PreAuthorize("#user.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=93&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/2ad6cdf46fd088eb3c0dce981d96405784116279

[COMMIT MESSAGE]:fix security for project||
=========================================================

- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
-// @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
-// @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#user.login == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/b973bbe5850b9d1699de0a8ed6ab61413f8f61f3

[COMMIT MESSAGE]:add spring-security-acl config||
=========================================================

- @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#userFromForm.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+// @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/c93691c8d1adfca75cc2da297f42a695eaaf46db

[COMMIT MESSAGE]:add functionality for Visitor entity||
=========================================================

+ @PreAuthorize("#userFromForm.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#user.login == authentication.name or hasRole('ROLE_ADMIN')")
-// @PreAuthorize("#user.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/b0194bb79604f640619312f35616af84c4772af5

[COMMIT MESSAGE]:add security for service layer, change view||
=========================================================

+ @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#user.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("#user.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/91432de78f7d18371e9200ba3d0115c8ce4cdae1

[COMMIT MESSAGE]:fix name validation for Album, Image||
=========================================================

-// @PreAuthorize("isAuthenticated()")
+ // @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/5ba507f9577e5ec2ee9b3cbd016b5ff385950026

[COMMIT MESSAGE]:start doing pageable gallery||
=========================================================

-// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/9ba94f7a04373e225d653f6aa6f561a595a3904c

[COMMIT MESSAGE]:add ability for multiple download||
=========================================================

+ @PreAuthorize("#album.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("isAuthenticated()")
-// @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/6726f95288c5d977095e9c701bb0e5843c92ca67

[COMMIT MESSAGE]:minor changes in files||
=========================================================

- @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/6dd84b42191a9daf55067d414f671c6b42d47d0e

[COMMIT MESSAGE]:add Image, Album entities||
=========================================================

+ @PreAuthorize("#album.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#album.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/ecde0c5e88257838b069d88924304c441bac08e6

[COMMIT MESSAGE]:add addUser view, some view fix and add some js lib||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/6726f95288c5d977095e9c701bb0e5843c92ca67

[COMMIT MESSAGE]:minor changes in files||
=========================================================

- @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("#image.user.login == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/ecde0c5e88257838b069d88924304c441bac08e6

[COMMIT MESSAGE]:add addUser view, some view fix and add some js lib||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/b973bbe5850b9d1699de0a8ed6ab61413f8f61f3

[COMMIT MESSAGE]:add spring-security-acl config||
=========================================================

- @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#article.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#userFromForm.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+// @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/c93691c8d1adfca75cc2da297f42a695eaaf46db

[COMMIT MESSAGE]:add functionality for Visitor entity||
=========================================================

+ @PreAuthorize("#userFromForm.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#comment.author.login == authentication.name or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#user.login == authentication.name or hasRole('ROLE_ADMIN')")
-// @PreAuthorize("#user.login == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/91432de78f7d18371e9200ba3d0115c8ce4cdae1

[COMMIT MESSAGE]:fix name validation for Album, Image||
=========================================================

-// @PreAuthorize("isAuthenticated()")
+ // @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/panser/JavaSite/commit/5ba507f9577e5ec2ee9b3cbd016b5ff385950026

[COMMIT MESSAGE]:start doing pageable gallery||
=========================================================

-// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/projectmanager/commit/9a265a69e0bd5d24ec3d58ff2e3c96cba815097b

[COMMIT MESSAGE]:Done : download in functie de ROLE_DOWNLOAD||WIP   : scos meniu contextual si scos selected on click de pe child row
=========================================================

+ @PreAuthorize("hasRole('ROLE_DOWNLOAD')")
+ @PreAuthorize("hasRole('ROLE_DOWNLOAD')")
+ @PreAuthorize("hasRole('ROLE_DOWNLOAD')")
+ @PreAuthorize("hasRole('ROLE_DOWNLOAD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/projectmanager/commit/2446570406fc555f39940ec16454f43fce47504c

[COMMIT MESSAGE]:Done = format(tr) la upload(refresh dinamic) + download pentru ROLE_D…||…OWNLOAD

WIP =  + download cu checkbox + baza date audit
TODO = refresh liste pe admin ,user management-partial, mysql buget&chelt, pagina raport
=========================================================

+ @PreAuthorize("hasRole('ROLE_DOWNLOAD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/ialexan/spring/commit/a18a281fdace1e0dacc2dd8ccaad27533198e5e5

[COMMIT MESSAGE]:first push||
=========================================================

+ @PreAuthorize("#announcement.site.section.isInstructor(principal)")
+ @PreAuthorize("#block.site.section.isInstructor(principal)")
+ @PreAuthorize("#item.block.site.section.isInstructor(principal)")
+ @PreAuthorize("#site.section.isInstructor(principal)")
+ @PreAuthorize("#announcement.site.section.isInstructor(principal)")
+ @PreAuthorize("#block.site.section.isInstructor(principal)")
+ @PreAuthorize("#item.block.site.section.isInstructor(principal)")
+ @PreAuthorize("#site.section.isInstructor(principal)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/ialexan/spring/commit/a18a281fdace1e0dacc2dd8ccaad27533198e5e5

[COMMIT MESSAGE]:first push||
=========================================================

+ @PreAuthorize("#announcement.site.section.isInstructor(principal)")
+ @PreAuthorize("#block.site.section.isInstructor(principal)")
+ @PreAuthorize("#item.block.site.section.isInstructor(principal)")
+ @PreAuthorize("#site.section.isInstructor(principal)")
+ @PreAuthorize("#announcement.site.section.isInstructor(principal)")
+ @PreAuthorize("#block.site.section.isInstructor(principal)")
+ @PreAuthorize("#item.block.site.section.isInstructor(principal)")
+ @PreAuthorize("#site.section.isInstructor(principal)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/ialexan/spring/commit/a18a281fdace1e0dacc2dd8ccaad27533198e5e5

[COMMIT MESSAGE]:first push||
=========================================================

+ @PreAuthorize("#announcement.site.section.isInstructor(principal)")
+ @PreAuthorize("#block.site.section.isInstructor(principal)")
+ @PreAuthorize("#item.block.site.section.isInstructor(principal)")
+ @PreAuthorize("#site.section.isInstructor(principal)")
+ @PreAuthorize("#announcement.site.section.isInstructor(principal)")
+ @PreAuthorize("#block.site.section.isInstructor(principal)")
+ @PreAuthorize("#item.block.site.section.isInstructor(principal)")
+ @PreAuthorize("#site.section.isInstructor(principal)")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=94&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/ialexan/spring/commit/a18a281fdace1e0dacc2dd8ccaad27533198e5e5

[COMMIT MESSAGE]:first push||
=========================================================

+ @PreAuthorize("#announcement.site.section.isInstructor(principal)")
+ @PreAuthorize("#block.site.section.isInstructor(principal)")
+ @PreAuthorize("#item.block.site.section.isInstructor(principal)")
+ @PreAuthorize("#site.section.isInstructor(principal)")
+ @PreAuthorize("#announcement.site.section.isInstructor(principal)")
+ @PreAuthorize("#block.site.section.isInstructor(principal)")
+ @PreAuthorize("#item.block.site.section.isInstructor(principal)")
+ @PreAuthorize("#site.section.isInstructor(principal)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/philiphamo/FinalProject/commit/ac23096b37a3893516bc764ce36d8cc64128c8ee

[COMMIT MESSAGE]:Committing new project after strange css fault||
=========================================================

+ @PreAuthorize("hasRole('user')")
+ @PreAuthorize("hasRole('user')")
+ @PreAuthorize("hasRole('user')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/rvanhee/Webservices/commit/255c768771f38c34b6ada65404f7025ef4110772

[COMMIT MESSAGE]:First version||
=========================================================

+ @PreAuthorize("hasPermission(#id, 'hello')")
+ @PreAuthorize("isAuthenticated() && hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/dtr-trading/spring-ex16-crud/commit/4d06a669a07d6f108210d48b8f89caab17ed58f9

[COMMIT MESSAGE]:Initial commit||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('CTRL_ROLE_LIST_GET')")
+ @PreAuthorize("hasRole('CTRL_ROLE_ADD_POST')")
+ @PreAuthorize("hasRole('CTRL_ROLE_EDIT_GET')")
+ @PreAuthorize("hasRole('CTRL_ROLE_EDIT_POST')")
+ @PreAuthorize("hasRole('CTRL_ROLE_DELETE_GET')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_LIST_GET')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_ADD_POST')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_EDIT_GET')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_EDIT_POST')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_DELETE_GET')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasAnyRole('CTRL_USER_LIST_GET','CTRL_USER_EDIT_GET')")
+ @PreAuthorize("hasAnyRole('CTRL_USER_LIST_GET','CTRL_USER_EDIT_GET')")
+ @PreAuthorize("hasRole('CTRL_USER_LIST_GET')")
+ @PreAuthorize("hasRole('CTRL_USER_ADD_POST')")
+ @PreAuthorize("hasRole('CTRL_USER_EDIT_GET')")
+ @PreAuthorize("hasRole('CTRL_USER_EDIT_POST')")
+ @PreAuthorize("hasRole('CTRL_USER_DELETE_GET')")
+ @PreAuthorize("hasAnyRole('CTRL_USER_EDIT_GET','CTRL_USER_DELETE_GET')")
+ @PreAuthorize("hasAnyRole('CTRL_USER_ADD_POST','CTRL_USER_EDIT_POST')")
+ @PreAuthorize("hasAnyRole('CTRL_USER_EDIT_GET','CTRL_USER_DELETE_GET','CTRL_USER_ADD_POST','CTRL_USER_EDIT_POST')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/dtr-trading/spring-ex16-crud/commit/4d06a669a07d6f108210d48b8f89caab17ed58f9

[COMMIT MESSAGE]:Initial commit||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('CTRL_ROLE_LIST_GET')")
+ @PreAuthorize("hasRole('CTRL_ROLE_ADD_POST')")
+ @PreAuthorize("hasRole('CTRL_ROLE_EDIT_GET')")
+ @PreAuthorize("hasRole('CTRL_ROLE_EDIT_POST')")
+ @PreAuthorize("hasRole('CTRL_ROLE_DELETE_GET')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_LIST_GET')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_ADD_POST')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_EDIT_GET')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_EDIT_POST')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_DELETE_GET')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasAnyRole('CTRL_USER_LIST_GET','CTRL_USER_EDIT_GET')")
+ @PreAuthorize("hasAnyRole('CTRL_USER_LIST_GET','CTRL_USER_EDIT_GET')")
+ @PreAuthorize("hasRole('CTRL_USER_LIST_GET')")
+ @PreAuthorize("hasRole('CTRL_USER_ADD_POST')")
+ @PreAuthorize("hasRole('CTRL_USER_EDIT_GET')")
+ @PreAuthorize("hasRole('CTRL_USER_EDIT_POST')")
+ @PreAuthorize("hasRole('CTRL_USER_DELETE_GET')")
+ @PreAuthorize("hasAnyRole('CTRL_USER_EDIT_GET','CTRL_USER_DELETE_GET')")
+ @PreAuthorize("hasAnyRole('CTRL_USER_ADD_POST','CTRL_USER_EDIT_POST')")
+ @PreAuthorize("hasAnyRole('CTRL_USER_EDIT_GET','CTRL_USER_DELETE_GET','CTRL_USER_ADD_POST','CTRL_USER_EDIT_POST')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/dtr-trading/spring-ex16-crud/commit/4d06a669a07d6f108210d48b8f89caab17ed58f9

[COMMIT MESSAGE]:Initial commit||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('CTRL_ROLE_LIST_GET')")
+ @PreAuthorize("hasRole('CTRL_ROLE_ADD_POST')")
+ @PreAuthorize("hasRole('CTRL_ROLE_EDIT_GET')")
+ @PreAuthorize("hasRole('CTRL_ROLE_EDIT_POST')")
+ @PreAuthorize("hasRole('CTRL_ROLE_DELETE_GET')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_LIST_GET')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_ADD_POST')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_EDIT_GET')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_EDIT_POST')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_DELETE_GET')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasAnyRole('CTRL_USER_LIST_GET','CTRL_USER_EDIT_GET')")
+ @PreAuthorize("hasAnyRole('CTRL_USER_LIST_GET','CTRL_USER_EDIT_GET')")
+ @PreAuthorize("hasRole('CTRL_USER_LIST_GET')")
+ @PreAuthorize("hasRole('CTRL_USER_ADD_POST')")
+ @PreAuthorize("hasRole('CTRL_USER_EDIT_GET')")
+ @PreAuthorize("hasRole('CTRL_USER_EDIT_POST')")
+ @PreAuthorize("hasRole('CTRL_USER_DELETE_GET')")
+ @PreAuthorize("hasAnyRole('CTRL_USER_EDIT_GET','CTRL_USER_DELETE_GET')")
+ @PreAuthorize("hasAnyRole('CTRL_USER_ADD_POST','CTRL_USER_EDIT_POST')")
+ @PreAuthorize("hasAnyRole('CTRL_USER_EDIT_GET','CTRL_USER_DELETE_GET','CTRL_USER_ADD_POST','CTRL_USER_EDIT_POST')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/thpeng/spring-time/commit/481e5bee524c5ca7acb26b29a6a6ca793a53a3f9

[COMMIT MESSAGE]:solution practice 8||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/thpeng/spring-time/commit/c10a0e8872838b32551861cbdce226ea482e1e73

[COMMIT MESSAGE]:expanding the timesheet domain.||
=========================================================

- @PreAuthorize("#id.uuId == principal.username or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@authorizationService.isPrincipalSameAsUser(principal.username, #id)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/thpeng/spring-time/commit/7dae394dc3d21170b4bb57db82cb369af56670a7

[COMMIT MESSAGE]:expanding the timesheet domain. simplified the helloworld test domain||
=========================================================

+ @PreAuthorize("#id.uuId == principal.username or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/thpeng/spring-time/commit/12afa668338b5a5824fb387ece54fa1b5161bcf2

[COMMIT MESSAGE]:added more acl rules, fixed a bug in the existing acl||
=========================================================

+ @PreAuthorize("#id == principal.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#user.loginId == principal.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#timeUser.loginId == principal.username or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/thpeng/spring-time/commit/6a83aaad85eb4d0f9ab7b7752f69846cccbe007a

[COMMIT MESSAGE]:method authorization support with spring security, uniqueconstraints,…||… expanded user example, expanded helloworld example
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#user.loginId == principal.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/thpeng/spring-time/commit/2350be6eebce396ef4d404e1ddd6475b1f9ad54a

[COMMIT MESSAGE]:expanded timesheet including delete / put||
=========================================================

+ @PreAuthorize("@timesheetAuthorizationService.isPrincipalOwnerOfTimesheet(principal.username, #timesheetId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/thpeng/spring-time/commit/93dbb46033a442f3cdfae2f5b4ba5b9b751d090f

[COMMIT MESSAGE]:expanded backend for timestamp functionality||
=========================================================

+ @PreAuthorize("@timesheetAuthorizationService.isPrincipalOwnerOfTimesheet(principal.username, #timesheetId)")
+ @PreAuthorize("@timesheetAuthorizationService.isPrincipalOwnerOfTimesheet(principal.username, #timesheetId)")
+ @PreAuthorize("@timesheetAuthorizationService.isPrincipalOwnerOfTimesheet(principal.username, #timesheetId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/thpeng/spring-time/commit/c10a0e8872838b32551861cbdce226ea482e1e73

[COMMIT MESSAGE]:expanding the timesheet domain.||
=========================================================

- @PreAuthorize("#id.uuId == principal.username or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@authorizationService.isPrincipalSameAsUser(principal.username, #id)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/thpeng/spring-time/commit/2350be6eebce396ef4d404e1ddd6475b1f9ad54a

[COMMIT MESSAGE]:expanded timesheet including delete / put||
=========================================================

+ @PreAuthorize("@timesheetAuthorizationService.isPrincipalOwnerOfTimesheet(principal.username, #timesheetId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/thpeng/spring-time/commit/c10a0e8872838b32551861cbdce226ea482e1e73

[COMMIT MESSAGE]:expanding the timesheet domain.||
=========================================================

- @PreAuthorize("#id.uuId == principal.username or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@authorizationService.isPrincipalSameAsUser(principal.username, #id)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/thpeng/spring-time/commit/7dae394dc3d21170b4bb57db82cb369af56670a7

[COMMIT MESSAGE]:expanding the timesheet domain. simplified the helloworld test domain||
=========================================================

+ @PreAuthorize("#id.uuId == principal.username or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sveneruso/nerdherd/commit/5a4270224949c79c1ef3ffaa687f2ff275114369

[COMMIT MESSAGE]:Fixed security||
=========================================================

- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sveneruso/nerdherd/commit/5467bdcb3a5ba537fc511eb9cb765c2a38632d0e

[COMMIT MESSAGE]:Fixed authentication||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=95&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/blixabargeld/list-spring-mvc/commit/a254cddc045c361e09b4103926e40a18d670a144

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/blixabargeld/list-spring-mvc/commit/a254cddc045c361e09b4103926e40a18d670a144

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/blixabargeld/list-spring-mvc/commit/a254cddc045c361e09b4103926e40a18d670a144

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/blixabargeld/list-spring-mvc/commit/a254cddc045c361e09b4103926e40a18d670a144

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/blixabargeld/list-spring-mvc/commit/a254cddc045c361e09b4103926e40a18d670a144

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/blixabargeld/list-spring-mvc/commit/a254cddc045c361e09b4103926e40a18d670a144

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/blixabargeld/list-spring-mvc/commit/a254cddc045c361e09b4103926e40a18d670a144

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/blixabargeld/list-spring-mvc/commit/a254cddc045c361e09b4103926e40a18d670a144

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/blixabargeld/list-spring-mvc/commit/a254cddc045c361e09b4103926e40a18d670a144

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/blixabargeld/list-spring-mvc/commit/a254cddc045c361e09b4103926e40a18d670a144

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=96&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/jeffsegal/mongo-rest/commit/ae2b962b555ba85519a98a4c69874dccd310f654

[COMMIT MESSAGE]:Various usability updates||
=========================================================

- @PreAuthorize("hasPermission('" + ROLE_PREFIX + "USER')")
+// @PreAuthorize("isAuthenticated() and hasPermission(#storyId, 'isDirector')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/dscoppelletti/programmerpower/commit/28a8beaaa4cffd28410d9662ae9b16ec739b9c45

[COMMIT MESSAGE]:Programmer Power WUI||close #20

Realizzata infrastruttura per sviluppare applicazioni Web:

 - Adottato Struts 2 come framework MVC.

 - Adottato Spring Security come framework per la sicurezza.

 - Adottato Jasig CAS per il SSO.

 - Adottato Restlet come framework RESTfull.

 - Adottati jQuery e jQueryUI come framework JavaScript.

**Programmer Power WUI** e' un'applicazione Web che offre un'interfaccia
utente *a schede* per l'accesso alle funzioni pubblicate da altre
applicazioni Web installate nello stesso AS.
L'infrastruttura realizzata consente agli sviluppatori di concentrarsi
sulle sole funzioni specifiche delle applicazioni Web demandando tutti
gli aspetti comuni ai servizi offerti dalla piattaforma.

Come applicazione Web di esempio per collaudare l'infrastruttura e'
stata realizzata **Web Site Services**: un'applicazione che offre
alcuni servizi di utilita' per un sito Web.
=========================================================

+ @PreAuthorize("hasRole('it.scoppelletti.admin')")
+ @PreAuthorize("hasRole('it.scoppelletti.admin')")
+ @PreAuthorize("hasRole('it.scoppelletti.admin')")
+ @PreAuthorize("hasRole('it.scoppelletti.admin')")
+ @PreAuthorize("hasRole('it.scoppelletti.admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/dscoppelletti/programmerpower/commit/28a8beaaa4cffd28410d9662ae9b16ec739b9c45

[COMMIT MESSAGE]:Programmer Power WUI||close #20

Realizzata infrastruttura per sviluppare applicazioni Web:

 - Adottato Struts 2 come framework MVC.

 - Adottato Spring Security come framework per la sicurezza.

 - Adottato Jasig CAS per il SSO.

 - Adottato Restlet come framework RESTfull.

 - Adottati jQuery e jQueryUI come framework JavaScript.

**Programmer Power WUI** e' un'applicazione Web che offre un'interfaccia
utente *a schede* per l'accesso alle funzioni pubblicate da altre
applicazioni Web installate nello stesso AS.
L'infrastruttura realizzata consente agli sviluppatori di concentrarsi
sulle sole funzioni specifiche delle applicazioni Web demandando tutti
gli aspetti comuni ai servizi offerti dalla piattaforma.

Come applicazione Web di esempio per collaudare l'infrastruttura e'
stata realizzata **Web Site Services**: un'applicazione che offre
alcuni servizi di utilita' per un sito Web.
=========================================================

+ @PreAuthorize("hasRole('it.scoppelletti.admin')")
+ @PreAuthorize("hasRole('it.scoppelletti.admin')")
+ @PreAuthorize("hasRole('it.scoppelletti.admin')")
+ @PreAuthorize("hasRole('it.scoppelletti.admin')")
+ @PreAuthorize("hasRole('it.scoppelletti.admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zion64/bss-webapp/commit/cfb8e97a40b747d619b47a687aad4091c6c7adc7

[COMMIT MESSAGE]:캬~~~~~~~||
=========================================================

+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/prosdl/simmft/commit/1d77ec8d5a52a50bdaaa50ef08a9b679aa94a05e

[COMMIT MESSAGE]:ReadFile implemented.||
=========================================================

+ @PreAuthorize("hasRole('mft:storage:read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/prosdl/simmft/commit/174bfc21413f80842b9548e7c3e4e2fd35f1afdb

[COMMIT MESSAGE]:Added StorageService.||
=========================================================

+ @PreAuthorize("hasRole('mft:storage:write')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/prosdl/simmft/commit/3a48e34858ffd1605ffdc29f4ac1c07097d34cf8

[COMMIT MESSAGE]:Integrated Spring Oauth2.||
=========================================================

+ @PreAuthorize("hasRole('mft:jobs:get')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/oduvan4ic/teza/commit/9436fbcaf452f6b973447afb32939120868a1ac2

[COMMIT MESSAGE]:add chat module||
=========================================================

+@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('ROLE_STUDENT')")
+ @PreAuthorize("hasRole('ROLE_STUDENT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/oduvan4ic/teza/commit/9436fbcaf452f6b973447afb32939120868a1ac2

[COMMIT MESSAGE]:add chat module||
=========================================================

+@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('ROLE_STUDENT')")
+ @PreAuthorize("hasRole('ROLE_STUDENT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/oduvan4ic/teza/commit/0237890c46683f9292ac7d66934ca27ed5c87b1e

[COMMIT MESSAGE]:Add lector fuctionality||
=========================================================

+ @PreAuthorize("hasRole('PRM_CAN_VIEW_STUDENTS') and hasRole('PRM_CAN_VIEW_GROUPS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/oduvan4ic/teza/commit/0c5f34ff8b29e7720201212c943018f38c8c7951

[COMMIT MESSAGE]:some changes :)||
=========================================================

+ @PreAuthorize("hasRole('PRM_CAN_VIEW_STUDENTS') and hasRole('PRM_CAN_VIEW_GROUPS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/oduvan4ic/teza/commit/9436fbcaf452f6b973447afb32939120868a1ac2

[COMMIT MESSAGE]:add chat module||
=========================================================

+@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('ROLE_STUDENT')")
+ @PreAuthorize("hasRole('ROLE_STUDENT')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=97&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/Turiko/Spring2/commit/d41dde17789f7d9c324aa732e6b1e9c0b923f425

[COMMIT MESSAGE]:min of meer werkend||
=========================================================

+ @PreAuthorize("hasRole('manager')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/attilacsanyi/pizzashop-security/commit/6c400a050d76077b9551f4f4dcac18f567473b1f

[COMMIT MESSAGE]:Apply security features with scenarios||
=========================================================

+ @PreAuthorize("!(authentication.name == 'tim'" +
+ @PreAuthorize("hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/attilacsanyi/pizzashop-security/commit/6c400a050d76077b9551f4f4dcac18f567473b1f

[COMMIT MESSAGE]:Apply security features with scenarios||
=========================================================

+ @PreAuthorize("!(authentication.name == 'tim'" +
+ @PreAuthorize("hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/attilacsanyi/pizzashop-security/commit/6c400a050d76077b9551f4f4dcac18f567473b1f

[COMMIT MESSAGE]:Apply security features with scenarios||
=========================================================

+ @PreAuthorize("!(authentication.name == 'tim'" +
+ @PreAuthorize("hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/loki2302/spring-angularjs-authentication-experiment/commit/8958c3c285b5458d9eae2cc38021a910b6dc49ca

[COMMIT MESSAGE]:Initial version||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/geiner/quipucamayoc2014/commit/8504bdd7a97e4200e1089a36e47f73a7c7b46b3b

[COMMIT MESSAGE]:subiendo proyecto||subiendo
=========================================================

+ @PreAuthorize("hasAnyRole('admin')")
+// @PreAuthorize("hasRole('user')")
+ @PreAuthorize("hasAnyRole('admin')")
+// @PreAuthorize("hasRole('userperfil')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ // @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('userperfil')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('userperfil')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasAuthority('userperfil')")
+ @PreAuthorize("hasRole('userperfil')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/geiner/quipucamayoc2014/commit/8504bdd7a97e4200e1089a36e47f73a7c7b46b3b

[COMMIT MESSAGE]:subiendo proyecto||subiendo
=========================================================

+ @PreAuthorize("hasAnyRole('admin')")
+// @PreAuthorize("hasRole('user')")
+ @PreAuthorize("hasAnyRole('admin')")
+// @PreAuthorize("hasRole('userperfil')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ // @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('userperfil')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('userperfil')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasAuthority('userperfil')")
+ @PreAuthorize("hasRole('userperfil')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/geiner/quipucamayoc2014/commit/8504bdd7a97e4200e1089a36e47f73a7c7b46b3b

[COMMIT MESSAGE]:subiendo proyecto||subiendo
=========================================================

+ @PreAuthorize("hasAnyRole('admin')")
+// @PreAuthorize("hasRole('user')")
+ @PreAuthorize("hasAnyRole('admin')")
+// @PreAuthorize("hasRole('userperfil')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ // @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('userperfil')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('userperfil')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasAuthority('userperfil')")
+ @PreAuthorize("hasRole('userperfil')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/geiner/quipucamayoc2014/commit/8504bdd7a97e4200e1089a36e47f73a7c7b46b3b

[COMMIT MESSAGE]:subiendo proyecto||subiendo
=========================================================

+ @PreAuthorize("hasAnyRole('admin')")
+// @PreAuthorize("hasRole('user')")
+ @PreAuthorize("hasAnyRole('admin')")
+// @PreAuthorize("hasRole('userperfil')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ // @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('userperfil')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('userperfil')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasAuthority('userperfil')")
+ @PreAuthorize("hasRole('userperfil')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=98&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

