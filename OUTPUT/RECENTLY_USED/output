
=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=67&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=68&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=69&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=70&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=71&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=72&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/8957db5ff2c0be81195416ca50a1323551ece6b0

[COMMIT MESSAGE]:object permission||
=========================================================

+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('groupAccess') and hasPermission(#group, 'groupAccess')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/d1c243c35e1f7d02a7efb06ad81f97d2e9a015c3

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/8957db5ff2c0be81195416ca50a1323551ece6b0

[COMMIT MESSAGE]:object permission||
=========================================================

+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('groupAccess') and hasPermission(#group, 'groupAccess')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/d1c243c35e1f7d02a7efb06ad81f97d2e9a015c3

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/8957db5ff2c0be81195416ca50a1323551ece6b0

[COMMIT MESSAGE]:object permission||
=========================================================

+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('groupAccess') and hasPermission(#group, 'groupAccess')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/d1c243c35e1f7d02a7efb06ad81f97d2e9a015c3

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/1966ee63632d7128fecd15880a8f208e42f60358

[COMMIT MESSAGE]:file system||
=========================================================

- @PreAuthorize("hasRole('groupAccess') and hasPermission(#group, 'groupAccess')")
+ @PreAuthorize("hasAnyRole('groupAccess', 'groupsManagement') and hasPermission(#group, 'groupAccess')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/8957db5ff2c0be81195416ca50a1323551ece6b0

[COMMIT MESSAGE]:object permission||
=========================================================

+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('groupAccess') and hasPermission(#group, 'groupAccess')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/d1c243c35e1f7d02a7efb06ad81f97d2e9a015c3

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=73&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/1966ee63632d7128fecd15880a8f208e42f60358

[COMMIT MESSAGE]:file system||
=========================================================

- @PreAuthorize("hasRole('groupAccess') and hasPermission(#group, 'groupAccess')")
+ @PreAuthorize("hasAnyRole('groupAccess', 'groupsManagement') and hasPermission(#group, 'groupAccess')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/8957db5ff2c0be81195416ca50a1323551ece6b0

[COMMIT MESSAGE]:object permission||
=========================================================

+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('groupAccess') and hasPermission(#group, 'groupAccess')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samuelbudusan/UserManagement/commit/d1c243c35e1f7d02a7efb06ad81f97d2e9a015c3

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('common')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('editAccounts')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('groupsManagement')")
+ @PreAuthorize("hasRole('common')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/valdy89/stavebniStroje/commit/a8b5b9fea0f1dec433c8c9ec91d029e985c4e30b

[COMMIT MESSAGE]:Access privilegies corrected||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/valdy89/stavebniStroje/commit/a8b5b9fea0f1dec433c8c9ec91d029e985c4e30b

[COMMIT MESSAGE]:Access privilegies corrected||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/valdy89/stavebniStroje/commit/c2f755e6dd1e7d3fb7b2d29a2a978a5c31d1e77e

[COMMIT MESSAGE]:Authorization fix - rent methods||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN','ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN','ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN','ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN','ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN','ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN','ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN','ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/loki2302/spring-pizza-experiment/commit/07ca1b50d4aa0a48ae1fad5563c0c70c9dbdd2e1

[COMMIT MESSAGE]:Extracted TicketLockController||
=========================================================

- @PreAuthorize("@ticketSecurityService.canRead(#userId, #ticketId)")
+ @PreAuthorize("@ticketLockService.userCanReadTicket(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")
+ @PreAuthorize("@ticketLockService.userCanWriteTicket(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")
+ @PreAuthorize("@ticketLockService.userCanWriteTicket(#userId, #ticketId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/loki2302/spring-pizza-experiment/commit/fa61f1eb62844b9c86ef1b7534753f347126078e

[COMMIT MESSAGE]:More cleanup||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+@PreAuthorize("isAuthenticated()")
- @PreAuthorize("@ticketSecurityService.canRead(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canRead(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/loki2302/spring-pizza-experiment/commit/a539720145022fc141750d79bad20d8b1cecb901

[COMMIT MESSAGE]:Trying to apply spring security||
=========================================================

+ @PreAuthorize("@ticketSecurityService.canRead(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canWrite(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canWrite(#ticketId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/loki2302/spring-pizza-experiment/commit/fa61f1eb62844b9c86ef1b7534753f347126078e

[COMMIT MESSAGE]:More cleanup||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+@PreAuthorize("isAuthenticated()")
- @PreAuthorize("@ticketSecurityService.canRead(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canRead(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/loki2302/spring-pizza-experiment/commit/07ca1b50d4aa0a48ae1fad5563c0c70c9dbdd2e1

[COMMIT MESSAGE]:Extracted TicketLockController||
=========================================================

- @PreAuthorize("@ticketSecurityService.canRead(#userId, #ticketId)")
+ @PreAuthorize("@ticketLockService.userCanReadTicket(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")
+ @PreAuthorize("@ticketLockService.userCanWriteTicket(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")
+ @PreAuthorize("@ticketLockService.userCanWriteTicket(#userId, #ticketId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/loki2302/spring-pizza-experiment/commit/fa61f1eb62844b9c86ef1b7534753f347126078e

[COMMIT MESSAGE]:More cleanup||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+@PreAuthorize("isAuthenticated()")
- @PreAuthorize("@ticketSecurityService.canRead(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canRead(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")
- @PreAuthorize("@ticketSecurityService.canWrite(#ticketId)")
+ @PreAuthorize("@ticketSecurityService.canWrite(#userId, #ticketId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/gsolecki/authserver/commit/67eb67b52e5420136544d34e94f02402d607ada1

[COMMIT MESSAGE]:Initializes a project||
=========================================================

+ @PreAuthorize("#oauth2.clientHasRole('ROLE_CLIENT')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=74&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/francarl/MonProvv/commit/b62eb676e8587da9394168bf09054f431d23e37f

[COMMIT MESSAGE]:Implementazione sicurezza||
=========================================================

+ //@PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#id, 'modifica')")
+ //@PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#id, 'modifica')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/francarl/MonProvv/commit/0a07573384e1de47294b2856bdf534f7023343ae

[COMMIT MESSAGE]:Gestione accesso notifiche da mail inviata||
=========================================================

+ @PreAuthorize("hasPermission(#id, 'accessoNotifica')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/francarl/MonProvv/commit/c720d8b71d8683ec15f25580a91be6b5297c8c91

[COMMIT MESSAGE]:fix varie dettaglio provvedimento||
=========================================================

+ //@PreAuthorize("hasPermission(#idAss, 'confermaAssegnazione')")
+ //@PreAuthorize("hasPermission(#idAss, 'confermaAssegnazione')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/francarl/MonProvv/commit/63e2d3c3b782a02416cd5d26e972543a2be2e3d2

[COMMIT MESSAGE]:Fix varie||
=========================================================

+ //@PreAuthorize("hasPermission(#idAss, 'confermaAssegnazione')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/francarl/MonProvv/commit/b62eb676e8587da9394168bf09054f431d23e37f

[COMMIT MESSAGE]:Implementazione sicurezza||
=========================================================

+ //@PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#id, 'modifica')")
+ //@PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#id, 'modifica')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/habuma/SpringREST/commit/528819bc4d74527164d0e32f4c3ade7a585939f6

[COMMIT MESSAGE]:Add SDR/OAuth example||
=========================================================

+ @PreAuthorize("#oauth2.hasScope('read')")
+ @PreAuthorize("#oauth2.hasScope('read')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/habuma/SpringREST/commit/da0706b5675491b9d9f0224b78eddfe4c92d4e92

[COMMIT MESSAGE]:Initial commit||
=========================================================

+ @PreAuthorize("#oauth2.hasScope('read')")
+ @PreAuthorize("#oauth2.hasScope('write')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/boeboe/apress-springblog/commit/6eb12d32629c94c50ab4b6fafe7a084fef7e0767

[COMMIT MESSAGE]:Added springblog code||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/MichaelWMerritt/TheAcreage_v2/commit/8e31833efaeff266ddcd683c35643bf19a79e310

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/MichaelWMerritt/TheAcreage_v2/commit/8e31833efaeff266ddcd683c35643bf19a79e310

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=75&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/MichaelWMerritt/TheAcreage_v2/commit/8e31833efaeff266ddcd683c35643bf19a79e310

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/OSCTeam/WebServer/commit/ed15f7aea8406e5276b9b386d35096b5af02714b

[COMMIT MESSAGE]:2014.11.30 in home // 입력 할때 vailidation 구성 // 사용자 정의 vaildator 작성 현재||여러개의 vaildation이 작동함. 기본적으로 style-'color' css에서 하는 vaildation 또는
bootstrap에서 하는 vaildation 등등.. jQuery validation을 통해서 하는 부분과 서버측 과
클라이언트에서 하는 vaildation ==> 종합적으로 정리해서 구성을 다시 해야할 필요가 있음.        38-41 번
video 까지. // 이외에 버튼 border round 와 tab에서 border round 그리고 입력 필드에서 도...
border round 설정 확인 필요.
=========================================================

+ @PreAuthorize("#blog.user.email == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/JonJon240/CustomerSupport/commit/5a7bce54ce7d9a9020d10bf117a9c3b072f00f12

[COMMIT MESSAGE]:Setup a working Project Structure. Basic Login Authentication and Signup||features exist.
=========================================================

+ @PreAuthorize("hasAuthority('VIEW_TICKETS')")
+ @PreAuthorize("hasAuthority('VIEW_TICKETS')")
+ @PreAuthorize("hasAuthority('VIEW_TICKET')")
+ @PreAuthorize("#ticket.id == 0 and hasAuthority('CREATE_TICKET')")
+ @PreAuthorize("(authentication.principal.equals(#ticket.customer) and " +
+ @PreAuthorize("hasAuthority('DELETE_TICKET')")
+ @PreAuthorize("hasAuthority('VIEW_COMMENTS')")
+ @PreAuthorize("#comment.id == 0 and hasAuthority('CREATE_COMMENT')")
+ @PreAuthorize("(authentication.principal.equals(#comment.customer) and " +
+ @PreAuthorize("hasAuthority('DELETE_COMMENT')")
+ @PreAuthorize("hasAuthority('VIEW_ATTACHMENT')")
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#message.user) and " +
+ @PreAuthorize("hasAuthority('VIEW_CHAT_REQUESTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/JonJon240/CustomerSupport/commit/5a7bce54ce7d9a9020d10bf117a9c3b072f00f12

[COMMIT MESSAGE]:Setup a working Project Structure. Basic Login Authentication and Signup||features exist.
=========================================================

+ @PreAuthorize("hasAuthority('VIEW_TICKETS')")
+ @PreAuthorize("hasAuthority('VIEW_TICKETS')")
+ @PreAuthorize("hasAuthority('VIEW_TICKET')")
+ @PreAuthorize("#ticket.id == 0 and hasAuthority('CREATE_TICKET')")
+ @PreAuthorize("(authentication.principal.equals(#ticket.customer) and " +
+ @PreAuthorize("hasAuthority('DELETE_TICKET')")
+ @PreAuthorize("hasAuthority('VIEW_COMMENTS')")
+ @PreAuthorize("#comment.id == 0 and hasAuthority('CREATE_COMMENT')")
+ @PreAuthorize("(authentication.principal.equals(#comment.customer) and " +
+ @PreAuthorize("hasAuthority('DELETE_COMMENT')")
+ @PreAuthorize("hasAuthority('VIEW_ATTACHMENT')")
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#message.user) and " +
+ @PreAuthorize("hasAuthority('VIEW_CHAT_REQUESTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/matejkv1/MusicLibraryPA165/commit/4d2bc5a2d6317b544e8f7af30b2d12267ef90662

[COMMIT MESSAGE]:Service authentication and authorization added. REST is working too.||
=========================================================

+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/matejkv1/MusicLibraryPA165/commit/4d2bc5a2d6317b544e8f7af30b2d12267ef90662

[COMMIT MESSAGE]:Service authentication and authorization added. REST is working too.||
=========================================================

+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/matejkv1/MusicLibraryPA165/commit/4d2bc5a2d6317b544e8f7af30b2d12267ef90662

[COMMIT MESSAGE]:Service authentication and authorization added. REST is working too.||
=========================================================

+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/matejkv1/MusicLibraryPA165/commit/4d2bc5a2d6317b544e8f7af30b2d12267ef90662

[COMMIT MESSAGE]:Service authentication and authorization added. REST is working too.||
=========================================================

+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/matejkv1/MusicLibraryPA165/commit/4d2bc5a2d6317b544e8f7af30b2d12267ef90662

[COMMIT MESSAGE]:Service authentication and authorization added. REST is working too.||
=========================================================

+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=76&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/linian365boy/lanyuan/commit/3bdc87c0940c3bba8f635790f1782aa3e3affa98

[COMMIT MESSAGE]:456||
=========================================================

+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/linian365boy/lanyuan/commit/3bdc87c0940c3bba8f635790f1782aa3e3affa98

[COMMIT MESSAGE]:456||
=========================================================

+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/gauravbrills/springtdd/commit/7e8812d45f08db8889b860a164501d7b4f2d3c8f

[COMMIT MESSAGE]:updated||
=========================================================

+ @PreAuthorize("authenticated")

=========================================================
[CODE-CHANGE-URL]:https://github.com/gauravbrills/springtdd/commit/bde3633d8ff3fbe63e723c7e7dae45dc0f8b1d67

[COMMIT MESSAGE]:secured http BASic||
=========================================================

- @PreAuthorize("authenticated")

=========================================================
[CODE-CHANGE-URL]:https://github.com/gauravbrills/springtdd/commit/cfa8073973a09f1fd4344d8032570d60a5f13a89

[COMMIT MESSAGE]:Method level security demo||
=========================================================

+ @PreAuthorize("authenticated")

=========================================================
[CODE-CHANGE-URL]:https://github.com/ese-unibe-ch/ese2014-team3/commit/6e6b2b9765b1bffcbb8151acb6874d11ba3ebd12

[COMMIT MESSAGE]:display of first picture in ad overview implemented||
=========================================================

- @PreAuthorize("#ad.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/ese-unibe-ch/ese2014-team3/commit/8120c3311dabe588d93639006823da0f4820eb0e

[COMMIT MESSAGE]:room4you skeleton with basic functionality for registration, login, ad||overview and placing new ads
=========================================================

+ @PreAuthorize("#ad.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/java8ee/web-app-skeleton/commit/59345d4d9b1e15d076df692c5d0948fc511ee4b2

[COMMIT MESSAGE]:Remove user functionality on user-list page||
=========================================================

- @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/java8ee/web-app-skeleton/commit/367305da9da53199e7befb70b13feac20fb8f403

[COMMIT MESSAGE]:Add user list and secure for register method with annotation||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/peterarsentev/Spring-Security-Acl-MongoDB/commit/18b8fc5fb4300c9fee927488a7bfe8c5c5ed5c8a

[COMMIT MESSAGE]:added the login page, client page, create client dialog||
=========================================================

+ @PreAuthorize("hasPermission(#t, 'create')")
+ @PreAuthorize("hasPermission(#t, 'update')")
+ @PreAuthorize("hasPermission(#t, 'delete')")
- @PreAuthorize("hasPermission(#pet, 'create')")
- @PreAuthorize("hasPermission(#pet, 'update')")
- @PreAuthorize("hasPermission(#pet, 'delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/junsmooth/wujinsuo/commit/b1db714c2313b93cc5c6805d579990589cb2a2a6

[COMMIT MESSAGE]:Allow @EnableGlobalMethodSecurity in a non webapp||Fixes gh-202
=========================================================

+ @PreAuthorize("true")
+ @PreAuthorize("false")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sugarlisu/sp_security/commit/ebd0d0aabc000ebb9aae3797ec2f4bdc041db5a9

[COMMIT MESSAGE]:spring_secuirty||
=========================================================

+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/sugarlisu/sp_security/commit/ebd0d0aabc000ebb9aae3797ec2f4bdc041db5a9

[COMMIT MESSAGE]:spring_secuirty||
=========================================================

+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=77&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/sugarlisu/sp_security/commit/ebd0d0aabc000ebb9aae3797ec2f4bdc041db5a9

[COMMIT MESSAGE]:spring_secuirty||
=========================================================

+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/nhidy/prospring3/commit/88df6b2936d6791509d264ac5f35c3b6533d13c0

[COMMIT MESSAGE]:No commit message||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/nhidy/prospring3/commit/bac8a0a60445f195d8e646eee6469ed6b287db6c

[COMMIT MESSAGE]:Version 1.0_2014/09/11||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/nhidy/prospring3/commit/e7fad650a21ce692f79d06ee9ad4521c1bdb3ad5

[COMMIT MESSAGE]:No commit message||
=========================================================

+ /* @PreAuthorize("isAuthenticated()") */

=========================================================
[CODE-CHANGE-URL]:https://github.com/aksndr/Asgn2-VideoLike/commit/42cbb98c4a5563a3cd25114d6a1c95ce3aaaab1f

[COMMIT MESSAGE]:complete||
=========================================================

+ @PreAuthorize("hasRole(user)")
+ @PreAuthorize("hasRole(user)")
+ @PreAuthorize("hasRole(user)")
+ @PreAuthorize("hasRole(user)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/aksndr/Asgn2-VideoLike/commit/172874ea56abf9d77f22a0960136d4805d4074e4

[COMMIT MESSAGE]:made first 4 tests||
=========================================================

+ @PreAuthorize("hasRole(user)")
+ @PreAuthorize("hasRole(user)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/OlegPahhomov/java-blog/commit/1ac4e8c4222f924124d26ab4e03dd4cdd4cee685

[COMMIT MESSAGE]:trying again||
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/partharamanujam/spring-rest/commit/95b062777e2dc4f9f895a7633892e0b98bb982df

[COMMIT MESSAGE]:added RBAC||
=========================================================

+ @PreAuthorize("hasRole('CREATE')")
+ @PreAuthorize("hasRole('READ')")
+ @PreAuthorize("hasRole('UPDATE')")
+ @PreAuthorize("hasRole('DELETE')")
+ @PreAuthorize("hasRole('PERMS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/blacknight1982/IDCloud/commit/6bd052b653231c302be51f8a188e65296759e86a

[COMMIT MESSAGE]:Items: 3, 6, 0, 5, 9, 2 …||0. Better UI, clean the project - following
0.1 Clean up the CSS file - following
1. Website published to http://idcloud.iego.net/
1.1 Synchronize Database - script on the dropbox
1.2 Check out the code on laptop - has problem
2. Social integration - fb integrated, twitter needs to be checked
3. Inspiration title and location seperation - not started
4. Image upload through nicEditor is 3rd party Web - done with self
developed image upload service - almost done
5. User sign up email sending  - Not Started
5.1 User sign up anti-robot protection - Not Started
6. Publish file upload - Not Started
7. Spring REST/oDATA - half way
8. WebSocket/HTTP Streaming for realtime communication -done!
9. Server side Cache enabling - Not Started
10. Apache access control - Done

New: REST service, image upload service, CORS filter, Add inspiration
authorizations, added inspiration briefing, added access log, fixed tag
bug

Signed-off-by: John Liu <blacknight1982@gmail.com>
=========================================================

- @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/blacknight1982/IDCloud/commit/4a1462f9ccc49294075f54613a3b4a143c83b9ed

[COMMIT MESSAGE]:Switched the online HTML editor from CKEditor to nicEditor||Implemented direct link to single inspiration
Better UI
Method level security implemented

Next Steps:
(Need consider again)
1. Publish the website
1.1 Synchronize Database
2. Social integration
3. iFrame/embed problem
3.1. iPAD scrolling doesn't work
4. Image upload through nicEditor is 3rd party Web
5. User sign up email sending
6.1 User sign up anti-robot protection
7. Study Spring REST/oDATA)
8. Enable scrolling framework only for inspiration table page, not
other page
9. Need a save button for publish inspiration
10. Cache enabling

Signed-off-by: John Liu <blacknight1982@gmail.com>
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zyw/autho/commit/cc863b60c362368503a860c877a203c96a63b986

[COMMIT MESSAGE]:初始化||
=========================================================

+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=78&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/zyw/autho/commit/cc863b60c362368503a860c877a203c96a63b986

[COMMIT MESSAGE]:初始化||
=========================================================

+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=79&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/alyahmed/Customer-Support-Application/commit/5a7bce54ce7d9a9020d10bf117a9c3b072f00f12

[COMMIT MESSAGE]:Setup a working Project Structure. Basic Login Authentication and Signup||features exist.
=========================================================

+ @PreAuthorize("hasAuthority('VIEW_TICKETS')")
+ @PreAuthorize("hasAuthority('VIEW_TICKETS')")
+ @PreAuthorize("hasAuthority('VIEW_TICKET')")
+ @PreAuthorize("#ticket.id == 0 and hasAuthority('CREATE_TICKET')")
+ @PreAuthorize("(authentication.principal.equals(#ticket.customer) and " +
+ @PreAuthorize("hasAuthority('DELETE_TICKET')")
+ @PreAuthorize("hasAuthority('VIEW_COMMENTS')")
+ @PreAuthorize("#comment.id == 0 and hasAuthority('CREATE_COMMENT')")
+ @PreAuthorize("(authentication.principal.equals(#comment.customer) and " +
+ @PreAuthorize("hasAuthority('DELETE_COMMENT')")
+ @PreAuthorize("hasAuthority('VIEW_ATTACHMENT')")
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#message.user) and " +
+ @PreAuthorize("hasAuthority('VIEW_CHAT_REQUESTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/alyahmed/Customer-Support-Application/commit/5a7bce54ce7d9a9020d10bf117a9c3b072f00f12

[COMMIT MESSAGE]:Setup a working Project Structure. Basic Login Authentication and Signup||features exist.
=========================================================

+ @PreAuthorize("hasAuthority('VIEW_TICKETS')")
+ @PreAuthorize("hasAuthority('VIEW_TICKETS')")
+ @PreAuthorize("hasAuthority('VIEW_TICKET')")
+ @PreAuthorize("#ticket.id == 0 and hasAuthority('CREATE_TICKET')")
+ @PreAuthorize("(authentication.principal.equals(#ticket.customer) and " +
+ @PreAuthorize("hasAuthority('DELETE_TICKET')")
+ @PreAuthorize("hasAuthority('VIEW_COMMENTS')")
+ @PreAuthorize("#comment.id == 0 and hasAuthority('CREATE_COMMENT')")
+ @PreAuthorize("(authentication.principal.equals(#comment.customer) and " +
+ @PreAuthorize("hasAuthority('DELETE_COMMENT')")
+ @PreAuthorize("hasAuthority('VIEW_ATTACHMENT')")
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#user) and " +
+ @PreAuthorize("authentication.principal.username.equals(#message.user) and " +
+ @PreAuthorize("hasAuthority('VIEW_CHAT_REQUESTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/andreas-schilling/spring-boot-thymeleaf-test/commit/ecab6bbef3c81a7ee6711cc966725674945cce5c

[COMMIT MESSAGE]:Initial commit.||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/wikibook/beginning-spring-4/commit/0eb2aae35620c3aa6295d50110ae622e0d1a7917

[COMMIT MESSAGE]:<시작하세요! 스프링 4 프로그래밍> 예제 코드||
=========================================================

+ @PreAuthorize("hasRole('ROLE_CUSTOMER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_CUSTOMER')")
+ @PreAuthorize("hasPermission(#fixedDepositId, 'sample.spring.chapter14.domain.FixedDepositDetails', read) or "
+ @PreAuthorize("hasPermission(#fixedDepositId, 'sample.spring.chapter14.domain.FixedDepositDetails', delete)")
+ @PreAuthorize("hasPermission(#fixedDepositDetails, write)")
+ @PreAuthorize("hasPermission(#fixedDepositId, 'sample.spring.chapter14.domain.FixedDepositDetails', write)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/markoradinovic/Vaadin4Spring-MVP-Sample-SpringSecurity/commit/d2d6f5eefa7c4276c4eb876a888554aa424ebc56

[COMMIT MESSAGE]:Initial import||
=========================================================

+@PreAuthorize("isFullyAuthenticated()") //do not allow Remember-Me

=========================================================
[CODE-CHANGE-URL]:https://github.com/Phaiwan/JavaCreate/commit/82f5c80dcda47f17858340c92b175dbb6e928f1e

[COMMIT MESSAGE]:java-blogs||
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/aelingold/sgsp-core/commit/b7dd764298bb313a55c505c2d2d51b431308e3e4

[COMMIT MESSAGE]:deshabitar usuarios, pagina error||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=80&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/aelingold/sgsp-core/commit/f685b5c84a47781610ef94a20d16dcbb949de542

[COMMIT MESSAGE]:resuelto pantalla baja usuarios||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/6e2e6c170c2705101929fee3a112c40b3673baee

[COMMIT MESSAGE]:- added roles/permissions||- added PreAuthorize to the service methods
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_USERROLE')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/psychic0111/eht_project/commit/f9bbbea6c6f9e8cb24d8dec1344345234089f101

[COMMIT MESSAGE]:first import||
=========================================================

+ @PreAuthorize("#oauth2.clientHasRole('ROLE_CLIENT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jackmew/spring-boot-security/commit/6ceffe8b9b826a52ed8e0dd097016482e1237b91

[COMMIT MESSAGE]:Method Security with Permission||
=========================================================

-@PreAuthorize("hasRole('ROLE_ADMIN')")
+//@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_LIST_GET')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_ADD_POST')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_EDIT_GET')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_EDIT_POST')")
+ @PreAuthorize("hasRole('CTRL_STRATEGY_DELETE_GET')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jackmew/spring-boot-security/commit/a637076ad1117662dbca26e1931dc39ac20f8b1f

[COMMIT MESSAGE]:add method level role based security to the controller||
=========================================================

+@PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/st-tu-dresden/videoshop/commit/f4b93519dd9d9fa29d397f6b8c18ecc3c38eb986

[COMMIT MESSAGE]:#1 - Extracted VideoShop example from Salespoint repository.||
=========================================================

+@PreAuthorize("hasRole('ROLE_CUSTOMER')")
+@PreAuthorize("hasRole('ROLE_BOSS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/st-tu-dresden/videoshop/commit/53226cc7e7e5654f94d3178433c334e798cbda15

[COMMIT MESSAGE]:#23 - Improve CartController to use new Cart API.||CartController now introduces the new Cart API about to be released with Salespoint 6.0 GA. We also moved to the Spring MVC way of working with the session. The cart.html template now also uses the price attribute of the object instance.

We now also generally allow authenticated users to use the CartController. Previously, other authenticated roles except ROLE_CUSTOMER (e.g. the boss user) had been denied access to it.

Related pull request: #24.
=========================================================

-@PreAuthorize("hasRole('ROLE_CUSTOMER')")
+@PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/st-tu-dresden/videoshop/commit/c1b36f3b9a29fcf32d3abf1dd880f978fa9ea0c0

[COMMIT MESSAGE]:#16 - Upgrade to Salespoint snapshots and switch from Basket to Cart.||
=========================================================

-@PreAuthorize("hasRole('ROLE_CUSTOMER')")
+@PreAuthorize("hasRole('ROLE_CUSTOMER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/3b8eb1e9f838584a115731658050d191444cc91e

[COMMIT MESSAGE]:Added API to restrict the retrieval of player based on whether a play…||…er had previously been selected for that team.
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/74680a26d419108677269e4271b3d494e8c48fd6

[COMMIT MESSAGE]:Added method to retrieve players by position and the fact that they a…||…re available.
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/5c7de407c2f8c034a8b08f4829f0e9b6d6cf269d

[COMMIT MESSAGE]:Secured get players by position endpoint.||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/0a2b3876c82afe56cd1bd9374e01c69b94b45ac2

[COMMIT MESSAGE]:Added Spring security for securing REST APIs.||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/3a9258d73cd0b45621d106e3cc53b0fd02f151c3

[COMMIT MESSAGE]:Changes for getting league table.||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/c9698235144f9472d68329ac0583fd4f2159e960

[COMMIT MESSAGE]:Changes for providing team summaries for all teams in a league.||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/1ca3e0c87b83a3bd3e6710d392643671cc85c025

[COMMIT MESSAGE]:Changes for team summary UI integration.||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/be05831d19c98733b3e548931066b8fbd560f3c2

[COMMIT MESSAGE]:Removed authorisation on start draft round endpoint.||
=========================================================

- @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/1c1364fbd6311b56636e111312f11bbb1011b326

[COMMIT MESSAGE]:Added API method for starting a draft round.||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/a125690c3e5b42d52f63ab2bd106beb7393325bd

[COMMIT MESSAGE]:Added draft round controller with functionality to submit bids.||
=========================================================

+ @PreAuthorize("isAuthenticated()")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=81&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/chrishern/fantasy-draft-api/commit/1ca3e0c87b83a3bd3e6710d392643671cc85c025

[COMMIT MESSAGE]:Changes for team summary UI integration.||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/alexander-komlik/library-training-project/commit/2ed20f3fe6aa4d939107ab80fcd3476113d8ed36

[COMMIT MESSAGE]:commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isAuthorOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isAuthorOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ANONYMOUS')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/alexander-komlik/library-training-project/commit/2ed20f3fe6aa4d939107ab80fcd3476113d8ed36

[COMMIT MESSAGE]:commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isAuthorOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isAuthorOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ANONYMOUS')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/alexander-komlik/library-training-project/commit/2ed20f3fe6aa4d939107ab80fcd3476113d8ed36

[COMMIT MESSAGE]:commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isAuthorOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isAuthorOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_MODERATOR') or (hasRole('ROLE_USER') and @ownershipCheck.isBookOwner(#id, principal))")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ANONYMOUS')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/IrinaMakarushko/testingGit/commit/7724348f54313eb9dc097c40a8f9e1db91317bf0

[COMMIT MESSAGE]:First commit||
=========================================================

+@PreAuthorize("hasAnyRole('USER', 'ADMIN')")
+@PreAuthorize("hasAnyRole('USER', 'ADMIN')")
+@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/IrinaMakarushko/testingGit/commit/7724348f54313eb9dc097c40a8f9e1db91317bf0

[COMMIT MESSAGE]:First commit||
=========================================================

+@PreAuthorize("hasAnyRole('USER', 'ADMIN')")
+@PreAuthorize("hasAnyRole('USER', 'ADMIN')")
+@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/IrinaMakarushko/testingGit/commit/7724348f54313eb9dc097c40a8f9e1db91317bf0

[COMMIT MESSAGE]:First commit||
=========================================================

+@PreAuthorize("hasAnyRole('USER', 'ADMIN')")
+@PreAuthorize("hasAnyRole('USER', 'ADMIN')")
+@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/57be6eac04f92372d9c1b886816967db87fe1547

[COMMIT MESSAGE]:TRACKR-201 - Contact persons links are updateable/deletable with no s…||…ecurity

Secured the links, company is now updateable by supervisors and not deletable.
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR')")
+ @PreAuthorize("denyAll()")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=82&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/d61f2a7574deb346d7b60cbd293cc546e126c269

[COMMIT MESSAGE]:TRACKR-163 - Add revenue reporting||Modified the data to be more interesting
Added a date converter for milliseconds
Added function to find all invoices between to dates
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/d526285eeb45c2b583e3d116f481fcff2956d9c1

[COMMIT MESSAGE]:TRACKR-104 - Search for an invoice by identifier||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/c8d371fd90e0a07c46a1bb66fb7e4134f3beb9fd

[COMMIT MESSAGE]:TRACKR-106 - List all invoices||Added security for GET methods.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/4257681a13b9ead6715a84e97caefcb776417390

[COMMIT MESSAGE]:TRACKR-101 - Add invoice||Added all base classes and basic tests for invoices.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/f22a0134a35ff84fdbc4c91764330a6791a9118d

[COMMIT MESSAGE]:TRACKR-200 - Calculate due date for invoice||Calculated due date from timeForPayment when a new invoice is created via the rest service.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/42868079b8e9550a249caebd69abea6ee19a5ccb

[COMMIT MESSAGE]:TRACKR-103 - Delete an existing invoice||Invocies are now deletable.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/4257681a13b9ead6715a84e97caefcb776417390

[COMMIT MESSAGE]:TRACKR-101 - Add invoice||Added all base classes and basic tests for invoices.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/c6320f4ab6055a01eed26977d147eec9fdc066f4

[COMMIT MESSAGE]:TRACKR-164 - Add vacation reporting||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/04e9d813a42a5879f5a44dc511fa39e6219de5e3

[COMMIT MESSAGE]:TRACKR-158 - Supervisors can approve their own vacation requests via …||…the API

Replaced @PostAuthorize with @PreAuthorize and based the service on vacation requests instead of ids.
Also implemented a generic way for new conversion services from string (id) to our entities.
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/0029f4302eb1c762e4e17da4482158dedb2c3f62

[COMMIT MESSAGE]:TRACKR-55 - Approve and reject vacation requests||Added reject web method for vacation requests.
Added new status field to the frontend
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/36280f38f228136a375f3d0ca984cf74de7d8936

[COMMIT MESSAGE]:TRACKR-55 - Approve and reject vacation requests||Separated web and other beans configurations for the API
Wrote a vacation request service
Wrote a vacation request controller
+ Tests
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/cf84a9e732d66d4fc0b51afcb4164c87fd81de3f

[COMMIT MESSAGE]:TRACKR-105 - Mark invoice as paid||Invoices can now be marked as paid.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e0c9ab7ed6615e9a60cd2c88a6806274ccf8c3d3

[COMMIT MESSAGE]:TRACKR-123 - Implement address book||Added an address book controller.
=========================================================

+ @PreAuthorize("hasRole('ROLE_EMPLOYEE')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=83&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/semicolok/spring-java-cofig-example/commit/bc3463ee5e118d15278f5493d54a0dcb43e8b65a

[COMMIT MESSAGE]:create repository||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')") // @EnableGlovalMethodSecurity

=========================================================
[CODE-CHANGE-URL]:https://github.com/astarring/cdc-activity/commit/747f15c51f28a125f26ea0136500c91cd2ea1435

[COMMIT MESSAGE]:init||
=========================================================

+ // @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/0d8bcf3c8fbf9bf04678074d8ad00ad770ecaff8

[COMMIT MESSAGE]:list page||
=========================================================

+ @PreAuthorize("hasRole('user.list')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/e52bfe62782b98b078cc380888e04e6572ed44b0

[COMMIT MESSAGE]:clean up code and db||
=========================================================

- @PreAuthorize("(hasRole('advise.update') and #dto.id != null) or (hasRole('advise.add') and #dto.id == null)")
- @PreAuthorize("hasRole('advise.delete')")
- @PreAuthorize("hasRole('advise.list')")
- @PreAuthorize("(hasRole('adviseReply.update') and #dto.id != null) or (hasRole('adviseReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('adviseReply.delete')")
- @PreAuthorize("hasRole('adviseReply.list')")
- @PreAuthorize("(hasRole('article.update') and #dto.id != null) or (hasRole('article.add') and #dto.id == null)")
- @PreAuthorize("hasRole('article.delete')")
- @PreAuthorize("hasRole('article.list')")
- @PreAuthorize("(hasRole('building.update') and #dto.id != null) or (hasRole('building.add') and #dto.id == null)")
- @PreAuthorize("hasRole('building.delete')")
- @PreAuthorize("hasRole('building.list')")
- @PreAuthorize("(hasRole('category.update') and #dto.id != null) or (hasRole('category.add') and #dto.id == null)")
- @PreAuthorize("hasRole('category.delete')")
- @PreAuthorize("hasRole('category.list')")
- @PreAuthorize("(hasRole('communityAddApply.update') and #dto.id != null) or (hasRole('communityAddApply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('communityAddApply.delete')")
- @PreAuthorize("hasRole('communityAddApply.list')")
- @PreAuthorize("(hasRole('community.update') and #dto.id != null) or (hasRole('community.add') and #dto.id == null)")
- @PreAuthorize("hasRole('community.delete')")
- @PreAuthorize("hasRole('community.list')")
- @PreAuthorize("(hasRole('convenience.update') and #dto.id != null) or (hasRole('convenience.add') and #dto.id == null)")
- @PreAuthorize("hasRole('convenience.delete')")
- @PreAuthorize("hasRole('convenience.list')")
- @PreAuthorize("(hasRole('doorplate.update') and #dto.id != null) or (hasRole('doorplate.add') and #dto.id == null)")
- @PreAuthorize("hasRole('doorplate.delete')")
- @PreAuthorize("hasRole('doorplate.list')")
- @PreAuthorize("(hasRole('feeItem.update') and #dto.id != null) or (hasRole('feeItem.add') and #dto.id == null)")
- @PreAuthorize("hasRole('feeItem.delete')")
- @PreAuthorize("hasRole('feeItem.list')")
- @PreAuthorize("(hasRole('houseKeeping.update') and #dto.id != null) or (hasRole('houseKeeping.add') and #dto.id == null)")
- @PreAuthorize("hasRole('houseKeeping.delete')")
- @PreAuthorize("hasRole('houseKeeping.list')")
- @PreAuthorize("(hasRole('keyword.update') and #dto.id != null) or (hasRole('keyword.add') and #dto.id == null)")
- @PreAuthorize("hasRole('keyword.delete')")
- @PreAuthorize("hasRole('keyword.list')")
- @PreAuthorize("(hasRole('nature.update') and #dto.id != null) or (hasRole('nature.add') and #dto.id == null)")
- @PreAuthorize("hasRole('nature.delete')")
- @PreAuthorize("hasRole('nature.list')")
- @PreAuthorize("(hasRole('noticeReply.update') and #dto.id != null) or (hasRole('noticeReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('noticeReply.delete')")
- @PreAuthorize("hasRole('noticeReply.list')")
- @PreAuthorize("(hasRole('order.update') and #dto.id != null) or (hasRole('order.add') and #dto.id == null)")
- @PreAuthorize("hasRole('order.delete')")
- @PreAuthorize("hasRole('order.list')")
- @PreAuthorize("(hasRole('orderItem.update') and #dto.id != null) or (hasRole('orderItem.add') and #dto.id == null)")
- @PreAuthorize("hasRole('orderItem.delete')")
- @PreAuthorize("hasRole('orderItem.list')")
- @PreAuthorize("(hasRole('payRecord.update') and #dto.id != null) or (hasRole('payRecord.add') and #dto.id == null)")
- @PreAuthorize("hasRole('payRecord.delete')")
- @PreAuthorize("hasRole('payRecord.list')")
- @PreAuthorize("(hasRole('product.update') and #dto.id != null) or (hasRole('product.add') and #dto.id == null)")
- @PreAuthorize("hasRole('product.delete')")
- @PreAuthorize("hasRole('product.list')")
- @PreAuthorize("(hasRole('question.update') and #dto.id != null) or (hasRole('question.add') and #dto.id == null)")
- @PreAuthorize("hasRole('question.delete')")
- @PreAuthorize("hasRole('question.list')")
- @PreAuthorize("(hasRole('questionReply.update') and #dto.id != null) or (hasRole('questionReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('questionReply.delete')")
- @PreAuthorize("hasRole('questionReply.list')")
- @PreAuthorize("(hasRole('repair.update') and #dto.id != null) or (hasRole('repair.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repair.delete')")
- @PreAuthorize("hasRole('repair.list')")
- @PreAuthorize("(hasRole('repairHistory.update') and #dto.id != null) or (hasRole('repairHistory.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repairHistory.delete')")
- @PreAuthorize("hasRole('repairHistory.list')")
- @PreAuthorize("(hasRole('repairReply.update') and #dto.id != null) or (hasRole('repairReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repairReply.delete')")
- @PreAuthorize("hasRole('repairReply.list')")
- @PreAuthorize("(hasRole('reply.update') and #dto.id != null) or (hasRole('reply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('reply.delete')")
- @PreAuthorize("hasRole('reply.list')")
- @PreAuthorize("(hasRole('serviceType.update') and #dto.id != null) or (hasRole('serviceType.add') and #dto.id == null)")
- @PreAuthorize("hasRole('serviceType.delete')")
- @PreAuthorize("hasRole('serviceType.list')")
- @PreAuthorize("(hasRole('store.update') and #dto.id != null) or (hasRole('store.add') and #dto.id == null)")
- @PreAuthorize("hasRole('store.delete')")
- @PreAuthorize("hasRole('store.list')")
- @PreAuthorize("(hasRole('systemMessage.update') and #dto.id != null) or (hasRole('systemMessage.add') and #dto.id == null)")
- @PreAuthorize("hasRole('systemMessage.delete')")
- @PreAuthorize("hasRole('systemMessage.list')")
- @PreAuthorize("(hasRole('topic.update') and #dto.id != null) or (hasRole('topic.add') and #dto.id == null)")
- @PreAuthorize("hasRole('topic.delete')")
- @PreAuthorize("hasRole('topic.list')")
- @PreAuthorize("(hasRole('topicReply.update') and #dto.id != null) or (hasRole('topicReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('topicReply.delete')")
- @PreAuthorize("hasRole('topicReply.list')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/e52bfe62782b98b078cc380888e04e6572ed44b0

[COMMIT MESSAGE]:clean up code and db||
=========================================================

- @PreAuthorize("(hasRole('advise.update') and #dto.id != null) or (hasRole('advise.add') and #dto.id == null)")
- @PreAuthorize("hasRole('advise.delete')")
- @PreAuthorize("hasRole('advise.list')")
- @PreAuthorize("(hasRole('adviseReply.update') and #dto.id != null) or (hasRole('adviseReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('adviseReply.delete')")
- @PreAuthorize("hasRole('adviseReply.list')")
- @PreAuthorize("(hasRole('article.update') and #dto.id != null) or (hasRole('article.add') and #dto.id == null)")
- @PreAuthorize("hasRole('article.delete')")
- @PreAuthorize("hasRole('article.list')")
- @PreAuthorize("(hasRole('building.update') and #dto.id != null) or (hasRole('building.add') and #dto.id == null)")
- @PreAuthorize("hasRole('building.delete')")
- @PreAuthorize("hasRole('building.list')")
- @PreAuthorize("(hasRole('category.update') and #dto.id != null) or (hasRole('category.add') and #dto.id == null)")
- @PreAuthorize("hasRole('category.delete')")
- @PreAuthorize("hasRole('category.list')")
- @PreAuthorize("(hasRole('communityAddApply.update') and #dto.id != null) or (hasRole('communityAddApply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('communityAddApply.delete')")
- @PreAuthorize("hasRole('communityAddApply.list')")
- @PreAuthorize("(hasRole('community.update') and #dto.id != null) or (hasRole('community.add') and #dto.id == null)")
- @PreAuthorize("hasRole('community.delete')")
- @PreAuthorize("hasRole('community.list')")
- @PreAuthorize("(hasRole('convenience.update') and #dto.id != null) or (hasRole('convenience.add') and #dto.id == null)")
- @PreAuthorize("hasRole('convenience.delete')")
- @PreAuthorize("hasRole('convenience.list')")
- @PreAuthorize("(hasRole('doorplate.update') and #dto.id != null) or (hasRole('doorplate.add') and #dto.id == null)")
- @PreAuthorize("hasRole('doorplate.delete')")
- @PreAuthorize("hasRole('doorplate.list')")
- @PreAuthorize("(hasRole('feeItem.update') and #dto.id != null) or (hasRole('feeItem.add') and #dto.id == null)")
- @PreAuthorize("hasRole('feeItem.delete')")
- @PreAuthorize("hasRole('feeItem.list')")
- @PreAuthorize("(hasRole('houseKeeping.update') and #dto.id != null) or (hasRole('houseKeeping.add') and #dto.id == null)")
- @PreAuthorize("hasRole('houseKeeping.delete')")
- @PreAuthorize("hasRole('houseKeeping.list')")
- @PreAuthorize("(hasRole('keyword.update') and #dto.id != null) or (hasRole('keyword.add') and #dto.id == null)")
- @PreAuthorize("hasRole('keyword.delete')")
- @PreAuthorize("hasRole('keyword.list')")
- @PreAuthorize("(hasRole('nature.update') and #dto.id != null) or (hasRole('nature.add') and #dto.id == null)")
- @PreAuthorize("hasRole('nature.delete')")
- @PreAuthorize("hasRole('nature.list')")
- @PreAuthorize("(hasRole('noticeReply.update') and #dto.id != null) or (hasRole('noticeReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('noticeReply.delete')")
- @PreAuthorize("hasRole('noticeReply.list')")
- @PreAuthorize("(hasRole('order.update') and #dto.id != null) or (hasRole('order.add') and #dto.id == null)")
- @PreAuthorize("hasRole('order.delete')")
- @PreAuthorize("hasRole('order.list')")
- @PreAuthorize("(hasRole('orderItem.update') and #dto.id != null) or (hasRole('orderItem.add') and #dto.id == null)")
- @PreAuthorize("hasRole('orderItem.delete')")
- @PreAuthorize("hasRole('orderItem.list')")
- @PreAuthorize("(hasRole('payRecord.update') and #dto.id != null) or (hasRole('payRecord.add') and #dto.id == null)")
- @PreAuthorize("hasRole('payRecord.delete')")
- @PreAuthorize("hasRole('payRecord.list')")
- @PreAuthorize("(hasRole('product.update') and #dto.id != null) or (hasRole('product.add') and #dto.id == null)")
- @PreAuthorize("hasRole('product.delete')")
- @PreAuthorize("hasRole('product.list')")
- @PreAuthorize("(hasRole('question.update') and #dto.id != null) or (hasRole('question.add') and #dto.id == null)")
- @PreAuthorize("hasRole('question.delete')")
- @PreAuthorize("hasRole('question.list')")
- @PreAuthorize("(hasRole('questionReply.update') and #dto.id != null) or (hasRole('questionReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('questionReply.delete')")
- @PreAuthorize("hasRole('questionReply.list')")
- @PreAuthorize("(hasRole('repair.update') and #dto.id != null) or (hasRole('repair.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repair.delete')")
- @PreAuthorize("hasRole('repair.list')")
- @PreAuthorize("(hasRole('repairHistory.update') and #dto.id != null) or (hasRole('repairHistory.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repairHistory.delete')")
- @PreAuthorize("hasRole('repairHistory.list')")
- @PreAuthorize("(hasRole('repairReply.update') and #dto.id != null) or (hasRole('repairReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repairReply.delete')")
- @PreAuthorize("hasRole('repairReply.list')")
- @PreAuthorize("(hasRole('reply.update') and #dto.id != null) or (hasRole('reply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('reply.delete')")
- @PreAuthorize("hasRole('reply.list')")
- @PreAuthorize("(hasRole('serviceType.update') and #dto.id != null) or (hasRole('serviceType.add') and #dto.id == null)")
- @PreAuthorize("hasRole('serviceType.delete')")
- @PreAuthorize("hasRole('serviceType.list')")
- @PreAuthorize("(hasRole('store.update') and #dto.id != null) or (hasRole('store.add') and #dto.id == null)")
- @PreAuthorize("hasRole('store.delete')")
- @PreAuthorize("hasRole('store.list')")
- @PreAuthorize("(hasRole('systemMessage.update') and #dto.id != null) or (hasRole('systemMessage.add') and #dto.id == null)")
- @PreAuthorize("hasRole('systemMessage.delete')")
- @PreAuthorize("hasRole('systemMessage.list')")
- @PreAuthorize("(hasRole('topic.update') and #dto.id != null) or (hasRole('topic.add') and #dto.id == null)")
- @PreAuthorize("hasRole('topic.delete')")
- @PreAuthorize("hasRole('topic.list')")
- @PreAuthorize("(hasRole('topicReply.update') and #dto.id != null) or (hasRole('topicReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('topicReply.delete')")
- @PreAuthorize("hasRole('topicReply.list')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=84&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Osais/java-blog-aggregator/commit/79d02f54724c8219baab8565693bfaa4fd9959aa

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/GavrikGal/display/commit/f3f89f6ece9ec4888bd69286c5d8e42b1c3b78e0

[COMMIT MESSAGE]:ls1710, начал документировать код||
=========================================================

- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/GavrikGal/display/commit/8ec324ec8349f60b6c3a53c6f6c4b8c1072887b2

[COMMIT MESSAGE]:ls1710, добавлены все классы старого проекта, теперь надо все запустить||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=85&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/e52bfe62782b98b078cc380888e04e6572ed44b0

[COMMIT MESSAGE]:clean up code and db||
=========================================================

- @PreAuthorize("(hasRole('advise.update') and #dto.id != null) or (hasRole('advise.add') and #dto.id == null)")
- @PreAuthorize("hasRole('advise.delete')")
- @PreAuthorize("hasRole('advise.list')")
- @PreAuthorize("(hasRole('adviseReply.update') and #dto.id != null) or (hasRole('adviseReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('adviseReply.delete')")
- @PreAuthorize("hasRole('adviseReply.list')")
- @PreAuthorize("(hasRole('article.update') and #dto.id != null) or (hasRole('article.add') and #dto.id == null)")
- @PreAuthorize("hasRole('article.delete')")
- @PreAuthorize("hasRole('article.list')")
- @PreAuthorize("(hasRole('building.update') and #dto.id != null) or (hasRole('building.add') and #dto.id == null)")
- @PreAuthorize("hasRole('building.delete')")
- @PreAuthorize("hasRole('building.list')")
- @PreAuthorize("(hasRole('category.update') and #dto.id != null) or (hasRole('category.add') and #dto.id == null)")
- @PreAuthorize("hasRole('category.delete')")
- @PreAuthorize("hasRole('category.list')")
- @PreAuthorize("(hasRole('communityAddApply.update') and #dto.id != null) or (hasRole('communityAddApply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('communityAddApply.delete')")
- @PreAuthorize("hasRole('communityAddApply.list')")
- @PreAuthorize("(hasRole('community.update') and #dto.id != null) or (hasRole('community.add') and #dto.id == null)")
- @PreAuthorize("hasRole('community.delete')")
- @PreAuthorize("hasRole('community.list')")
- @PreAuthorize("(hasRole('convenience.update') and #dto.id != null) or (hasRole('convenience.add') and #dto.id == null)")
- @PreAuthorize("hasRole('convenience.delete')")
- @PreAuthorize("hasRole('convenience.list')")
- @PreAuthorize("(hasRole('doorplate.update') and #dto.id != null) or (hasRole('doorplate.add') and #dto.id == null)")
- @PreAuthorize("hasRole('doorplate.delete')")
- @PreAuthorize("hasRole('doorplate.list')")
- @PreAuthorize("(hasRole('feeItem.update') and #dto.id != null) or (hasRole('feeItem.add') and #dto.id == null)")
- @PreAuthorize("hasRole('feeItem.delete')")
- @PreAuthorize("hasRole('feeItem.list')")
- @PreAuthorize("(hasRole('houseKeeping.update') and #dto.id != null) or (hasRole('houseKeeping.add') and #dto.id == null)")
- @PreAuthorize("hasRole('houseKeeping.delete')")
- @PreAuthorize("hasRole('houseKeeping.list')")
- @PreAuthorize("(hasRole('keyword.update') and #dto.id != null) or (hasRole('keyword.add') and #dto.id == null)")
- @PreAuthorize("hasRole('keyword.delete')")
- @PreAuthorize("hasRole('keyword.list')")
- @PreAuthorize("(hasRole('nature.update') and #dto.id != null) or (hasRole('nature.add') and #dto.id == null)")
- @PreAuthorize("hasRole('nature.delete')")
- @PreAuthorize("hasRole('nature.list')")
- @PreAuthorize("(hasRole('noticeReply.update') and #dto.id != null) or (hasRole('noticeReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('noticeReply.delete')")
- @PreAuthorize("hasRole('noticeReply.list')")
- @PreAuthorize("(hasRole('order.update') and #dto.id != null) or (hasRole('order.add') and #dto.id == null)")
- @PreAuthorize("hasRole('order.delete')")
- @PreAuthorize("hasRole('order.list')")
- @PreAuthorize("(hasRole('orderItem.update') and #dto.id != null) or (hasRole('orderItem.add') and #dto.id == null)")
- @PreAuthorize("hasRole('orderItem.delete')")
- @PreAuthorize("hasRole('orderItem.list')")
- @PreAuthorize("(hasRole('payRecord.update') and #dto.id != null) or (hasRole('payRecord.add') and #dto.id == null)")
- @PreAuthorize("hasRole('payRecord.delete')")
- @PreAuthorize("hasRole('payRecord.list')")
- @PreAuthorize("(hasRole('product.update') and #dto.id != null) or (hasRole('product.add') and #dto.id == null)")
- @PreAuthorize("hasRole('product.delete')")
- @PreAuthorize("hasRole('product.list')")
- @PreAuthorize("(hasRole('question.update') and #dto.id != null) or (hasRole('question.add') and #dto.id == null)")
- @PreAuthorize("hasRole('question.delete')")
- @PreAuthorize("hasRole('question.list')")
- @PreAuthorize("(hasRole('questionReply.update') and #dto.id != null) or (hasRole('questionReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('questionReply.delete')")
- @PreAuthorize("hasRole('questionReply.list')")
- @PreAuthorize("(hasRole('repair.update') and #dto.id != null) or (hasRole('repair.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repair.delete')")
- @PreAuthorize("hasRole('repair.list')")
- @PreAuthorize("(hasRole('repairHistory.update') and #dto.id != null) or (hasRole('repairHistory.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repairHistory.delete')")
- @PreAuthorize("hasRole('repairHistory.list')")
- @PreAuthorize("(hasRole('repairReply.update') and #dto.id != null) or (hasRole('repairReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('repairReply.delete')")
- @PreAuthorize("hasRole('repairReply.list')")
- @PreAuthorize("(hasRole('reply.update') and #dto.id != null) or (hasRole('reply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('reply.delete')")
- @PreAuthorize("hasRole('reply.list')")
- @PreAuthorize("(hasRole('serviceType.update') and #dto.id != null) or (hasRole('serviceType.add') and #dto.id == null)")
- @PreAuthorize("hasRole('serviceType.delete')")
- @PreAuthorize("hasRole('serviceType.list')")
- @PreAuthorize("(hasRole('store.update') and #dto.id != null) or (hasRole('store.add') and #dto.id == null)")
- @PreAuthorize("hasRole('store.delete')")
- @PreAuthorize("hasRole('store.list')")
- @PreAuthorize("(hasRole('systemMessage.update') and #dto.id != null) or (hasRole('systemMessage.add') and #dto.id == null)")
- @PreAuthorize("hasRole('systemMessage.delete')")
- @PreAuthorize("hasRole('systemMessage.list')")
- @PreAuthorize("(hasRole('topic.update') and #dto.id != null) or (hasRole('topic.add') and #dto.id == null)")
- @PreAuthorize("hasRole('topic.delete')")
- @PreAuthorize("hasRole('topic.list')")
- @PreAuthorize("(hasRole('topicReply.update') and #dto.id != null) or (hasRole('topicReply.add') and #dto.id == null)")
- @PreAuthorize("hasRole('topicReply.delete')")
- @PreAuthorize("hasRole('topicReply.list')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Osais/java-blog-aggregator/commit/79d02f54724c8219baab8565693bfaa4fd9959aa

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/GavrikGal/display/commit/f3f89f6ece9ec4888bd69286c5d8e42b1c3b78e0

[COMMIT MESSAGE]:ls1710, начал документировать код||
=========================================================

- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/GavrikGal/display/commit/8ec324ec8349f60b6c3a53c6f6c4b8c1072887b2

[COMMIT MESSAGE]:ls1710, добавлены все классы старого проекта, теперь надо все запустить||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=86&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/hermeswaldemarin/testmaker/commit/b9b11d224e428516db624b43091116203eefc167

[COMMIT MESSAGE]:Implementing new functionalities||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/hermeswaldemarin/testmaker/commit/b9b11d224e428516db624b43091116203eefc167

[COMMIT MESSAGE]:Implementing new functionalities||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/hermeswaldemarin/testmaker/commit/fb6a1deffdced8cb6fe69cb60fe7baf2943c96b0

[COMMIT MESSAGE]:recreating package||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/hermeswaldemarin/testmaker/commit/49927e9958469bae285f9dc043aa9fd9092d17c4

[COMMIT MESSAGE]:removing packages||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/hermeswaldemarin/testmaker/commit/b9b11d224e428516db624b43091116203eefc167

[COMMIT MESSAGE]:Implementing new functionalities||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/hermeswaldemarin/testmaker/commit/b9b11d224e428516db624b43091116203eefc167

[COMMIT MESSAGE]:Implementing new functionalities||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/e70e23173d9dc51a8d9a6cd3dc30220723f9abd7

[COMMIT MESSAGE]:change password implementation||expose image set management
fix invalid objectId exception if imageId is not a valid ObjectId
=========================================================

+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/d073dff9cbfc88a1063b2704665ec11262bab940

[COMMIT MESSAGE]:add a DaoTemplate. refactor shop service||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/8296f4e1aaa98b8b0851054195186281d9fa42cd

[COMMIT MESSAGE]:enhance user management and enhance authentication||
=========================================================

+ @PreAuthorize("hasPermission('SYS','USER_ACCOUNT_EDIT')")
+ @PreAuthorize("hasPermission('SYS','USER_ACCOUNT_EDIT')")
+ @PreAuthorize("hasPermission('SYS','USER_ACCOUNT_EDIT')")
+ @PreAuthorize("hasPermission('SYS','USER_ACCOUNT_EDIT')")
- @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL') ")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/fd2aaff8c66b87a7f7224cbe3bd7dfe05833e4b3

[COMMIT MESSAGE]:enable add shop request/approve work flow||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/16c0bbf1f9599b558f7266de7ebeccd29996f1b7

[COMMIT MESSAGE]:move permission control from rs layer to service layer||
=========================================================

- @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
- @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/991a1b8974df6453beaf82cca66a0a76780ffd70

[COMMIT MESSAGE]:add request approve flow for creating speciality||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/8052d925a8751e5004eb9bbf5ba547d36c561c62

[COMMIT MESSAGE]:rename app package name||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL') ")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/e70e23173d9dc51a8d9a6cd3dc30220723f9abd7

[COMMIT MESSAGE]:change password implementation||expose image set management
fix invalid objectId exception if imageId is not a valid ObjectId
=========================================================

+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/d073dff9cbfc88a1063b2704665ec11262bab940

[COMMIT MESSAGE]:add a DaoTemplate. refactor shop service||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/aefdd34b7f4d735be728188737b5d25b5e3a8afe

[COMMIT MESSAGE]:use role name as id||add a new role to comibine security admin and speciality admin
=========================================================

- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/fd2aaff8c66b87a7f7224cbe3bd7dfe05833e4b3

[COMMIT MESSAGE]:enable add shop request/approve work flow||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/e091d2c1b328ce84c9fd5f21a487ef643ff88956

[COMMIT MESSAGE]:fix morphia multiple data store issue||expose create shop interface
adjust security configuration
=========================================================

- @PreAuthorize("hasRole('USER_LIST_READ')")
+ @PreAuthorize("hasPermission('SYS','USER_LIST_READ')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=87&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/8052d925a8751e5004eb9bbf5ba547d36c561c62

[COMMIT MESSAGE]:rename app package name||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL') ")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/8052d925a8751e5004eb9bbf5ba547d36c561c62

[COMMIT MESSAGE]:rename app package name||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL') ")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/8296f4e1aaa98b8b0851054195186281d9fa42cd

[COMMIT MESSAGE]:enhance user management and enhance authentication||
=========================================================

+ @PreAuthorize("hasPermission('SYS','USER_ACCOUNT_EDIT')")
+ @PreAuthorize("hasPermission('SYS','USER_ACCOUNT_EDIT')")
+ @PreAuthorize("hasPermission('SYS','USER_ACCOUNT_EDIT')")
+ @PreAuthorize("hasPermission('SYS','USER_ACCOUNT_EDIT')")
- @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL') ")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/991a1b8974df6453beaf82cca66a0a76780ffd70

[COMMIT MESSAGE]:add request approve flow for creating speciality||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhilong0/cloudress/commit/8052d925a8751e5004eb9bbf5ba547d36c561c62

[COMMIT MESSAGE]:rename app package name||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_EDIT')")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL') ")
+ @PreAuthorize("isAuthenticated() and hasPermission('SPECIALITY','MASTER_DATA_APPROVAL')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/nikolaynest/catalog/commit/b7f701f7385a851c21e09813748f12ff57c568cd

[COMMIT MESSAGE]:Initial commit||
=========================================================

+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/nikolaynest/catalog/commit/b7f701f7385a851c21e09813748f12ff57c568cd

[COMMIT MESSAGE]:Initial commit||
=========================================================

+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/tfeng/play-oauth2/commit/2ab7b9e74d064f514376759422f3c0dde2268234

[COMMIT MESSAGE]:Initial commit.||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("#oauth2.clientHasRole('ROLE_CLIENT') and #oauth2.hasScope('trust')")
+ @PreAuthorize("#oauth2.clientHasRole('ROLE_CLIENT') and #oauth2.hasScope('trust')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/tfeng/play-oauth2/commit/2ab7b9e74d064f514376759422f3c0dde2268234

[COMMIT MESSAGE]:Initial commit.||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("#oauth2.clientHasRole('ROLE_CLIENT') and #oauth2.hasScope('trust')")
+ @PreAuthorize("#oauth2.clientHasRole('ROLE_CLIENT') and #oauth2.hasScope('trust')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=88&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/zhangjunfang/eclipse-dir/commit/1e7b6a50e0378e346b7fbaf0ed96f0e398a6b7ec

[COMMIT MESSAGE]:3||
=========================================================

+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhangjunfang/eclipse-dir/commit/1e7b6a50e0378e346b7fbaf0ed96f0e398a6b7ec

[COMMIT MESSAGE]:3||
=========================================================

+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhangjunfang/eclipse-dir/commit/1e7b6a50e0378e346b7fbaf0ed96f0e398a6b7ec

[COMMIT MESSAGE]:3||
=========================================================

+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/zhangjunfang/eclipse-dir/commit/1e7b6a50e0378e346b7fbaf0ed96f0e398a6b7ec

[COMMIT MESSAGE]:3||
=========================================================

+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/NikitaElsukov/MISTmvc/commit/06bca13b310625abdd902a75c819fe5c84b855ca

[COMMIT MESSAGE]:Signed-off-by: Nikita <nikita.elsukov.sa@mail.ru>||
=========================================================

+ //@PreAuthorize("(hasRole('ROLE_ADMIN') and #image != null)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/przodownikR1/springMvcStartKata/commit/c742a62afc62215885e6b45d7fcf00e86bf7146f

[COMMIT MESSAGE]:test||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/i5i/nortal/commit/956033f5c1da742afd80af9a8b26c6d2c0feede0

[COMMIT MESSAGE]:--inital commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_AaaDMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/FrontierPsychiatrist/spring-oauth-example/commit/56f390bdbfb377a34193baa08fbea96572c48652

[COMMIT MESSAGE]:Added the possibility to edit clients||
=========================================================

+ @PreAuthorize("hasRole('ROLE_OAUTH_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_OAUTH_ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=89&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/Shepherd/commit/381f52b4939bdfd3b71e396d755be8b6ef5b7c9c

[COMMIT MESSAGE]:refactor admin users partial||
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/Shepherd/commit/c60fa8d050c3af157e62993d18968dbe75d1e53c

[COMMIT MESSAGE]:refactor admin project||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/Shepherd/commit/2af407f3e6f6ca93de9f7fd06f5ffc27a6740535

[COMMIT MESSAGE]:refactor config||
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/Shepherd/commit/381f52b4939bdfd3b71e396d755be8b6ef5b7c9c

[COMMIT MESSAGE]:refactor admin users partial||
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/Shepherd/commit/381f52b4939bdfd3b71e396d755be8b6ef5b7c9c

[COMMIT MESSAGE]:refactor admin users partial||
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/Shepherd/commit/381f52b4939bdfd3b71e396d755be8b6ef5b7c9c

[COMMIT MESSAGE]:refactor admin users partial||
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/eugenp/tutorials/commit/d1eb4546bdc56d1dde1dcbd9d9e94535b72978f3

[COMMIT MESSAGE]:update registration methods||
=========================================================

+ @PreAuthorize("hasRole('READ_PRIVILEGE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/eugenp/tutorials/commit/cfed69220eecf7623fd779ed5d8749699615d3fe

[COMMIT MESSAGE]:spring security reset password||
=========================================================

+ @PreAuthorize("hasRole('READ_PRIVILEGE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/apache/incubator-ranger/commit/9784f5343fa710c3b9199b58e7e221b5739a20a4

[COMMIT MESSAGE]:RANGER-203: added hasRole(admin) to createService and updateService REST||methods. added search by status of serviceDef/service/policy. added
sortBy createTime and updateTime
=========================================================

+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/apache/incubator-ranger/commit/87fffe02e0e12b58d1e731b6f0b46c4375f1d281

[COMMIT MESSAGE]:RANGER-203: 1) URL for few methods in ServiceREST updated to be||consistent 2) plugin-common project updated to read configuration using
existing RangerConfiguration class. 3) Added ServiceRESTStore, to access
service store via REST interface.
=========================================================

+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/apache/incubator-ranger/commit/ccdeb2874b4b884dcf0eab4dca752b93cea2e868

[COMMIT MESSAGE]:RANGER-203: added ServiceREST implementation||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/9af6facd0b9edab15ef60a159e02dd7826eee03c

[COMMIT MESSAGE]:- added permission for reading/modifying||
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")// todo do we need a new permission for results?
+ @PreAuthorize("hasRole('PERM_MODIFY_RESULTS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_RESULTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/5154236d65aa735626ba8a4561031f93dfffc879

[COMMIT MESSAGE]:- added permissions for experiments||- first pass at some results
- list experiments
- use DateTime hibernate lib
- renamed MEASURED to COMP for WellType
- added flag to know when the pw has been set
- added ExperimentService
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')") // todo do we need a new permission for results?

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/9d22962bf78270dd3af5eb17b3b7890ac233efde

[COMMIT MESSAGE]:- small cleanup on the dependencies||- added listing for Compound's + service test
- renamed PlateTemplate to PlateMap
- added basic CSV parser
- changed barcode from Long to String. More flexible this way
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/6e2e6c170c2705101929fee3a112c40b3673baee

[COMMIT MESSAGE]:- added roles/permissions||- added PreAuthorize to the service methods
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_USERROLE')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=2&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/apache/incubator-ranger/commit/9784f5343fa710c3b9199b58e7e221b5739a20a4

[COMMIT MESSAGE]:RANGER-203: added hasRole(admin) to createService and updateService REST||methods. added search by status of serviceDef/service/policy. added
sortBy createTime and updateTime
=========================================================

+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/apache/incubator-ranger/commit/87fffe02e0e12b58d1e731b6f0b46c4375f1d281

[COMMIT MESSAGE]:RANGER-203: 1) URL for few methods in ServiceREST updated to be||consistent 2) plugin-common project updated to read configuration using
existing RangerConfiguration class. 3) Added ServiceRESTStore, to access
service store via REST interface.
=========================================================

+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/apache/incubator-ranger/commit/ccdeb2874b4b884dcf0eab4dca752b93cea2e868

[COMMIT MESSAGE]:RANGER-203: added ServiceREST implementation||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYS_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/9af6facd0b9edab15ef60a159e02dd7826eee03c

[COMMIT MESSAGE]:- added permission for reading/modifying||
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")// todo do we need a new permission for results?
+ @PreAuthorize("hasRole('PERM_MODIFY_RESULTS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_RESULTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/5154236d65aa735626ba8a4561031f93dfffc879

[COMMIT MESSAGE]:- added permissions for experiments||- first pass at some results
- list experiments
- use DateTime hibernate lib
- renamed MEASURED to COMP for WellType
- added flag to know when the pw has been set
- added ExperimentService
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')") // todo do we need a new permission for results?

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/9d22962bf78270dd3af5eb17b3b7890ac233efde

[COMMIT MESSAGE]:- small cleanup on the dependencies||- added listing for Compound's + service test
- renamed PlateTemplate to PlateMap
- added basic CSV parser
- changed barcode from Long to String. More flexible this way
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/6e2e6c170c2705101929fee3a112c40b3673baee

[COMMIT MESSAGE]:- added roles/permissions||- added PreAuthorize to the service methods
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_USERROLE')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/23fbb2c5252fb9778a22a0b4b47c623d6090b805

[COMMIT MESSAGE]:- changed the PlateMapService import call to return a PlateMap along …||…with the list of possible PlateTypes that could be used
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/6e2e6c170c2705101929fee3a112c40b3673baee

[COMMIT MESSAGE]:- added roles/permissions||- added PreAuthorize to the service methods
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_USERROLE')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/45479707eb1eb66e458930f11b0d25f2445d537b

[COMMIT MESSAGE]:- added some more listing services||- moved the path of the result service
- now populating creation date for results
- added iso8601 scrubber for json assertions
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/6e2e6c170c2705101929fee3a112c40b3673baee

[COMMIT MESSAGE]:- added roles/permissions||- added PreAuthorize to the service methods
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_USERROLE')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/45479707eb1eb66e458930f11b0d25f2445d537b

[COMMIT MESSAGE]:- added some more listing services||- moved the path of the result service
- now populating creation date for results
- added iso8601 scrubber for json assertions
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/9af6facd0b9edab15ef60a159e02dd7826eee03c

[COMMIT MESSAGE]:- added permission for reading/modifying||
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")// todo do we need a new permission for results?
+ @PreAuthorize("hasRole('PERM_MODIFY_RESULTS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_RESULTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/5154236d65aa735626ba8a4561031f93dfffc879

[COMMIT MESSAGE]:- added permissions for experiments||- first pass at some results
- list experiments
- use DateTime hibernate lib
- renamed MEASURED to COMP for WellType
- added flag to know when the pw has been set
- added ExperimentService
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')") // todo do we need a new permission for results?

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/45479707eb1eb66e458930f11b0d25f2445d537b

[COMMIT MESSAGE]:- added some more listing services||- moved the path of the result service
- now populating creation date for results
- added iso8601 scrubber for json assertions
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/23fbb2c5252fb9778a22a0b4b47c623d6090b805

[COMMIT MESSAGE]:- changed the PlateMapService import call to return a PlateMap along …||…with the list of possible PlateTypes that could be used
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/9d22962bf78270dd3af5eb17b3b7890ac233efde

[COMMIT MESSAGE]:- small cleanup on the dependencies||- added listing for Compound's + service test
- renamed PlateTemplate to PlateMap
- added basic CSV parser
- changed barcode from Long to String. More flexible this way
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/9af6facd0b9edab15ef60a159e02dd7826eee03c

[COMMIT MESSAGE]:- added permission for reading/modifying||
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")// todo do we need a new permission for results?
+ @PreAuthorize("hasRole('PERM_MODIFY_RESULTS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_RESULTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/5154236d65aa735626ba8a4561031f93dfffc879

[COMMIT MESSAGE]:- added permissions for experiments||- first pass at some results
- list experiments
- use DateTime hibernate lib
- renamed MEASURED to COMP for WellType
- added flag to know when the pw has been set
- added ExperimentService
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')") // todo do we need a new permission for results?

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/6e2e6c170c2705101929fee3a112c40b3673baee

[COMMIT MESSAGE]:- added roles/permissions||- added PreAuthorize to the service methods
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_USERROLE')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=3&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/execom-eu/ECLunchOrder/commit/fe5522a282125b1d55d23bfce26c2108f1857167

[COMMIT MESSAGE]:Model corrections, supplier admin GUI elements.||
=========================================================

+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/octo888/blog/commit/6f7ba01a04aaf8a28e0bc3c0e56dc7a8ed85467b

[COMMIT MESSAGE]:after unit 34||
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/deccanrock/planovik/commit/9a150ec126a27732914527a648cf353f914efea6

[COMMIT MESSAGE]:relocated resources||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERADMIN')")
+ @PreAuthorize("hasRole('ROLE_SUPERADMIN')")
+ @PreAuthorize("hasRole('ROLE_SUPERADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/imrich2/46C869B8/commit/9ed9330db57188d14043c38cc02a876e9d73ba71

[COMMIT MESSAGE]:big refactor about security & wechatAdapter||
=========================================================

+// @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/if6was9/macgyver/commit/19a09dead62932317787f60c5155c908c260379e

[COMMIT MESSAGE]:re-added script invocation interface||
=========================================================

-@PreAuthorize("hasRole('ROLE_MACGYVER_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/0b049ff5fb7087a26e59a9c4a722d14be8b81f61

[COMMIT MESSAGE]:EP-214 & EP-215: Lisätty mahdollisuus hakea tiedotteita julkisuus-lip…||…un ja/tai alkaen-päivämäärän avulla. Kirjautumaton käyttäjäkin pystyy nyt lukemaan julkisia tiedotteita.
=========================================================

- @PreAuthorize("hasPermission(#id, 'tiedote', 'LUKU')")
+ @PreAuthorize("permitAll()")
- @PreAuthorize("hasPermission(#id, 'tiedote', 'LUKU')")
+ @PreAuthorize("permitAll()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/1d4f7cfc6ca75cdf77b88fe759d045b80fbf8fce

[COMMIT MESSAGE]:Lisätty tiedotteiden hallinta backendissä||
=========================================================

+ @PreAuthorize("hasPermission(#id, 'tiedote', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'tiedote', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'tiedote', 'LUONTI')")
+ @PreAuthorize("hasPermission(#id, 'tiedote', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'tiedote', 'POISTO')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/5c6574bc9093da3c005fc3dfdf2f5c7e40ce960e

[COMMIT MESSAGE]:Salli perusteen korjaus||Salli perusteen rajoitettu muokkaus julkaisun jälkeen.
Tekemättä: Estä tutkinnon osan ja oppiaineen rakenteen muokkaaminen.
=========================================================

+ @PreAuthorize("hasPermission(#event.perusteId, 'peruste', 'KORJAUS') or hasPermission(#event.perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#tid, #t.toString(), #p.toString())")
+ @PreAuthorize("hasPermission(#tid, #t.toString(), #p)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/8036d7ee9caa619397f64e829316ee029ad659e9

[COMMIT MESSAGE]:Oikeustarkastelu käyttöliittymätasolle.||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/629a82d86fc0ddfe138cabd5c2c987994a1e9fde

[COMMIT MESSAGE]:korjauksia.||
=========================================================

- @PreAuthorize("hasPermission(#kommenttidto.perusteprojektiId, 'perusteProjekti', 'KOMMENTOINTI')")
- //@PreAuthorize("hasPermission(#kommenttidto.perusteprojektiId, 'perusteProjekti', 'KOMMENTOINTI')")
+ @PreAuthorize("hasPermission(#tid, #t.toString(), #p.toString())")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/114c46dae4c04de4addc95ddaa435244e951db29

[COMMIT MESSAGE]:palvelu oikeuksien tarkistamiseen||
=========================================================

+ @PreAuthorize("hasPermission(#o,#p)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/5c6574bc9093da3c005fc3dfdf2f5c7e40ce960e

[COMMIT MESSAGE]:Salli perusteen korjaus||Salli perusteen rajoitettu muokkaus julkaisun jälkeen.
Tekemättä: Estä tutkinnon osan ja oppiaineen rakenteen muokkaaminen.
=========================================================

+ @PreAuthorize("hasPermission(#event.perusteId, 'peruste', 'KORJAUS') or hasPermission(#event.perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#tid, #t.toString(), #p.toString())")
+ @PreAuthorize("hasPermission(#tid, #t.toString(), #p)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/533f759d6adf38587e2c553fcc3d93e373391d12

[COMMIT MESSAGE]:poista tutkinnonosaviite oikeasti||
=========================================================

+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#id, 'perusteenosa', 'KORJAUS')")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/33b3026a1f2dbd6652c78348d3d2125108728657

[COMMIT MESSAGE]:yhtenäistä perusteen kaikki -rajapinta||
=========================================================

- @PreAuthorize("permitAll()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/f9c8e4507d1b573cd333f3889ac4d50155bbd838

[COMMIT MESSAGE]:Uusia rajapintoja ja korjattu bugi perustelistauksen linkkien generoi…||…nnissa
=========================================================

- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/78bc0bed8e1564bd2ad758ec246a2662489c11e0

[COMMIT MESSAGE]:Lisätty rajapinta koko perusopetuksen perusteen hakemiseen sisältöineen||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/37e5f67003d0f3ab7e97fded3344bc326128ad35

[COMMIT MESSAGE]:Korvaamisen perustoiminnallisuus. Vielä pientä UI viilausta.||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/43e02aaaf2542fdd18942ca66810f4618208edb4

[COMMIT MESSAGE]:Toteutusta||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/3c0c2597bc045bd61dd0f004fe51719ea69d6a3b

[COMMIT MESSAGE]:Esiopetuksen perusteprojektin luonti.||
=========================================================

+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/490222013d458b57cf596712c33ae389b4363c58

[COMMIT MESSAGE]:perusteen korjaus julkaisun jälkeen||Lisättu KORJAUS-oikeus update-palveluihin (WIP)
=========================================================

- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'perusteenmetatiedot', 'LUKU')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'perusteenmetatiedot', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'perusteenmetatiedot', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#po.dto.id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#po.dto.id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#po.dto.id, 'perusteenosa', 'KORJAUS')")
- @PreAuthorize("hasPermission(#po.id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#po.id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#po.id, 'perusteenosa', 'KORJAUS')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#id, 'perusteenosa', 'KORJAUS')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#id, 'perusteenosa', 'KORJAUS')")
- @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'MUOKKAUS') or hasPermission(#viiteId, 'tutkinnonosaviite', 'KORJAUS')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#id, 'perusteenosa', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#tov.id, 'tutkinnonosaviite', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#tov.id, 'tutkinnonosaviite', 'MUOKKAUS') or hasPermission(#tov.id, 'tutkinnonosaviite', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/2db3e0c5cd0b87853de9c42511c0b5eccbb27c07

[COMMIT MESSAGE]:Tutkinnon osa revert-note tukee nyt tutkinnonosaviitettä.||
=========================================================

+ @PreAuthorize("hasPermission(#id, 'tutkinnonosaviite', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#tov.id, 'tutkinnonosaviite', 'MUOKKAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/938e04e00e223111598568637dc4886080dc874c

[COMMIT MESSAGE]:lukituksen refaktorointia||Refaktoroitu Suoritustapa käyttämään geneerisempää lukitussysteemiä.
=========================================================

+ @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/8537365888800646f1bd2243b76a9cfacb546537

[COMMIT MESSAGE]:Tutkinnon osien käsittely viitteiden avulla refactorointi.||
=========================================================

+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("isAuthenticated()")
- @PreAuthorize("returnObject?.tila == T(fi.vm.sade.eperusteet.domain.PerusteTila).VALMIS or hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'tutkinnonosaviite', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'tutkinnonosaviite', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'tutkinnonosaviite', 'LUKU')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'LUKU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/34da017bcc4f678893248fa29bea55e6673fe4c5

[COMMIT MESSAGE]:Palvelupuolen toteutus tutkintonimikekoodeille||
=========================================================

+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/1e7ebd73dcf1b210bfac088679a7363745610983

[COMMIT MESSAGE]:perusteenosaviitteen lisäämisen refaktoirointi||
=========================================================

- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/2837a31d6ff0a1857bd904d2daf00633819484f6

[COMMIT MESSAGE]:oikeustarkistelukorjauksia||
=========================================================

- @PreAuthorize("hasPermission(#peruste,'peruste','MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId,'peruste','MUOKKAUS')")
- @PreAuthorize("hasPermission(#peruste,'peruste','MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId,'peruste','MUOKKAUS')")
- @PreAuthorize("hasPermission(#peruste,'peruste','MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId,'peruste','MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId,'peruste','LUKU')")
- @PreAuthorize("hasPermission(#peruste,'peruste','MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId,'peruste','MUOKKAUS')")
- @PreAuthorize("hasPermission(#peruste,'peruste','MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId,'peruste','MUOKKAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/80694232d168e85a2b4f1c30114ab10cfa157bfd

[COMMIT MESSAGE]:YL perusteen tietomalli ja palvelut, WIP||
=========================================================

- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=4&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/23fbb2c5252fb9778a22a0b4b47c623d6090b805

[COMMIT MESSAGE]:- changed the PlateMapService import call to return a PlateMap along …||…with the list of possible PlateTypes that could be used
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/6e2e6c170c2705101929fee3a112c40b3673baee

[COMMIT MESSAGE]:- added roles/permissions||- added PreAuthorize to the service methods
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_USERROLE')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/45479707eb1eb66e458930f11b0d25f2445d537b

[COMMIT MESSAGE]:- added some more listing services||- moved the path of the result service
- now populating creation date for results
- added iso8601 scrubber for json assertions
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/6e2e6c170c2705101929fee3a112c40b3673baee

[COMMIT MESSAGE]:- added roles/permissions||- added PreAuthorize to the service methods
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_USERROLE')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/45479707eb1eb66e458930f11b0d25f2445d537b

[COMMIT MESSAGE]:- added some more listing services||- moved the path of the result service
- now populating creation date for results
- added iso8601 scrubber for json assertions
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/9af6facd0b9edab15ef60a159e02dd7826eee03c

[COMMIT MESSAGE]:- added permission for reading/modifying||
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")// todo do we need a new permission for results?
+ @PreAuthorize("hasRole('PERM_MODIFY_RESULTS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_RESULTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/5154236d65aa735626ba8a4561031f93dfffc879

[COMMIT MESSAGE]:- added permissions for experiments||- first pass at some results
- list experiments
- use DateTime hibernate lib
- renamed MEASURED to COMP for WellType
- added flag to know when the pw has been set
- added ExperimentService
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')") // todo do we need a new permission for results?

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/45479707eb1eb66e458930f11b0d25f2445d537b

[COMMIT MESSAGE]:- added some more listing services||- moved the path of the result service
- now populating creation date for results
- added iso8601 scrubber for json assertions
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/23fbb2c5252fb9778a22a0b4b47c623d6090b805

[COMMIT MESSAGE]:- changed the PlateMapService import call to return a PlateMap along …||…with the list of possible PlateTypes that could be used
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/9d22962bf78270dd3af5eb17b3b7890ac233efde

[COMMIT MESSAGE]:- small cleanup on the dependencies||- added listing for Compound's + service test
- renamed PlateTemplate to PlateMap
- added basic CSV parser
- changed barcode from Long to String. More flexible this way
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/9af6facd0b9edab15ef60a159e02dd7826eee03c

[COMMIT MESSAGE]:- added permission for reading/modifying||
=========================================================

+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
- @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")// todo do we need a new permission for results?
+ @PreAuthorize("hasRole('PERM_MODIFY_RESULTS')")
+ @PreAuthorize("hasRole('PERM_READ_RESULTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_RESULTS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/5154236d65aa735626ba8a4561031f93dfffc879

[COMMIT MESSAGE]:- added permissions for experiments||- first pass at some results
- list experiments
- use DateTime hibernate lib
- renamed MEASURED to COMP for WellType
- added flag to know when the pw has been set
- added ExperimentService
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_READ_EXPERIMENTS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')") // todo do we need a new permission for results?

=========================================================
[CODE-CHANGE-URL]:https://github.com/massfords/we99/commit/6e2e6c170c2705101929fee3a112c40b3673baee

[COMMIT MESSAGE]:- added roles/permissions||- added PreAuthorize to the service methods
=========================================================

+ @PreAuthorize("hasRole('PERM_MODIFY_USERROLE')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_READ_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_COMPOUNDS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_READ_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATEMAPS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_READ_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PLATETYPES')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_READ_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")
+ @PreAuthorize("hasRole('PERM_MODIFY_PROTOCOLS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/execom-eu/ECLunchOrder/commit/fe5522a282125b1d55d23bfce26c2108f1857167

[COMMIT MESSAGE]:Model corrections, supplier admin GUI elements.||
=========================================================

+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/octo888/blog/commit/6f7ba01a04aaf8a28e0bc3c0e56dc7a8ed85467b

[COMMIT MESSAGE]:after unit 34||
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/deccanrock/planovik/commit/9a150ec126a27732914527a648cf353f914efea6

[COMMIT MESSAGE]:relocated resources||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERADMIN')")
+ @PreAuthorize("hasRole('ROLE_SUPERADMIN')")
+ @PreAuthorize("hasRole('ROLE_SUPERADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/imrich2/46C869B8/commit/9ed9330db57188d14043c38cc02a876e9d73ba71

[COMMIT MESSAGE]:big refactor about security & wechatAdapter||
=========================================================

+// @PreAuthorize("hasRole('ROLE_ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=5&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/if6was9/macgyver/commit/19a09dead62932317787f60c5155c908c260379e

[COMMIT MESSAGE]:re-added script invocation interface||
=========================================================

-@PreAuthorize("hasRole('ROLE_MACGYVER_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/0b049ff5fb7087a26e59a9c4a722d14be8b81f61

[COMMIT MESSAGE]:EP-214 & EP-215: Lisätty mahdollisuus hakea tiedotteita julkisuus-lip…||…un ja/tai alkaen-päivämäärän avulla. Kirjautumaton käyttäjäkin pystyy nyt lukemaan julkisia tiedotteita.
=========================================================

- @PreAuthorize("hasPermission(#id, 'tiedote', 'LUKU')")
+ @PreAuthorize("permitAll()")
- @PreAuthorize("hasPermission(#id, 'tiedote', 'LUKU')")
+ @PreAuthorize("permitAll()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/1d4f7cfc6ca75cdf77b88fe759d045b80fbf8fce

[COMMIT MESSAGE]:Lisätty tiedotteiden hallinta backendissä||
=========================================================

+ @PreAuthorize("hasPermission(#id, 'tiedote', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'tiedote', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'tiedote', 'LUONTI')")
+ @PreAuthorize("hasPermission(#id, 'tiedote', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'tiedote', 'POISTO')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/5c6574bc9093da3c005fc3dfdf2f5c7e40ce960e

[COMMIT MESSAGE]:Salli perusteen korjaus||Salli perusteen rajoitettu muokkaus julkaisun jälkeen.
Tekemättä: Estä tutkinnon osan ja oppiaineen rakenteen muokkaaminen.
=========================================================

+ @PreAuthorize("hasPermission(#event.perusteId, 'peruste', 'KORJAUS') or hasPermission(#event.perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#tid, #t.toString(), #p.toString())")
+ @PreAuthorize("hasPermission(#tid, #t.toString(), #p)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/8036d7ee9caa619397f64e829316ee029ad659e9

[COMMIT MESSAGE]:Oikeustarkastelu käyttöliittymätasolle.||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/629a82d86fc0ddfe138cabd5c2c987994a1e9fde

[COMMIT MESSAGE]:korjauksia.||
=========================================================

- @PreAuthorize("hasPermission(#kommenttidto.perusteprojektiId, 'perusteProjekti', 'KOMMENTOINTI')")
- //@PreAuthorize("hasPermission(#kommenttidto.perusteprojektiId, 'perusteProjekti', 'KOMMENTOINTI')")
+ @PreAuthorize("hasPermission(#tid, #t.toString(), #p.toString())")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/114c46dae4c04de4addc95ddaa435244e951db29

[COMMIT MESSAGE]:palvelu oikeuksien tarkistamiseen||
=========================================================

+ @PreAuthorize("hasPermission(#o,#p)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet-ylops/commit/fb86634ecbe724d8edf3a0329b664806b8fba820

[COMMIT MESSAGE]:Lisätty oikeudet-endpoint opetussuunnitelma-controlleriin||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/tusharkhonde/cmpe273/commit/1e32044a61bbc713e38344c8f447e318e018c155

[COMMIT MESSAGE]:First commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sophia2901/assignment1/commit/75395d27cbd4fdcd251a4d1acd17ceff97d6a1c4

[COMMIT MESSAGE]:validation and security check||
=========================================================

+////@PreAuthorize("hasRole('MODERATOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sophia2901/assignment1/commit/a816e304df0cf9a11f29de81a651ea8903bb06d1

[COMMIT MESSAGE]:Security check||
=========================================================

+//@PreAuthorize("hasRole('MODERATOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+@PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/1630814b9f5c7738b141156d9da2427bd257ef12

[COMMIT MESSAGE]:Marked classes where error handling needs to be added/changed||
=========================================================

- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/c9bdba3f3a2cab6ab780d352ce840edff9695eaa

[COMMIT MESSAGE]:API now bound to USER for read, ADMIN for write, addresses #267||
=========================================================

+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/f9b0670ae953bea7a6b227cf29a5abea6ed3dc64

[COMMIT MESSAGE]:Merged ClientAPI and ClientDynamicRegistrationEndpoitn by hand||
=========================================================

- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/1630814b9f5c7738b141156d9da2427bd257ef12

[COMMIT MESSAGE]:Marked classes where error handling needs to be added/changed||
=========================================================

- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/c9bdba3f3a2cab6ab780d352ce840edff9695eaa

[COMMIT MESSAGE]:API now bound to USER for read, ADMIN for write, addresses #267||
=========================================================

+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/d5551e96923e2306122c374f0c0eb94515d87a61

[COMMIT MESSAGE]:Added services for data import/export and modified JpaAuthenticationH…||…olderEntity and Repository to allow getting all objects
=========================================================

+@PreAuthorize("hasRole('ROLE_ADMIN')") // you need to be an admin to even think about this -- this is a potentially dangerous API!!

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/c34357a433d45d260b2c7fe570c32aa29bbd6aa1

[COMMIT MESSAGE]:added resource registration endpoint with basic functionality and spe…||…cialized tokens
=========================================================

+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + SystemScopeService.RESOURCE_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + SystemScopeService.RESOURCE_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + SystemScopeService.RESOURCE_TOKEN_SCOPE + "')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=6&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/1630814b9f5c7738b141156d9da2427bd257ef12

[COMMIT MESSAGE]:Marked classes where error handling needs to be added/changed||
=========================================================

- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/757e21a722b5bb5528029e1fbd663a48ceb579f5

[COMMIT MESSAGE]:added blacklist API||
=========================================================

+@PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/856c0ea0b5c7812fadf7f14a611eb5fb9401f4c7

[COMMIT MESSAGE]:Merge commit '023dd440d4a0e6e59a14c88013837d79a77c74e0' into 1.1-merge||Conflicts:
	openid-connect-client/pom.xml
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/AuthorizationRequestImpl.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectingTokenService.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionAuthorityGranter.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionUrlProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationFilter.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisher.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisherMapping.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/JwkViewResolver.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/AuthRequestUrlBuilder.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/ClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticServerConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticSingleIssuerService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/ThirdPartyIssuerService.java
	openid-connect-client/src/test/java/org/mitre/openid/connect/client/AbstractOIDCAuthenticationFilterTest.java
	openid-connect-common/pom.xml
	openid-connect-common/src/main/java/org/mitre/jose/keystore/JWKSetKeyStore.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/JwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/DefaultJwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/JWKSetSigningAndValidationServiceCacheService.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/AuthorizationCodeEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/ClientDetailsEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2AccessTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2RefreshTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/SystemScope.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/AuthorizationCodeRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/OAuth2TokenRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/service/OAuth2TokenEntityService.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ConfigurationPropertiesBean.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ServerConfiguration.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/ApprovedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/BlacklistedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/Event.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/OIDCAuthenticationToken.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/WhitelistedSite.java
	openid-connect-common/src/main/java/org/mitre/util/jpa/JpaUtil.java
	openid-connect-server/.gitignore
	openid-connect-server/pom.xml
	openid-connect-server/src/main/java/org/mitre/oauth2/repository/impl/JpaAuthorizationCodeRepository.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2AuthorizationCodeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ClientDetailsEntityService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ProviderTokenService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultSystemScopeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/ChainedTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/JwtAssertionTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/view/TokenIntrospectionView.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/IntrospectionEndpoint.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/OAuthConfirmationController.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/RevocationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/ConnectOAuth2RequestFactory.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerAuthenticationProvider.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerClientAssertionTokenEndpointFilter.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/InvalidJwtSignatureException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UnknownUserInfoSchemaException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UserNotFoundException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaApprovedSiteRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaUserInfoRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultApprovedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultNonceService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultStatsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultUserInfoUserDetailsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultWhitelistedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/ConnectTokenEnhancer.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/TofuUserApprovalHandler.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/AbstractClientEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ClientInformationResponseView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ExceptionAsJSONView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonErrorView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/POCOUserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/StatsSummary.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/UserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ApprovedSiteAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/BlacklistAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientDynamicRegistrationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ManagerController.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/RequestObjectAuthorizationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/StatsAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoInterceptor.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/WhitelistAPI.java
	openid-connect-server/src/main/webapp/WEB-INF/tags/aboutContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/breadcrumbs.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/contactContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/copyright.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/header.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageAbout.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageContact.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageStats.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageWelcome.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/sidebar.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/statsContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/topbar.tag
	openid-connect-server/src/main/webapp/WEB-INF/views/about.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/approve.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/contact.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/exception/usernotfound.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/login.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/manage.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/stats.jsp
	pom.xml
=========================================================

+//@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_CLIENT')")
- @PreAuthorize("hasRole('ROLE_CLIENT')")
+//@PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/15aea61fbec078b90083f19515786dfae9668bd7

[COMMIT MESSAGE]:Applied code cleanup||
=========================================================

-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/1630814b9f5c7738b141156d9da2427bd257ef12

[COMMIT MESSAGE]:Marked classes where error handling needs to be added/changed||
=========================================================

- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/d24ecd2e7c953007424063f08c43e8809b5d891c

[COMMIT MESSAGE]:Removed extra scope validation endpoint||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/96e333afa6206c1b140a257b7cc6166868ee97ca

[COMMIT MESSAGE]:Working on error handling||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/c9bdba3f3a2cab6ab780d352ce840edff9695eaa

[COMMIT MESSAGE]:API now bound to USER for read, ADMIN for write, addresses #267||
=========================================================

+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
-@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/ab35186696eb266102b2e511bd57e1332eb1ccca

[COMMIT MESSAGE]:added scope service, repository, and API||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/0b8dbc4f68a814c228baa8a5f8a67e52d52e1535

[COMMIT MESSAGE]:added registration token API||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/81634e616588f6138d848df079c0715d72e5d711

[COMMIT MESSAGE]:added API for getting tokens by clientid||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/89f015cf1c62933fcd48b2ea8dac48b7386e2401

[COMMIT MESSAGE]:Updated Token API to be less leaky||
=========================================================

-//@PreAuthorize("hasRole('ROLE_USER')")
-//@PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/856c0ea0b5c7812fadf7f14a611eb5fb9401f4c7

[COMMIT MESSAGE]:Merge commit '023dd440d4a0e6e59a14c88013837d79a77c74e0' into 1.1-merge||Conflicts:
	openid-connect-client/pom.xml
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/AuthorizationRequestImpl.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectingTokenService.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionAuthorityGranter.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionUrlProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationFilter.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisher.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisherMapping.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/JwkViewResolver.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/AuthRequestUrlBuilder.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/ClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticServerConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticSingleIssuerService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/ThirdPartyIssuerService.java
	openid-connect-client/src/test/java/org/mitre/openid/connect/client/AbstractOIDCAuthenticationFilterTest.java
	openid-connect-common/pom.xml
	openid-connect-common/src/main/java/org/mitre/jose/keystore/JWKSetKeyStore.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/JwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/DefaultJwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/JWKSetSigningAndValidationServiceCacheService.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/AuthorizationCodeEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/ClientDetailsEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2AccessTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2RefreshTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/SystemScope.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/AuthorizationCodeRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/OAuth2TokenRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/service/OAuth2TokenEntityService.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ConfigurationPropertiesBean.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ServerConfiguration.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/ApprovedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/BlacklistedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/Event.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/OIDCAuthenticationToken.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/WhitelistedSite.java
	openid-connect-common/src/main/java/org/mitre/util/jpa/JpaUtil.java
	openid-connect-server/.gitignore
	openid-connect-server/pom.xml
	openid-connect-server/src/main/java/org/mitre/oauth2/repository/impl/JpaAuthorizationCodeRepository.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2AuthorizationCodeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ClientDetailsEntityService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ProviderTokenService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultSystemScopeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/ChainedTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/JwtAssertionTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/view/TokenIntrospectionView.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/IntrospectionEndpoint.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/OAuthConfirmationController.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/RevocationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/ConnectOAuth2RequestFactory.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerAuthenticationProvider.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerClientAssertionTokenEndpointFilter.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/InvalidJwtSignatureException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UnknownUserInfoSchemaException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UserNotFoundException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaApprovedSiteRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaUserInfoRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultApprovedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultNonceService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultStatsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultUserInfoUserDetailsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultWhitelistedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/ConnectTokenEnhancer.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/TofuUserApprovalHandler.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/AbstractClientEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ClientInformationResponseView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ExceptionAsJSONView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonErrorView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/POCOUserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/StatsSummary.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/UserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ApprovedSiteAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/BlacklistAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientDynamicRegistrationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ManagerController.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/RequestObjectAuthorizationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/StatsAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoInterceptor.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/WhitelistAPI.java
	openid-connect-server/src/main/webapp/WEB-INF/tags/aboutContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/breadcrumbs.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/contactContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/copyright.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/header.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageAbout.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageContact.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageStats.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageWelcome.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/sidebar.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/statsContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/topbar.tag
	openid-connect-server/src/main/webapp/WEB-INF/views/about.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/approve.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/contact.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/exception/usernotfound.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/login.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/manage.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/stats.jsp
	pom.xml
=========================================================

+//@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_CLIENT')")
- @PreAuthorize("hasRole('ROLE_CLIENT')")
+//@PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/15aea61fbec078b90083f19515786dfae9668bd7

[COMMIT MESSAGE]:Applied code cleanup||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/1630814b9f5c7738b141156d9da2427bd257ef12

[COMMIT MESSAGE]:Marked classes where error handling needs to be added/changed||
=========================================================

- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/856c0ea0b5c7812fadf7f14a611eb5fb9401f4c7

[COMMIT MESSAGE]:Merge commit '023dd440d4a0e6e59a14c88013837d79a77c74e0' into 1.1-merge||Conflicts:
	openid-connect-client/pom.xml
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/AuthorizationRequestImpl.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectingTokenService.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionAuthorityGranter.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionUrlProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationFilter.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisher.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisherMapping.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/JwkViewResolver.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/AuthRequestUrlBuilder.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/ClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticServerConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticSingleIssuerService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/ThirdPartyIssuerService.java
	openid-connect-client/src/test/java/org/mitre/openid/connect/client/AbstractOIDCAuthenticationFilterTest.java
	openid-connect-common/pom.xml
	openid-connect-common/src/main/java/org/mitre/jose/keystore/JWKSetKeyStore.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/JwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/DefaultJwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/JWKSetSigningAndValidationServiceCacheService.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/AuthorizationCodeEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/ClientDetailsEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2AccessTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2RefreshTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/SystemScope.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/AuthorizationCodeRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/OAuth2TokenRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/service/OAuth2TokenEntityService.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ConfigurationPropertiesBean.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ServerConfiguration.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/ApprovedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/BlacklistedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/Event.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/OIDCAuthenticationToken.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/WhitelistedSite.java
	openid-connect-common/src/main/java/org/mitre/util/jpa/JpaUtil.java
	openid-connect-server/.gitignore
	openid-connect-server/pom.xml
	openid-connect-server/src/main/java/org/mitre/oauth2/repository/impl/JpaAuthorizationCodeRepository.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2AuthorizationCodeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ClientDetailsEntityService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ProviderTokenService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultSystemScopeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/ChainedTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/JwtAssertionTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/view/TokenIntrospectionView.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/IntrospectionEndpoint.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/OAuthConfirmationController.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/RevocationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/ConnectOAuth2RequestFactory.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerAuthenticationProvider.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerClientAssertionTokenEndpointFilter.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/InvalidJwtSignatureException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UnknownUserInfoSchemaException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UserNotFoundException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaApprovedSiteRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaUserInfoRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultApprovedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultNonceService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultStatsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultUserInfoUserDetailsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultWhitelistedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/ConnectTokenEnhancer.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/TofuUserApprovalHandler.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/AbstractClientEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ClientInformationResponseView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ExceptionAsJSONView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonErrorView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/POCOUserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/StatsSummary.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/UserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ApprovedSiteAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/BlacklistAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientDynamicRegistrationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ManagerController.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/RequestObjectAuthorizationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/StatsAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoInterceptor.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/WhitelistAPI.java
	openid-connect-server/src/main/webapp/WEB-INF/tags/aboutContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/breadcrumbs.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/contactContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/copyright.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/header.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageAbout.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageContact.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageStats.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageWelcome.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/sidebar.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/statsContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/topbar.tag
	openid-connect-server/src/main/webapp/WEB-INF/views/about.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/approve.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/contact.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/exception/usernotfound.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/login.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/manage.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/stats.jsp
	pom.xml
=========================================================

+//@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_CLIENT')")
- @PreAuthorize("hasRole('ROLE_CLIENT')")
+//@PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/15aea61fbec078b90083f19515786dfae9668bd7

[COMMIT MESSAGE]:Applied code cleanup||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/856c0ea0b5c7812fadf7f14a611eb5fb9401f4c7

[COMMIT MESSAGE]:Merge commit '023dd440d4a0e6e59a14c88013837d79a77c74e0' into 1.1-merge||Conflicts:
	openid-connect-client/pom.xml
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/AuthorizationRequestImpl.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectingTokenService.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionAuthorityGranter.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionUrlProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationFilter.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisher.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisherMapping.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/JwkViewResolver.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/AuthRequestUrlBuilder.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/ClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticServerConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticSingleIssuerService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/ThirdPartyIssuerService.java
	openid-connect-client/src/test/java/org/mitre/openid/connect/client/AbstractOIDCAuthenticationFilterTest.java
	openid-connect-common/pom.xml
	openid-connect-common/src/main/java/org/mitre/jose/keystore/JWKSetKeyStore.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/JwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/DefaultJwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/JWKSetSigningAndValidationServiceCacheService.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/AuthorizationCodeEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/ClientDetailsEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2AccessTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2RefreshTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/SystemScope.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/AuthorizationCodeRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/OAuth2TokenRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/service/OAuth2TokenEntityService.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ConfigurationPropertiesBean.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ServerConfiguration.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/ApprovedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/BlacklistedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/Event.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/OIDCAuthenticationToken.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/WhitelistedSite.java
	openid-connect-common/src/main/java/org/mitre/util/jpa/JpaUtil.java
	openid-connect-server/.gitignore
	openid-connect-server/pom.xml
	openid-connect-server/src/main/java/org/mitre/oauth2/repository/impl/JpaAuthorizationCodeRepository.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2AuthorizationCodeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ClientDetailsEntityService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ProviderTokenService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultSystemScopeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/ChainedTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/JwtAssertionTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/view/TokenIntrospectionView.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/IntrospectionEndpoint.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/OAuthConfirmationController.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/RevocationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/ConnectOAuth2RequestFactory.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerAuthenticationProvider.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerClientAssertionTokenEndpointFilter.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/InvalidJwtSignatureException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UnknownUserInfoSchemaException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UserNotFoundException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaApprovedSiteRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaUserInfoRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultApprovedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultNonceService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultStatsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultUserInfoUserDetailsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultWhitelistedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/ConnectTokenEnhancer.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/TofuUserApprovalHandler.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/AbstractClientEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ClientInformationResponseView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ExceptionAsJSONView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonErrorView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/POCOUserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/StatsSummary.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/UserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ApprovedSiteAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/BlacklistAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientDynamicRegistrationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ManagerController.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/RequestObjectAuthorizationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/StatsAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoInterceptor.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/WhitelistAPI.java
	openid-connect-server/src/main/webapp/WEB-INF/tags/aboutContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/breadcrumbs.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/contactContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/copyright.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/header.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageAbout.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageContact.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageStats.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageWelcome.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/sidebar.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/statsContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/topbar.tag
	openid-connect-server/src/main/webapp/WEB-INF/views/about.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/approve.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/contact.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/exception/usernotfound.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/login.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/manage.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/stats.jsp
	pom.xml
=========================================================

+//@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_CLIENT')")
- @PreAuthorize("hasRole('ROLE_CLIENT')")
+//@PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")// TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/15aea61fbec078b90083f19515786dfae9668bd7

[COMMIT MESSAGE]:Applied code cleanup||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/1630814b9f5c7738b141156d9da2427bd257ef12

[COMMIT MESSAGE]:Marked classes where error handling needs to be added/changed||
=========================================================

- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")
+ @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('registration-token')")
- @PreAuthorize("hasRole('ROLE_CLIENT') and #oauth2.hasScope('" + OAuth2AccessTokenEntity.REGISTRATION_TOKEN_SCOPE + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/fbc3c4612846ee361f0b57338166929bb1f095ed

[COMMIT MESSAGE]:Introspection now draft spec compliant, requires client auth||Currently this is the client that originally sent the token, we want to have a way to bind other "clients" to this token as well, like resource services. Also want to let open calls, sometimes.
=========================================================

+ @PreAuthorize("hasRole('ROLE_CLIENT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/856c0ea0b5c7812fadf7f14a611eb5fb9401f4c7

[COMMIT MESSAGE]:Merge commit '023dd440d4a0e6e59a14c88013837d79a77c74e0' into 1.1-merge||Conflicts:
	openid-connect-client/pom.xml
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/AuthorizationRequestImpl.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectingTokenService.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionAuthorityGranter.java
	openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectionUrlProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationFilter.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/OIDCAuthenticationProvider.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisher.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/ClientKeyPublisherMapping.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/keypublisher/JwkViewResolver.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/AuthRequestUrlBuilder.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/ClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticClientConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticServerConfigurationService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticSingleIssuerService.java
	openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/ThirdPartyIssuerService.java
	openid-connect-client/src/test/java/org/mitre/openid/connect/client/AbstractOIDCAuthenticationFilterTest.java
	openid-connect-common/pom.xml
	openid-connect-common/src/main/java/org/mitre/jose/keystore/JWKSetKeyStore.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/JwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/DefaultJwtSigningAndValidationService.java
	openid-connect-common/src/main/java/org/mitre/jwt/signer/service/impl/JWKSetSigningAndValidationServiceCacheService.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/AuthorizationCodeEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/ClientDetailsEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2AccessTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2RefreshTokenEntity.java
	openid-connect-common/src/main/java/org/mitre/oauth2/model/SystemScope.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/AuthorizationCodeRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/repository/OAuth2TokenRepository.java
	openid-connect-common/src/main/java/org/mitre/oauth2/service/OAuth2TokenEntityService.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ConfigurationPropertiesBean.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/config/ServerConfiguration.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/ApprovedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/BlacklistedSite.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/Event.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/OIDCAuthenticationToken.java
	openid-connect-common/src/main/java/org/mitre/openid/connect/model/WhitelistedSite.java
	openid-connect-common/src/main/java/org/mitre/util/jpa/JpaUtil.java
	openid-connect-server/.gitignore
	openid-connect-server/pom.xml
	openid-connect-server/src/main/java/org/mitre/oauth2/repository/impl/JpaAuthorizationCodeRepository.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2AuthorizationCodeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ClientDetailsEntityService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ProviderTokenService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultSystemScopeService.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/ChainedTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/token/JwtAssertionTokenGranter.java
	openid-connect-server/src/main/java/org/mitre/oauth2/view/TokenIntrospectionView.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/IntrospectionEndpoint.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/OAuthConfirmationController.java
	openid-connect-server/src/main/java/org/mitre/oauth2/web/RevocationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/ConnectOAuth2RequestFactory.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerAuthenticationProvider.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/assertion/JwtBearerClientAssertionTokenEndpointFilter.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/InvalidJwtSignatureException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UnknownUserInfoSchemaException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/exception/UserNotFoundException.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaApprovedSiteRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/repository/impl/JpaUserInfoRepository.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultApprovedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultNonceService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultStatsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultUserInfoUserDetailsService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultWhitelistedSiteService.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/ConnectTokenEnhancer.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/token/TofuUserApprovalHandler.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/AbstractClientEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ClientInformationResponseView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/ExceptionAsJSONView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonEntityView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/JsonErrorView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/POCOUserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/StatsSummary.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/view/UserInfoView.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ApprovedSiteAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/BlacklistAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientDynamicRegistrationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/ManagerController.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/RequestObjectAuthorizationEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/StatsAPI.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoEndpoint.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/UserInfoInterceptor.java
	openid-connect-server/src/main/java/org/mitre/openid/connect/web/WhitelistAPI.java
	openid-connect-server/src/main/webapp/WEB-INF/tags/aboutContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/breadcrumbs.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/contactContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/copyright.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/header.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageAbout.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageContact.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageStats.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/landingPageWelcome.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/sidebar.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/statsContent.tag
	openid-connect-server/src/main/webapp/WEB-INF/tags/topbar.tag
	openid-connect-server/src/main/webapp/WEB-INF/views/about.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/approve.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/contact.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/exception/usernotfound.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/login.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/manage.jsp
	openid-connect-server/src/main/webapp/WEB-INF/views/stats.jsp
	pom.xml
=========================================================

+//@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_CLIENT')")
- @PreAuthorize("hasRole('ROLE_CLIENT')")
+//@PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")// TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/15aea61fbec078b90083f19515786dfae9668bd7

[COMMIT MESSAGE]:Applied code cleanup||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/8afab04544eae7a7a8be4ec86d38e0d12a65aa8d

[COMMIT MESSAGE]:whitespace, import, brace, annotation, and format cleanups||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here
+ @PreAuthorize("hasRole('ROLE_USER')") // TODO: this probably shouldn't be here

=========================================================
[CODE-CHANGE-URL]:https://github.com/sergeevii123/gwtcrud/commit/38cf23051880ef6b18b9d57fb021d97cc9e75c9b

[COMMIT MESSAGE]:1||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=7&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/Shepherd/commit/c60fa8d050c3af157e62993d18968dbe75d1e53c

[COMMIT MESSAGE]:refactor admin project||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/Shepherd/commit/976251cd4085aeab8483996b46fa3ba86e373f33

[COMMIT MESSAGE]:refactor config||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/marioasdf/function-grapher/commit/b196e2aada2d016fc73778bda0868e63a700d9f8

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("permitAll")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=8&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=9&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=10&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=11&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=12&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/raouldh/web-app/commit/e17ebff4cf82c8b3190f7c9d27f35a0375a96fb7

[COMMIT MESSAGE]:added account and blog functionalitie incl. spring securty||
=========================================================

+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/raouldh/web-app/commit/e17ebff4cf82c8b3190f7c9d27f35a0375a96fb7

[COMMIT MESSAGE]:added account and blog functionalitie incl. spring securty||
=========================================================

+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/motomen/my-qualification-work/commit/376a91bbefeb1feb535f4357b5b4ba97889fe8c1

[COMMIT MESSAGE]:add calculator calories||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/motomen/my-qualification-work/commit/376a91bbefeb1feb535f4357b5b4ba97889fe8c1

[COMMIT MESSAGE]:add calculator calories||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/motomen/my-qualification-work/commit/726ed8c920b9178393b2b31d45b55d8e6a7b960b

[COMMIT MESSAGE]:complete show food||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('Admin') or hasRole('User')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/motomen/my-qualification-work/commit/376a91bbefeb1feb535f4357b5b4ba97889fe8c1

[COMMIT MESSAGE]:add calculator calories||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/motomen/my-qualification-work/commit/5c0fbcb3a5e788db44ebede3779a01188627c3d0

[COMMIT MESSAGE]:add comments and try add rating||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/motomen/my-qualification-work/commit/726ed8c920b9178393b2b31d45b55d8e6a7b960b

[COMMIT MESSAGE]:complete show food||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('Admin') or hasRole('User')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/nazar-art/SpringInAction/commit/f365c09374613f658939706b8d89ebfe2f1452a6

[COMMIT MESSAGE]:Initial commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SPITTER') and #amount > 10")
+ @PreAuthorize("#input.length() <= 3")

=========================================================
[CODE-CHANGE-URL]:https://github.com/nazar-art/SpringInAction/commit/f365c09374613f658939706b8d89ebfe2f1452a6

[COMMIT MESSAGE]:Initial commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SPITTER') and #amount > 10")
+ @PreAuthorize("#input.length() <= 3")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=13&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/Shepherd/commit/976251cd4085aeab8483996b46fa3ba86e373f33

[COMMIT MESSAGE]:refactor config||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/Shepherd/commit/2af407f3e6f6ca93de9f7fd06f5ffc27a6740535

[COMMIT MESSAGE]:refactor config||
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cipster/Shepherd/commit/2af407f3e6f6ca93de9f7fd06f5ffc27a6740535

[COMMIT MESSAGE]:refactor config||
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
- @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_DOWNLOAD')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_SUPERUSER','ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/maxsap/springBootPrimefaces/commit/343193c3ce07ee54d74e0795e6d927e1e5eae0f9

[COMMIT MESSAGE]:Initial commit.||Things that remain to be fixed:
- Jersey-springrest OAuth security provider.
=========================================================

+ @PreAuthorize("isFullyAuthenticated() and hasRole('ADMIN')")
+ @PreAuthorize("isFullyAuthenticated() and hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/maxsap/springBootPrimefaces/commit/343193c3ce07ee54d74e0795e6d927e1e5eae0f9

[COMMIT MESSAGE]:Initial commit.||Things that remain to be fixed:
- Jersey-springrest OAuth security provider.
=========================================================

+ @PreAuthorize("isFullyAuthenticated() and hasRole('ADMIN')")
+ @PreAuthorize("isFullyAuthenticated() and hasRole('ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=14&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/spring-cloud-microservices/audit-service/commit/21712c114df41e40cfdebd1ad7b321821efc109e

[COMMIT MESSAGE]:enable cloud,discovery,actuator. move to data-rest.||
=========================================================

- @PreAuthorize("#oauth2.hasScope('audit-service/audit.write')")
+ @PreAuthorize("#oauth2.hasScope('audit-service/audit.write')")
+ @PreAuthorize("#oauth2.hasScope('audit-service/audit.write')")
+ @PreAuthorize("#oauth2.hasScope('audit-service/audit.write')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/openanalytics/RSB/commit/b3b384db57abe7422d58044f723ed2ea0ba6b4f0

[COMMIT MESSAGE]:review catalog security to better support non-partitionned mode||
=========================================================

- @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#applicationName, 'CATALOG_USER')")
- @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#applicationName, 'CATALOG_USER')")
- @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_ADMIN')")
+ @PreAuthorize("hasPermission(#applicationName, 'CATALOG_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/openanalytics/RSB/commit/1320ee40f4e17c16a01390c32227a9171c044100

[COMMIT MESSAGE]:redesign security permissions to support notion of app user and admin||
=========================================================

+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/openanalytics/RSB/commit/59e03f6c9930217889ec8fd1b76145fe98818d7b

[COMMIT MESSAGE]:#166 added support application-level security||
=========================================================

+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#job.applicationName, 'APPLICATION_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/openanalytics/RSB/commit/fa08fc384c53b0eb94e9d7d52792027c95db187c

[COMMIT MESSAGE]:added fine grained security control for apps||
=========================================================

- @PreAuthorize("hasPermission(#job.applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#job, 'APPLICATION_JOB')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/openanalytics/RSB/commit/59e03f6c9930217889ec8fd1b76145fe98818d7b

[COMMIT MESSAGE]:#166 added support application-level security||
=========================================================

+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#job.applicationName, 'APPLICATION_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/openanalytics/RSB/commit/8f44dfc87695633c90a51ec7d63bdcdd267e0a3e

[COMMIT MESSAGE]:secured direct processing||
=========================================================

+ @PreAuthorize("hasPermission(#job, 'APPLICATION_JOB')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/openanalytics/RSB/commit/fa08fc384c53b0eb94e9d7d52792027c95db187c

[COMMIT MESSAGE]:added fine grained security control for apps||
=========================================================

- @PreAuthorize("hasPermission(#job.applicationName, 'APPLICATION_USER')")
+ @PreAuthorize("hasPermission(#job, 'APPLICATION_JOB')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/bedmansz/files/commit/6647c54fb0c92cbe79f36c7d4ebed1b1a9641038

[COMMIT MESSAGE]:edit search||
=========================================================

+ @PreAuthorize("hasRole('user')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/bedmansz/files/commit/8279219e23ffa1e2f1c9b2768e11ff59ebe24339

[COMMIT MESSAGE]:edit login||
=========================================================

+ @PreAuthorize("hasRole('user')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Unidata/thredds/commit/c4749087cd1bed027ddaa962864114de81b59246

[COMMIT MESSAGE]:added spring security for user authentication/access control||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN') or #userName == authentication.name")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #userName == authentication.name")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #user.userName == authentication.name")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Unidata/thredds/commit/c4749087cd1bed027ddaa962864114de81b59246

[COMMIT MESSAGE]:added spring security for user authentication/access control||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN') or #userName == authentication.name")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #userName == authentication.name")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #user.userName == authentication.name")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=15&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=16&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/6dea2a0fa2d50e3b91c0077823880ae18aea52c0

[COMMIT MESSAGE]:More changes. Fixed the trash. All changes and next steps commented i…||…n README.md file.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/lhalam/JExercises/commit/a1a148a95f15e0f2e09d1db4241618c334ad47b6

[COMMIT MESSAGE]:add Users DataTable view||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/we2seek/sales/commit/0030b43b786fe62cb4004e4b44fb92342fdd326e

[COMMIT MESSAGE]:Add Plans||
=========================================================

+@PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/we2seek/sales/commit/0645df6bb89b2e86c05d78016ec93109d88f34ff

[COMMIT MESSAGE]:User monthly report with month selec capability||
=========================================================

+@PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/we2seek/sales/commit/71a4bc72490b21eb437d86c263e70816544ceff5

[COMMIT MESSAGE]:Deny access to delete, and edit other people's entries||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/we2seek/sales/commit/c516c3437ac8f0e3b796ed355bdeea2ab438d867

[COMMIT MESSAGE]:Add sales management||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/817237840498ada06aa99fd03fdc315a6b6fae0c

[COMMIT MESSAGE]:130 - the code was formatted by our template||
=========================================================

- @PreAuthorize("hasPermission(#dpu,'save')")
- @PreAuthorize("hasPermission(#dpu,'delete')")
+ @PreAuthorize("hasPermission(#dpu,'save')")
+ @PreAuthorize("hasPermission(#dpu,'delete')")
- @PreAuthorize("hasPermission(#user, 'save')")
- @PreAuthorize("hasPermission(#user, 'delete')")
+ @PreAuthorize("hasPermission(#user, 'save')")
+ @PreAuthorize("hasPermission(#user, 'delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/dd0dd9196846226bc5f37c4b2edb3eee7603a192

[COMMIT MESSAGE]:User can stop pipeline execution only if he started it.||
=========================================================

+ @PreAuthorize("hasPermission(#execution, 'save')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/3837204ee513fff763eac72389cd60cc5e861fc3

[COMMIT MESSAGE]:Author of DPU template can see all pipelines using it. #907||
=========================================================

+ @PreAuthorize("hasPermission(#dpu, 'delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UnifiedViews/Core/commit/638ebe28563e951b6a8393554a531048d8b47fd1

[COMMIT MESSAGE]:Facades split into interfaces and implementations||
=========================================================

- @PreAuthorize("hasPermission(#dpu,'save')")
- @PreAuthorize("hasPermission(#dpu,'delete')")
+ @PreAuthorize("hasPermission(#dpu,'save')")
+ @PreAuthorize("hasPermission(#dpu,'delete')")
- @PreAuthorize("hasPermission(#pipeline, 'copy')")
- @PreAuthorize("hasPermission(#pipeline,'save')")
- @PreAuthorize("hasPermission(#pipeline, 'delete')")
- @PreAuthorize("hasPermission(#dpu, 'view')")
+ @PreAuthorize("hasPermission(#pipeline, 'copy')")
+ @PreAuthorize("hasPermission(#pipeline,'save')")
+ @PreAuthorize("hasPermission(#pipeline, 'delete')")
+ @PreAuthorize("hasPermission(#dpu, 'view')")
- @PreAuthorize("hasPermission(#schedule, 'save')")
+ @PreAuthorize("hasPermission(#schedule, 'save')")
- @PreAuthorize("hasPermission(#user, 'save')")
- @PreAuthorize("hasPermission(#user, 'delete')")
+ @PreAuthorize("hasPermission(#user, 'save')")
+ @PreAuthorize("hasPermission(#user, 'delete')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/FormBuilderBackend/commit/5508392a623cb7e849121e4aaea6a901095e14d6

[COMMIT MESSAGE]:The backend is now fully functional to create forms and responses and…||… to make edits to them.

Know issues
-Delete resource is not available, will re-enable

Missing Features
-"nested questions" where one question is displayed if another question is answered particular way
-"themes" or tags which allow easy filtering of questions
=========================================================

- @PreAuthorize("hasPermission(#response, 'write') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#formResponse, 'write') or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasPermission(#response, 'write') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#formResponse, 'write') or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasPermission(#response, 'delete') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#formResponse, 'delete') or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasPermission(#question, 'write') or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasPermission(#question, 'write') or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasPermission(#question, 'delete') or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ROOT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/1eaa44c6b262d0b2229805469351344adb0a976e

[COMMIT MESSAGE]:Create, assign users, roles||
=========================================================

- @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('CREATE_RESOURCE')")
+ @PreAuthorize("hasRole('CREATE_ROLE')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/1eaa44c6b262d0b2229805469351344adb0a976e

[COMMIT MESSAGE]:Create, assign users, roles||
=========================================================

- @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('CREATE_RESOURCE')")
+ @PreAuthorize("hasRole('CREATE_ROLE')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/f68be6d7c2e6066a528daa082cd1cb1c881b0b65

[COMMIT MESSAGE]:Controller, jsp, service, dao impl||
=========================================================

+ @PreAuthorize("hasRole('Admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/1eaa44c6b262d0b2229805469351344adb0a976e

[COMMIT MESSAGE]:Create, assign users, roles||
=========================================================

- @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('CREATE_RESOURCE')")
+ @PreAuthorize("hasRole('CREATE_ROLE')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/f68be6d7c2e6066a528daa082cd1cb1c881b0b65

[COMMIT MESSAGE]:Controller, jsp, service, dao impl||
=========================================================

+ @PreAuthorize("hasRole('Admin')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=17&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/1eaa44c6b262d0b2229805469351344adb0a976e

[COMMIT MESSAGE]:Create, assign users, roles||
=========================================================

- @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('CREATE_RESOURCE')")
+ @PreAuthorize("hasRole('CREATE_ROLE')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/1eaa44c6b262d0b2229805469351344adb0a976e

[COMMIT MESSAGE]:Create, assign users, roles||
=========================================================

- @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('CREATE_RESOURCE')")
+ @PreAuthorize("hasRole('CREATE_ROLE')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/f68be6d7c2e6066a528daa082cd1cb1c881b0b65

[COMMIT MESSAGE]:Controller, jsp, service, dao impl||
=========================================================

+ @PreAuthorize("hasRole('Admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/1eaa44c6b262d0b2229805469351344adb0a976e

[COMMIT MESSAGE]:Create, assign users, roles||
=========================================================

- @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('CREATE_RESOURCE')")
+ @PreAuthorize("hasRole('CREATE_ROLE')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('CREATE_USER')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")
+ @PreAuthorize("hasRole('ASSIGN_ROLE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/venkateshragi/RolesAndPermissions/commit/f68be6d7c2e6066a528daa082cd1cb1c881b0b65

[COMMIT MESSAGE]:Controller, jsp, service, dao impl||
=========================================================

+ @PreAuthorize("hasRole('Admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/molgenis/molgenis/commit/40996148008db8914b9c2582be80c24d74921d12

[COMMIT MESSAGE]:Adding classes to molgenis-core-ui.||Removed from OMX and PALGA where duplicated
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SU')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/oegegr/java-blog-aggregator/commit/67f6afec428c5327ee6047eef0fa8c6d9e74cf94

[COMMIT MESSAGE]:-validation||-jquery
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/europeana/Europeana-Cloud/commit/ecb1aa5b38143d305f1911d0bab28bdda63dbd0b

[COMMIT MESSAGE]:ECL-385 - fixed aas spring context||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/europeana/Europeana-Cloud/commit/6e54aeec63b13cc842510a2783af22d1845619d5

[COMMIT MESSAGE]:ECL-332: aas-rest is now admin-only, + added aas-rest-client||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/europeana/Europeana-Cloud/commit/58a24a399dcfe494c56748cd82b5d79197a445db

[COMMIT MESSAGE]:ECL-299 aas-rest cleanup||
=========================================================

-// @PreAuthorize("isAuthenticated()")
-// @PreAuthorize("hasPermission(#cloudId, 'eu.europeana.cloud.common.model.CloudId', delete)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/europeana/Europeana-Cloud/commit/7e721925fb2d1073dd4624818593264342056738

[COMMIT MESSAGE]:heavy refactoring on UIS, homogenizing naming conventions||authentication has now rest service and has some basic testing
missing still is integration with other services and authorization testing
=========================================================

+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("hasPermission(#cloudId, 'eu.europeana.cloud.common.model.CloudId', delete)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/861830bcc4cb35c5f7692b45ad44adc4d4eaca2d

[COMMIT MESSAGE]:JC-2073 Deletion of comments implementation||Now comments from Q&A topics can be deleted by marking them as deleted.
Fro this new database column DELETION_DATE was created.
We use hibernate "where" clause to load only comments which is not marked as deleted.
=========================================================

+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.EDIT_OWN_POSTS') and " +
+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/b07dc6100a6f7d126ae5807e1771efcaa4f331ee

[COMMIT MESSAGE]:#JC-2031:Implemented service layer of vote logic||To vote for posts from core forum PostService should be used
To vote for posts from plugins created separate service in plugin API
=========================================================

+ @PreAuthorize("hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.CREATE_POSTS') " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/167846b930534c8aa387736d23326363bc25d47e

[COMMIT MESSAGE]:#JC-2023:Refactoried code review to use same table as topic||Now we have different topic types 'discussion' and 'code review' to determine wathever this topic code review or not. Also this approach allow plugins store custom topic types

Code review comment now relates to post intead of code review itself

Code review entity removed now
=========================================================

- @PreAuthorize("(hasPermission(#codeReview.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +
+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +
- @PreAuthorize("hasPermission(#topicDto.branch.id, 'BRANCH', 'BranchPermission.CREATE_POSTS')")
+ @PreAuthorize("( not #topicDto.codeReview " +
- @PreAuthorize("hasPermission(#topicDto.branch.id, 'BRANCH', 'BranchPermission.CREATE_CODE_REVIEW')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/11838a7cb5559aa3ba2b49f8e21bea25bfac70e1

[COMMIT MESSAGE]:Merge remote-tracking branch 'origin/JC-1494'||Conflicts:
	jcommune-service/src/main/java/org/jtalks/jcommune/service/transactional/TransactionalPostService.java
=========================================================

- @PreAuthorize("hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.VIEW_TOPICS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/4055f14a946b7b1e649f640db4a7d02d3c71638a

[COMMIT MESSAGE]:#JC-1494 Removed usages of the setPostIndex method||
=========================================================

- @PreAuthorize("hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.VIEW_TOPICS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/e940596fa4078699beaa9e04eff8b1b9db187b7f

[COMMIT MESSAGE]:JC-2073 Fixed permissions issue, implemented localization||
=========================================================

- @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.EDIT_OWN_POSTS') and " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/861830bcc4cb35c5f7692b45ad44adc4d4eaca2d

[COMMIT MESSAGE]:JC-2073 Deletion of comments implementation||Now comments from Q&A topics can be deleted by marking them as deleted.
Fro this new database column DELETION_DATE was created.
We use hibernate "where" clause to load only comments which is not marked as deleted.
=========================================================

+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.EDIT_OWN_POSTS') and " +
+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/167846b930534c8aa387736d23326363bc25d47e

[COMMIT MESSAGE]:#JC-2023:Refactoried code review to use same table as topic||Now we have different topic types 'discussion' and 'code review' to determine wathever this topic code review or not. Also this approach allow plugins store custom topic types

Code review comment now relates to post intead of code review itself

Code review entity removed now
=========================================================

- @PreAuthorize("(hasPermission(#codeReview.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +
+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +
- @PreAuthorize("hasPermission(#topicDto.branch.id, 'BRANCH', 'BranchPermission.CREATE_POSTS')")
+ @PreAuthorize("( not #topicDto.codeReview " +
- @PreAuthorize("hasPermission(#topicDto.branch.id, 'BRANCH', 'BranchPermission.CREATE_CODE_REVIEW')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/molgenis/molgenis/commit/7c0493f301b61433664f46a90473cc0e0e911266

[COMMIT MESSAGE]:Improved user manager. Both users and groups can now easily be create…||…d, updated, and (de)activated.
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SU')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/molgenis/molgenis/commit/2ab8d7c0e739e3682b3a753969a85bf34170036a

[COMMIT MESSAGE]:Merge branch 'master' of https://github.com/molgenis/molgenis||Conflicts:
	molgenis-app-omx/src/main/java/org/molgenis/omx/WebAppDatabasePopulatorServiceImpl.java
	molgenis-omx-protocolviewer/src/main/java/org/molgenis/omx/study/StudyDataRequestDecorator.java
	molgenis-security/src/main/java/org/molgenis/security/account/AccountService.java
	molgenis-security/src/main/java/org/molgenis/security/user/MolgenisUserService.java
	molgenis-security/src/main/java/org/molgenis/security/user/MolgenisUserServiceImpl.java
	molgenis-security/src/main/java/org/molgenis/security/user/UserAccountController.java
	molgenis-security/src/main/java/org/molgenis/security/usermanager/UserManagerServiceImpl.java
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SU', 'ROLE_PLUGIN_READ_USERACCOUNT')")
+ @PreAuthorize("hasAnyRole('ROLE_SU', 'ROLE_PLUGIN_WRITE_USERACCOUNT')")
+ @PreAuthorize("hasAnyRole('ROLE_SU', 'ROLE_PLUGIN_READ_USERACCOUNT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/molgenis/molgenis/commit/7a32d1b45e8049fd9abcfbc1db85986bd8c5eb23

[COMMIT MESSAGE]:hierarchical permissions in permission manager||
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_WRITE_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_WRITE_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_WRITE_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_WRITE_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=18&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/e940596fa4078699beaa9e04eff8b1b9db187b7f

[COMMIT MESSAGE]:JC-2073 Fixed permissions issue, implemented localization||
=========================================================

- @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.EDIT_OWN_POSTS') and " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/861830bcc4cb35c5f7692b45ad44adc4d4eaca2d

[COMMIT MESSAGE]:JC-2073 Deletion of comments implementation||Now comments from Q&A topics can be deleted by marking them as deleted.
Fro this new database column DELETION_DATE was created.
We use hibernate "where" clause to load only comments which is not marked as deleted.
=========================================================

+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.EDIT_OWN_POSTS') and " +
+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/jtalks-org/jcommune/commit/167846b930534c8aa387736d23326363bc25d47e

[COMMIT MESSAGE]:#JC-2023:Refactoried code review to use same table as topic||Now we have different topic types 'discussion' and 'code review' to determine wathever this topic code review or not. Also this approach allow plugins store custom topic types

Code review comment now relates to post intead of code review itself

Code review entity removed now
=========================================================

- @PreAuthorize("(hasPermission(#codeReview.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +
+ @PreAuthorize("(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and " +
- @PreAuthorize("hasPermission(#topicDto.branch.id, 'BRANCH', 'BranchPermission.CREATE_POSTS')")
+ @PreAuthorize("( not #topicDto.codeReview " +
- @PreAuthorize("hasPermission(#topicDto.branch.id, 'BRANCH', 'BranchPermission.CREATE_CODE_REVIEW')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/molgenis/molgenis/commit/7c0493f301b61433664f46a90473cc0e0e911266

[COMMIT MESSAGE]:Improved user manager. Both users and groups can now easily be create…||…d, updated, and (de)activated.
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SU')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/molgenis/molgenis/commit/2ab8d7c0e739e3682b3a753969a85bf34170036a

[COMMIT MESSAGE]:Merge branch 'master' of https://github.com/molgenis/molgenis||Conflicts:
	molgenis-app-omx/src/main/java/org/molgenis/omx/WebAppDatabasePopulatorServiceImpl.java
	molgenis-omx-protocolviewer/src/main/java/org/molgenis/omx/study/StudyDataRequestDecorator.java
	molgenis-security/src/main/java/org/molgenis/security/account/AccountService.java
	molgenis-security/src/main/java/org/molgenis/security/user/MolgenisUserService.java
	molgenis-security/src/main/java/org/molgenis/security/user/MolgenisUserServiceImpl.java
	molgenis-security/src/main/java/org/molgenis/security/user/UserAccountController.java
	molgenis-security/src/main/java/org/molgenis/security/usermanager/UserManagerServiceImpl.java
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SU', 'ROLE_PLUGIN_READ_USERACCOUNT')")
+ @PreAuthorize("hasAnyRole('ROLE_SU', 'ROLE_PLUGIN_WRITE_USERACCOUNT')")
+ @PreAuthorize("hasAnyRole('ROLE_SU', 'ROLE_PLUGIN_READ_USERACCOUNT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/molgenis/molgenis/commit/7a32d1b45e8049fd9abcfbc1db85986bd8c5eb23

[COMMIT MESSAGE]:hierarchical permissions in permission manager||
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_READ_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_WRITE_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_WRITE_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_WRITE_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")
- @PreAuthorize("hasAnyRole('ROLE_SU','ROLE_PLUGIN_WRITE_PLUGINPERMISSIONMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/term1n/mongoWebClient/commit/8e6f2096f4db95f4308c0357f440d4c1bce86c69

[COMMIT MESSAGE]:redesign of user management, bugfixes||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_PRUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_PRUSER','ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/term1n/mongoWebClient/commit/8c1a72a5098841c2a7eb382b811842fe8ea88f51

[COMMIT MESSAGE]:role-based security policy, beta version||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER')")
+ @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER')")
+ @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/term1n/mongoWebClient/commit/8e6f2096f4db95f4308c0357f440d4c1bce86c69

[COMMIT MESSAGE]:redesign of user management, bugfixes||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_PRUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_PRUSER','ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/term1n/mongoWebClient/commit/8c1a72a5098841c2a7eb382b811842fe8ea88f51

[COMMIT MESSAGE]:role-based security policy, beta version||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER')")
+ @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER')")
+ @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/term1n/mongoWebClient/commit/268639a7f456377bdf8effc5e3bf1925934addac

[COMMIT MESSAGE]:role-based security policy, beginning||
=========================================================

+@PreAuthorize("hasRole('ROLE_PRUSER')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_PRUSER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/term1n/mongoWebClient/commit/8e6f2096f4db95f4308c0357f440d4c1bce86c69

[COMMIT MESSAGE]:redesign of user management, bugfixes||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_PRUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_PRUSER','ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/term1n/mongoWebClient/commit/8c1a72a5098841c2a7eb382b811842fe8ea88f51

[COMMIT MESSAGE]:role-based security policy, beta version||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER')")
+ @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_PRUSER')")
+ @PreAuthorize("hasRole('ROLE_PRUSER','ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/term1n/mongoWebClient/commit/268639a7f456377bdf8effc5e3bf1925934addac

[COMMIT MESSAGE]:role-based security policy, beginning||
=========================================================

+@PreAuthorize("hasRole('ROLE_PRUSER')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_PRUSER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yeyan/spring-test/commit/acae29aa99388d169bfaa2ae868e285358a4e9a4

[COMMIT MESSAGE]:Initial commit||
=========================================================

+ @PreAuthorize("hasPermission(#username, 'isAdmin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Patouche/blog-testing/commit/03f1eb0677da5b24d86e716f3e55156d4226667a

[COMMIT MESSAGE]:Add DMS in application||This will be usefull to show how to handle fs and using the @Rule TemporayFolder
=========================================================

+ @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")
+ @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Patouche/blog-testing/commit/bd2d7052cc739e5dd4bac9e0d565e16319d0c5c4

[COMMIT MESSAGE]:Create a custom repository for full text search||
=========================================================

+ @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")
- @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Patouche/blog-testing/commit/03f1eb0677da5b24d86e716f3e55156d4226667a

[COMMIT MESSAGE]:Add DMS in application||This will be usefull to show how to handle fs and using the @Rule TemporayFolder
=========================================================

+ @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")
+ @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Patouche/blog-testing/commit/bd2d7052cc739e5dd4bac9e0d565e16319d0c5c4

[COMMIT MESSAGE]:Create a custom repository for full text search||
=========================================================

+ @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")
- @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Patouche/blog-testing/commit/7ba42abbcb61d0c3b285e99e7bb871d7be128f8a

[COMMIT MESSAGE]:Fix root user event||
=========================================================

- @PreAuthorize("hasRole('ADMIN', 'EDITOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Patouche/blog-testing/commit/b73dca0e0f59e0c1da8d527a08711e1a8a4b9436

[COMMIT MESSAGE]:Add less and move some files||
=========================================================

+ @PreAuthorize("hasRole('ADMIN', 'EDITOR')")
+ @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")
+ @PreAuthorize("hasAnyRole('ADMIN','EDITOR')")
- @PreAuthorize("hasRole('ADMIN')")
- @PreAuthorize("hasRole('ADMIN')")
- @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/romoAlmudena/tfg/commit/2d1b7b650117e4538a6823c9480dc20a9bfaf1d4

[COMMIT MESSAGE]:Renombrado proyecto.||Reorganizacion de los módulos.

Funcionando.

TODO
Next Step ---- Poner todos en todos los services de los módulos el estilo del de academic term (se deben pasar los objetos)
=========================================================

-// @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_PROFESSOR')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=19&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/81342f4978a6b9f284f9233727a3161ea768bf6c

[COMMIT MESSAGE]:Made the names for travel expense classes much shorter. More package …||…structure.
=========================================================

- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("(isAuthenticated() and @travelExpenseReportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/2b064dcb11054571b854b51e4232dab891e21829

[COMMIT MESSAGE]:TRACKR-174 - Track sick days||
=========================================================

+ @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e0c9ab7ed6615e9a60cd2c88a6806274ccf8c3d3

[COMMIT MESSAGE]:TRACKR-123 - Implement address book||Added an address book controller.
=========================================================

+ @PreAuthorize("hasRole('ROLE_EMPLOYEE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/81342f4978a6b9f284f9233727a3161ea768bf6c

[COMMIT MESSAGE]:Made the names for travel expense classes much shorter. More package …||…structure.
=========================================================

- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("(isAuthenticated() and @travelExpenseReportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/8e237e54e34789d92b23bc7bfd8deb8f3e98b7d0

[COMMIT MESSAGE]:TRACKR-79 - Tracking of travel expenses||Travel expense reports are now approvable and rejectable by supervisors
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/3076e018c2d6758aa5e53ec42f4effd51083220e

[COMMIT MESSAGE]:TRACKR-79 - Tracking of travel expenses||New travel expenses are only creatable if the report is not accepted
Translations
Don't display the add travel expense form on accepted reports
=========================================================

- @PreAuthorize("#travelExpense.report.employee.id == principal.id")
+ @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() && @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() && @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/1ae0fe747203078b61002f4105c59edb2828cc4c

[COMMIT MESSAGE]:TRACKR-79 - Tracking of travel expenses||Deleting and editing of accepted travel expenses is forbidden for employees
=========================================================

- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( #travelExpense.report.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() && @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( #travelExpense.report.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() && @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/970bbc7afd1e3f581cdc944ea1dfb97977c000ed

[COMMIT MESSAGE]:TRACKR-79 - Tracking of travel expenses||Migrated tests
TravelExpenseEventHandler added
=========================================================

+ @PreAuthorize("#travelExpense.report.employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( #travelExpense.report.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( #travelExpense.report.employee.id == principal.id )")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/81342f4978a6b9f284f9233727a3161ea768bf6c

[COMMIT MESSAGE]:Made the names for travel expense classes much shorter. More package …||…structure.
=========================================================

- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("(isAuthenticated() and @travelExpenseReportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/81342f4978a6b9f284f9233727a3161ea768bf6c

[COMMIT MESSAGE]:Made the names for travel expense classes much shorter. More package …||…structure.
=========================================================

- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("(isAuthenticated() and @travelExpenseReportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/2c865e168d558d1b07eb8c09bd0f06d9d3310c02

[COMMIT MESSAGE]:TRACKR-231 - Delete approved vacation request||Changed security requirements for deleting vacation requests, supervisors now can not delete their own requests anymore.
=========================================================

- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/9041b998f73843c2e2232fb456bee37c695a15b3

[COMMIT MESSAGE]:TRACKR-203 - Supervisors can create vacation requests for other emplo…||…yees

Now admin or owner is needed to create a vacation request.
=========================================================

- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/089f18681dd5d0b6e567f3267a70fe7cf7f30ed6

[COMMIT MESSAGE]:TRACKR-54 - Request vacation||
=========================================================

- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/f1b572837ad84f263dc405eda34e60017739f441

[COMMIT MESSAGE]:TRACKR-55 - Approve and reject vacation requests||Supervisor may not edit his own vacation requests.
=========================================================

- @PreAuthorize("hasRole('ROLE_SUPERVISOR')")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e95acdf019c27d69c989913538180d66ab6f45b5

[COMMIT MESSAGE]:TRACKR-54 - Request vacation||Added further vacation request tests and an event handler
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR')")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=20&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/81342f4978a6b9f284f9233727a3161ea768bf6c

[COMMIT MESSAGE]:Made the names for travel expense classes much shorter. More package …||…structure.
=========================================================

- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("(isAuthenticated() and @travelExpenseReportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/2b064dcb11054571b854b51e4232dab891e21829

[COMMIT MESSAGE]:TRACKR-174 - Track sick days||
=========================================================

+ @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/04e9d813a42a5879f5a44dc511fa39e6219de5e3

[COMMIT MESSAGE]:TRACKR-158 - Supervisors can approve their own vacation requests via …||…the API

Replaced @PostAuthorize with @PreAuthorize and based the service on vacation requests instead of ids.
Also implemented a generic way for new conversion services from string (id) to our entities.
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/82986570d3870c2e41eb27b0f2d8e9e50747f6ec

[COMMIT MESSAGE]:TRACKR-60 - Automatically approve vacation request||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/81342f4978a6b9f284f9233727a3161ea768bf6c

[COMMIT MESSAGE]:Made the names for travel expense classes much shorter. More package …||…structure.
=========================================================

- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("(isAuthenticated() and @travelExpenseReportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/c6320f4ab6055a01eed26977d147eec9fdc066f4

[COMMIT MESSAGE]:TRACKR-164 - Add vacation reporting||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/82986570d3870c2e41eb27b0f2d8e9e50747f6ec

[COMMIT MESSAGE]:TRACKR-60 - Automatically approve vacation request||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e8920459f383bda1a6dbd090edb26831981477e3

[COMMIT MESSAGE]:TRACKR-55 - Approve and reject vacation requests||Wrote tests for the repository find methods
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e95acdf019c27d69c989913538180d66ab6f45b5

[COMMIT MESSAGE]:TRACKR-54 - Request vacation||Added further vacation request tests and an event handler
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR')")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("denyAll()")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/006ab0533fba6e0cd3011aa1ae46b03a92b7c6ef

[COMMIT MESSAGE]:TRACKR-221 - Use ?. operator in principal id checks for security||
=========================================================

- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or (isAuthenticated() and #id == principal.id)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("isAuthenticated() and @travelExpenseEventHandler.canCreate(principal.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canEdit(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @travelExpenseEventHandler.canDelete(principal.id, #travelExpense) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #comment.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #travelExpenseReport.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
- @PreAuthorize("(#sickDays.employee.id == principal.id and isAuthenticated()) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("(isAuthenticated() and #sickDays.employee.id == principal.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
- @PreAuthorize("isAuthenticated() and #employee.id == principal.id")
+ @PreAuthorize("#employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( isAuthenticated() and principal.id == #vacationRequest.employee.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and @vacationRequestEventHandler.employeeCanDeleteRequest(principal.id, #vacationRequest) )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @vacationRequestEventHandler.employeeCanDeleteRequest(principal?.id, #vacationRequest)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and principal.id == #employee.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
- @PreAuthorize("#workTime.employee.id == principal.id")
+ @PreAuthorize("#workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN') or ( #workTime.employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or ( isAuthenticated() and #employee.id == principal.id )")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/3bb05a53c7987f840223ea83a25308ca478cd4aa

[COMMIT MESSAGE]:Added a string to employee converter.||
=========================================================

- @PreAuthorize("isAuthenticated() and #employeeId == principal.id")
+ @PreAuthorize("isAuthenticated() and #employee.id == principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/e9146edeec352d15c1cf81872f146fdade0c7e74

[COMMIT MESSAGE]:Convert trackr to Spring Boot.||This introduces a lot of new stuff and removes some.

Features that are not anymore in trackr are:
* Credentials and authorities. They are provided from the tech portal.
* Automatic deactivation of employees.

The Spring profiles in trackr are less technical and allow gradually
switching on and off features instead of being just prod, qs and dev.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("denyAll()")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #id == principal?.id")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.id, #travelExpense)")
+ @PreAuthorize("@travelExpenseEventHandler.canCreate(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canEdit(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.id, #travelExpense)")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or @travelExpenseEventHandler.canDelete(principal?.username, #travelExpense)")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.id) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("@reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal?.username) or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("#travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("#travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.email != principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #comment.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#sickDays.employee.id == principal?.id or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#sickDays.employee.email == principal?.username or hasRole('ROLE_ADMIN')")
- @PreAuthorize("#employee.id == principal?.id")
+ @PreAuthorize("#employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.id == #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or principal?.username == #vacationRequest.employee.email")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.id != #vacationRequest.employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and principal?.username != #vacationRequest.employee.email")
- @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.id, #vacationRequest) ) " +
+ @PreAuthorize("( hasRole('ROLE_SUPERVISOR') and @vacationRequestEventHandler.supervisorCanDeleteRequest(principal?.username, #vacationRequest) ) " +
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.id == #employee.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or principal?.username == #employee.email")
- @PreAuthorize("#workTime.employee.id == principal?.id")
+ @PreAuthorize("#workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or #workTime.employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.id == principal?.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #employee.email == principal?.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/d306de90ace79a91f2d5366462e684fb4b94d85b

[COMMIT MESSAGE]:TRACKR-240 - Enable employees to download expense reports||Changed security expression
Added test
=========================================================

- @PreAuthorize("hasRole('ROLE_SUPERVISOR')")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') or #travelExpenseReport.employee.id == principal?.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/techdev-solutions/trackr-backend/commit/81342f4978a6b9f284f9233727a3161ea768bf6c

[COMMIT MESSAGE]:Made the names for travel expense classes much shorter. More package …||…structure.
=========================================================

- @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
- @PreAuthorize("(isAuthenticated() and @travelExpenseReportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("(isAuthenticated() and @reportEventHandler.employeeCanDeleteReport(#travelExpenseReport, principal.id)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#travelExpenseReport.employee.id == principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")
+ @PreAuthorize("hasRole('ROLE_SUPERVISOR') and #travelExpenseReport.employee.id != principal.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/encuestame/encuestame/commit/7776fac0192db2ad2443b00c1d83f878c63283d5

[COMMIT MESSAGE]:Separated mvc in 4 modules||Poll creation bug fixes
achieved i18n integration
=========================================================

+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_EDITOR')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_EDITOR')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/encuestame/encuestame/commit/26e1a5bc88673d3f9e762226ab0ed3d136dac5de

[COMMIT MESSAGE]:Added additional test TPController||
=========================================================

- @PreAuthorize("hasRole('ENCUESTAME_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/encuestame/encuestame/commit/7776fac0192db2ad2443b00c1d83f878c63283d5

[COMMIT MESSAGE]:Separated mvc in 4 modules||Poll creation bug fixes
achieved i18n integration
=========================================================

+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_EDITOR')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_EDITOR')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=21&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/encuestame/encuestame/commit/87ef9b3d9fa6adb2145bf9380d3c3485f0f73aeb

[COMMIT MESSAGE]:ENCUESTAME-518 Poll create view bug fixes||
=========================================================

+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/encuestame/encuestame/commit/7776fac0192db2ad2443b00c1d83f878c63283d5

[COMMIT MESSAGE]:Separated mvc in 4 modules||Poll creation bug fixes
achieved i18n integration
=========================================================

+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
- @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_EDITOR')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_EDITOR')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+// @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_OWNER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")
+ @PreAuthorize("hasRole('ENCUESTAME_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/felansu/Qr-BiblioKode-Ws/commit/9569b4e356f6cd24a9ec00cab880efb2d2bfe62f

[COMMIT MESSAGE]:-Atualizada versão do postgres||-Implementado diagrama ObjectAid
-Criada classe abstract Pessoa
-Criadas classes Funcionario, Aluno e Autor <--extendem Pessoa
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/uchicago-sg/shibboleth-mitreid-connect/commit/bdd7ab0bfcee7cd94c244e502e69d958a7f2e076

[COMMIT MESSAGE]:Initial commit.||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cdiepend/hh/commit/c6354357c2ba2d321246528c1236108ad986cf06

[COMMIT MESSAGE]:Inladen project||eerste load van het project
=========================================================

+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cdiepend/hh/commit/c6354357c2ba2d321246528c1236108ad986cf06

[COMMIT MESSAGE]:Inladen project||eerste load van het project
=========================================================

+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/silbermm/anchorotr/commit/66ef146e869093fdf4952d2570beb53d813f81ba

[COMMIT MESSAGE]:fixed menuitem query to orderby weight||
=========================================================

+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/silbermm/anchorotr/commit/38d5a1a7dda7d2c61caaa9eb49966977d4833b95

[COMMIT MESSAGE]:more fixes for the Mail settings||
=========================================================

+@PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/silbermm/anchorotr/commit/33bf010410013d5b2d1ab926a76dede9c3c2facf

[COMMIT MESSAGE]:Fixed bug when adding new item and item would show in multiple||catagories
Added editing menu item capability
Secured methods on backend
=========================================================

+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/silbermm/anchorotr/commit/33bf010410013d5b2d1ab926a76dede9c3c2facf

[COMMIT MESSAGE]:Fixed bug when adding new item and item would show in multiple||catagories
Added editing menu item capability
Secured methods on backend
=========================================================

+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/silbermm/anchorotr/commit/66ef146e869093fdf4952d2570beb53d813f81ba

[COMMIT MESSAGE]:fixed menuitem query to orderby weight||
=========================================================

+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/silbermm/anchorotr/commit/33bf010410013d5b2d1ab926a76dede9c3c2facf

[COMMIT MESSAGE]:Fixed bug when adding new item and item would show in multiple||catagories
Added editing menu item capability
Secured methods on backend
=========================================================

+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")
+ @PreAuthorize("hasRole('Administrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=22&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=23&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sophia2901/assignment1/commit/75395d27cbd4fdcd251a4d1acd17ceff97d6a1c4

[COMMIT MESSAGE]:validation and security check||
=========================================================

+////@PreAuthorize("hasRole('MODERATOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yoshutch/mybyu/commit/55f103f31f1162af4f634091975943eb57aedd63

[COMMIT MESSAGE]:UP-3515: Provide a new REST endpoint for permissions at /assignments/…||…{principalType}/{id}.json
=========================================================

+ @PreAuthorize("(#entityType == 'person' and #id == authentication.name) or hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yoshutch/mybyu/commit/0ecdf72b867c62e90ce3cb57860e216e571ab476

[COMMIT MESSAGE]:UP-3311 Fix package name for AuthorizableActivity||
=========================================================

- @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
- @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
- @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
- @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yoshutch/mybyu/commit/d0c37171d5da56d4b2681cfd56da45293771fc2b

[COMMIT MESSAGE]:UP-2950 Adding support and configuration for Spring Security annotati…||…on-based permission expressions under a pre-authentication setup. This commit also includes adding support for SpringMVC's ContentNegotiatingViewResolver.
=========================================================

+ @PreAuthorize("hasPermission('string', 'REST', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yoshutch/mybyu/commit/d0c37171d5da56d4b2681cfd56da45293771fc2b

[COMMIT MESSAGE]:UP-2950 Adding support and configuration for Spring Security annotati…||…on-based permission expressions under a pre-authentication setup. This commit also includes adding support for SpringMVC's ContentNegotiatingViewResolver.
=========================================================

+ @PreAuthorize("hasPermission('string', 'REST', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=24&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/yoshutch/mybyu/commit/d0c37171d5da56d4b2681cfd56da45293771fc2b

[COMMIT MESSAGE]:UP-2950 Adding support and configuration for Spring Security annotati…||…on-based permission expressions under a pre-authentication setup. This commit also includes adding support for SpringMVC's ContentNegotiatingViewResolver.
=========================================================

+ @PreAuthorize("hasPermission('string', 'REST', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/gregturn/spring-a-gram/commit/e6c2210104c015f8f21b89d50256249294fa3fa7

[COMMIT MESSAGE]:Secure save/update||Resolves #29
=========================================================

+ @PreAuthorize("#item?.user == null or #item?.user?.name == authentication?.name")

=========================================================
[CODE-CHANGE-URL]:https://github.com/gregturn/spring-a-gram/commit/41f229a0c1d631850263b53fe0bc6a45bd1e2406

[COMMIT MESSAGE]:Switch on security, hide passwords||
=========================================================

+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("#item?.user?.name == authentication?.name")
+ @PreAuthorize("@itemRepository.findOne(#id)?.user?.name == authentication?.name")

=========================================================
[CODE-CHANGE-URL]:https://github.com/USAID-DELIVER-PROJECT/elmis/commit/c0fc6e9b8bb2996d59b4abf51804b88b7f0d7a75

[COMMIT MESSAGE]:<teklutesfayeh@gmail.com>||this is the first version commit for help module
=========================================================

+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/lunias/webb/commit/7afd7faab6ab572fd316b19e72025a4ec2e2401f

[COMMIT MESSAGE]:updating api locations in oauth-server frontend||
=========================================================

+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_WRITE + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_WRITE + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/lunias/webb/commit/f2c2733d06e035e1462d8f115983f7e491d8fd39

[COMMIT MESSAGE]:added user service||
=========================================================

+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/lunias/webb/commit/8b785a813a5397f89752ccb5a15c04080f70f945

[COMMIT MESSAGE]:started adding front-end to oauth-server||
=========================================================

+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/lunias/webb/commit/7afd7faab6ab572fd316b19e72025a4ec2e2401f

[COMMIT MESSAGE]:updating api locations in oauth-server frontend||
=========================================================

+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_WRITE + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_WRITE + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/lunias/webb/commit/7afd7faab6ab572fd316b19e72025a4ec2e2401f

[COMMIT MESSAGE]:updating api locations in oauth-server frontend||
=========================================================

+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_WRITE + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_WRITE + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/cda41387c05b0d3a4d290f1f4c81ce7e3b7ac4c9

[COMMIT MESSAGE]:OVT-8919: Poistetaan autentikointitarve koodin download rajapinnalta.||
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/89559f08d15446d936674615b3be8458736cd45b

[COMMIT MESSAGE]:OVT-7653: Added KoodistoValidationException. Added new default error …||…messages for each exception and the corresponding messages for koodisto-ui. Removed the hard coded error messages. Removed deprecated exceptions for now optional fields (description and short name). Changed CodesResource to return only valid HTTP responses.
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/8647d6458e04b4fcb13ee83289c506e2b2a81d93

[COMMIT MESSAGE]:OVT-7653: Removed @PreAuthorize from GET methods||GET methods should be available without authentication

Conflicts:
	koodisto-service/src/main/java/fi/vm/sade/koodisto/service/koodisto/rest/CodeElementResource.java
=========================================================

-@PreAuthorize("isAuthenticated()")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
-@PreAuthorize("isAuthenticated()")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
-@PreAuthorize("isAuthenticated()")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/b5ad57fab2eddfffa64be8aac82263e23aef8fe7

[COMMIT MESSAGE]:OVT-8189: Added /save method to REST, which saves whole CodesDTO incl…||…uding relations. Added a test for it and changed test-data.xml accordingly. Additionally separated the DTO -> DataType conversion functions from CodesResource to CodesResourceConverter.
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/b09768f8b4138945a499cbf84a97af5c6c817046

[COMMIT MESSAGE]:OVT-7699: Lisätty rajapintaan latausmetodi, joka palauttaa tiedostot …||…sellaisenaan JSONin sijasta.
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/b4eb7b4e81ff28de5b2080c1a6e655234086814b

[COMMIT MESSAGE]:KH-202: Annotoitu myös muut REST-luokat||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/601825f90398a7605c7b1ab7b752e4a657fe0d88

[COMMIT MESSAGE]:KH-143||Poista-nappi koodiston katselunäkymään
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/b3e79c64a060b983c6405b89755d1e14f5e14a4d

[COMMIT MESSAGE]:REST-rajapinnan siivous||
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/93c1cc8bb6d85753d591f2533c1b1446d1456291

[COMMIT MESSAGE]:KH-124 Koodiston katselunäkymässä vie koodisto-nappi||
=========================================================

+@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/0d2a874288686eddd25fca9dc876c8e512bf5837

[COMMIT MESSAGE]:OVT-7032||Puute rest-rajapintojen käyttöoikeustarkistuksissa
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/patsancu/comienzoProyecto/commit/1224a93704bdcb9c2c589fe1a0594f548021c8ab

[COMMIT MESSAGE]:Creación y listado de usuarios.||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/patsancu/comienzoProyecto/commit/1480057c20eda9b93afbd825aaa8d574c02452d2

[COMMIT MESSAGE]:Gestión de espacios (no reservas).||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=25&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/sovan107/RMSDT/commit/363de3240c2345aee8947ae3773ce61528507531

[COMMIT MESSAGE]:2nd time login issue fixed||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPER_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/molgenis/molgenis/commit/76aee2cc37136b4f47018f184b7c723de967543d

[COMMIT MESSAGE]:Elasticsearch repository decorator (wip)||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SU, ROLE_PLUGIN_READ_INDEXMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jfmedeiros1820/Seguranca/commit/8db76cf9436f7ce3c4c3dda4e7249913cdcdf782

[COMMIT MESSAGE]:Configuração de login e resources do projeto||
=========================================================

+ @PreAuthorize("hasRole('MODERADOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jfmedeiros1820/Seguranca/commit/c7ea5fb6be5aaaf931bbcc29e71cb9d5636a79a2

[COMMIT MESSAGE]:Criação da Arquitetura Padrão||
=========================================================

+ @PreAuthorize("hasRole('ADMINISTRADOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jfmedeiros1820/Seguranca/commit/8db76cf9436f7ce3c4c3dda4e7249913cdcdf782

[COMMIT MESSAGE]:Configuração de login e resources do projeto||
=========================================================

+ @PreAuthorize("hasRole('MODERADOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jfmedeiros1820/Seguranca/commit/c7ea5fb6be5aaaf931bbcc29e71cb9d5636a79a2

[COMMIT MESSAGE]:Criação da Arquitetura Padrão||
=========================================================

+ @PreAuthorize("hasRole('ADMINISTRADOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/energyos/OpenESPI-DataCustodian-java/commit/e03e443d3a1dc0ab1ba8f01ca66ac12e40e442c4

[COMMIT MESSAGE]:Restricts access to ScopeSelectionController||
=========================================================

+@PreAuthorize("hasRole('ROLE_USER')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=26&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=27&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/geosolutions-it/OpenSDI-Manager2/commit/1b9a536e6769aa25e70c410bb3c8db022d668c91

[COMMIT MESSAGE]:Fixed test for UserSessionService and relaxed security on delete session||
=========================================================

- @PreAuthorize("(!hasRole('ROLE_ANONYMOUS') and @userSessionService.isOwner(#sessionId,principal)) or hasRole('ROLE_ADMIN')")
+ //@PreAuthorize("(!hasRole('ROLE_ANONYMOUS') and @userSessionService.isOwner(#sessionId,principal)) or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/geosolutions-it/OpenSDI-Manager2/commit/305ea8b09c3ff1b19b7e9b5074db03ffb6ee040d

[COMMIT MESSAGE]:UserSession management API with related REST API and mvc controller||
=========================================================

+ @PreAuthorize("!hasRole('ROLE_ANONYMOUS')")
+ @PreAuthorize("(!hasRole('ROLE_ANONYMOUS') and @userSessionService.isOwner(#sessionId,principal)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/gdogaru/cf_demo/commit/09045425b779303e77758ae1f4e50746e02c992d

[COMMIT MESSAGE]:rc1||
=========================================================

+ @PreAuthorize("hasRole('USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/a8430b8f2343f169cf8e16f245fc7a7e0924bf64

[COMMIT MESSAGE]:Administration > Utilities > Scripts|| - added ability to run small programs through the interface
  - e.g., to reset all examination preferences for a particular examination problem
  - it is possible to plug-in additional scripting engines (e.g., python)
=========================================================

+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/a8430b8f2343f169cf8e16f245fc7a7e0924bf64

[COMMIT MESSAGE]:Administration > Utilities > Scripts|| - added ability to run small programs through the interface
  - e.g., to reset all examination preferences for a particular examination problem
  - it is possible to plug-in additional scripting engines (e.g., python)
=========================================================

+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/a8430b8f2343f169cf8e16f245fc7a7e0924bf64

[COMMIT MESSAGE]:Administration > Utilities > Scripts|| - added ability to run small programs through the interface
  - e.g., to reset all examination preferences for a particular examination problem
  - it is possible to plug-in additional scripting engines (e.g., python)
=========================================================

+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/a8430b8f2343f169cf8e16f245fc7a7e0924bf64

[COMMIT MESSAGE]:Administration > Utilities > Scripts|| - added ability to run small programs through the interface
  - e.g., to reset all examination preferences for a particular examination problem
  - it is possible to plug-in additional scripting engines (e.g., python)
=========================================================

+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/a8430b8f2343f169cf8e16f245fc7a7e0924bf64

[COMMIT MESSAGE]:Administration > Utilities > Scripts|| - added ability to run small programs through the interface
  - e.g., to reset all examination preferences for a particular examination problem
  - it is possible to plug-in additional scripting engines (e.g., python)
=========================================================

+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=28&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/194d89944e64cb4f207c6167414eaa5fdd112af0

[COMMIT MESSAGE]:Course Types|| - course types can be defined under Administration > Other > Course Types
 - each course offering can have a course type (to be edited on Edit Course Offering page)
 - through student scheduling status types, a student can be allowed to request only courses of certain course types
=========================================================

+ @PreAuthorize("checkPermission('CourseTypes')")
+ @PreAuthorize("checkPermission('CourseTypeEdit')")
+ @PreAuthorize("checkPermission('CourseTypeEdit')")
+ @PreAuthorize("checkPermission('CourseTypeEdit')")
+ @PreAuthorize("checkPermission('CourseTypeEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/c57f12c3abe409159dda78d70e40e1a5935a8e9c

[COMMIT MESSAGE]:Add Event|| - added ability to define default value for Additional Emails field
   - in menu, Preferences &gt; Event Defaults (needs permission EventDefaults)
   - users with EventDefaultsEditOther permission can see / modify defaults for other users
=========================================================

+ @PreAuthorize("checkPermission('EventDefaults')")
+ @PreAuthorize("checkPermission('EventDefaults')")
+ @PreAuthorize("checkPermission('HasRole')")
+ @PreAuthorize("checkPermission('EventDefaults')")
+ @PreAuthorize("checkPermission('HasRole')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=29&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/1837c818f5dabee46fa227f9170aa6efd833b4a8

[COMMIT MESSAGE]:Logging|| - added page Administration > Defaults > Logging that can be used to adjust logging levels while the application is running
=========================================================

+ @PreAuthorize("checkPermission('ApplicationConfig')")
+ @PreAuthorize("checkPermission('ApplicationConfig')")
+ @PreAuthorize("checkPermission('ApplicationConfig')")
+ @PreAuthorize("checkPermission('ApplicationConfig')")
+ @PreAuthorize("checkPermission('ApplicationConfig')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/194d89944e64cb4f207c6167414eaa5fdd112af0

[COMMIT MESSAGE]:Course Types|| - course types can be defined under Administration > Other > Course Types
 - each course offering can have a course type (to be edited on Edit Course Offering page)
 - through student scheduling status types, a student can be allowed to request only courses of certain course types
=========================================================

+ @PreAuthorize("checkPermission('CourseTypes')")
+ @PreAuthorize("checkPermission('CourseTypeEdit')")
+ @PreAuthorize("checkPermission('CourseTypeEdit')")
+ @PreAuthorize("checkPermission('CourseTypeEdit')")
+ @PreAuthorize("checkPermission('CourseTypeEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/b6d2a381a13335a5c45217f145c9b79915942249

[COMMIT MESSAGE]:Code Cleanup: HQL Reports|| - saved hql service (and the related servlet) replaced by individual backends (using command pattern)
=========================================================

- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports') and checkPermission('HQLReportAdd')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")
- @PreAuthorize("checkPermission(#id, 'SavedHQL', 'HQLReportDelete')")
- @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission(#request.id, 'SavedHQL', 'HQLReportDelete')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/91a6b19f793c6180ab33cf1172f4788423ce4b41

[COMMIT MESSAGE]:Student Accommodations|| - Student Accommodations (administration): added page Student Accommodations where student accommodations / special needs can be managed (very much like with the Student Groups)
 - Instructional Offering Detail, Class Detail, Examination Detail, Event Detail: Enrollments table shows student accommodations, if there are any (column Accommodation is only visible if there is at least one student with an accommodation)
 - Instructional Offering Detail, Class Detail, Examination Detail: If there are any student accommodations, short overview table (accommodation name plus the number of students in the offering / class / exam) is also present at the bottom of the top most section
=========================================================

+ @PreAuthorize("checkPermission('StudentAccommodations')")
+ @PreAuthorize("checkPermission('StudentAccommodationEdit')")
+ @PreAuthorize("checkPermission('StudentAccommodationEdit')")
+ @PreAuthorize("checkPermission('StudentAccommodationEdit')")
+ @PreAuthorize("checkPermission('StudentAccommodationEdit')")
- @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=30&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/91a6b19f793c6180ab33cf1172f4788423ce4b41

[COMMIT MESSAGE]:Student Accommodations|| - Student Accommodations (administration): added page Student Accommodations where student accommodations / special needs can be managed (very much like with the Student Groups)
 - Instructional Offering Detail, Class Detail, Examination Detail, Event Detail: Enrollments table shows student accommodations, if there are any (column Accommodation is only visible if there is at least one student with an accommodation)
 - Instructional Offering Detail, Class Detail, Examination Detail: If there are any student accommodations, short overview table (accommodation name plus the number of students in the offering / class / exam) is also present at the bottom of the top most section
=========================================================

+ @PreAuthorize("checkPermission('StudentAccommodations')")
+ @PreAuthorize("checkPermission('StudentAccommodationEdit')")
+ @PreAuthorize("checkPermission('StudentAccommodationEdit')")
+ @PreAuthorize("checkPermission('StudentAccommodationEdit')")
+ @PreAuthorize("checkPermission('StudentAccommodationEdit')")
- @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/b6d2a381a13335a5c45217f145c9b79915942249

[COMMIT MESSAGE]:Code Cleanup: HQL Reports|| - saved hql service (and the related servlet) replaced by individual backends (using command pattern)
=========================================================

- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports') and checkPermission('HQLReportAdd')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")
- @PreAuthorize("checkPermission(#id, 'SavedHQL', 'HQLReportDelete')")
- @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission(#request.id, 'SavedHQL', 'HQLReportDelete')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/b6d2a381a13335a5c45217f145c9b79915942249

[COMMIT MESSAGE]:Code Cleanup: HQL Reports|| - saved hql service (and the related servlet) replaced by individual backends (using command pattern)
=========================================================

- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports') and checkPermission('HQLReportAdd')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")
- @PreAuthorize("checkPermission(#id, 'SavedHQL', 'HQLReportDelete')")
- @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission(#request.id, 'SavedHQL', 'HQLReportDelete')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/b6d2a381a13335a5c45217f145c9b79915942249

[COMMIT MESSAGE]:Code Cleanup: HQL Reports|| - saved hql service (and the related servlet) replaced by individual backends (using command pattern)
=========================================================

- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports') and checkPermission('HQLReportAdd')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")
- @PreAuthorize("checkPermission(#id, 'SavedHQL', 'HQLReportDelete')")
- @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission(#request.id, 'SavedHQL', 'HQLReportDelete')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/b6d2a381a13335a5c45217f145c9b79915942249

[COMMIT MESSAGE]:Code Cleanup: HQL Reports|| - saved hql service (and the related servlet) replaced by individual backends (using command pattern)
=========================================================

- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports') and checkPermission('HQLReportAdd')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")
- @PreAuthorize("checkPermission(#id, 'SavedHQL', 'HQLReportDelete')")
- @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission(#request.id, 'SavedHQL', 'HQLReportDelete')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/b6d2a381a13335a5c45217f145c9b79915942249

[COMMIT MESSAGE]:Code Cleanup: HQL Reports|| - saved hql service (and the related servlet) replaced by individual backends (using command pattern)
=========================================================

- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports') and checkPermission('HQLReportAdd')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")
- @PreAuthorize("checkPermission(#id, 'SavedHQL', 'HQLReportDelete')")
- @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission(#request.id, 'SavedHQL', 'HQLReportDelete')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/e84ee89a42c88aa2966d2e5e764f18989ed298b6

[COMMIT MESSAGE]:Reservations|| - reservations filter rewritten to use the same component as on the Events page
=========================================================

+ @PreAuthorize("checkPermission('Reservations')")
+ @PreAuthorize("checkPermission('Reservations')")
+ @PreAuthorize("checkPermission('Reservations')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/7d6aba3f858216f535448c8586409d44ee3a4d73

[COMMIT MESSAGE]:Spring Security|| - course / students / examination / event / administration (HQL) reports pages changed to use the new security model
=========================================================

- @PreAuthorize("(#curriculum.id != null and checkPermission(#curriculum.id, 'Curriculum', 'CurriculumEdit')) or checkPermission(#curriculum.department.id, 'Department', 'CurriculumAdd')")
+ @PreAuthorize("(#curriculum.id != null and checkPermission(#curriculum.id, 'Curriculum', 'CurriculumEdit')) or (#curriculum.id == null and checkPermission(#curriculum.department.id, 'Department', 'CurriculumAdd'))")
- @PreAuthorize("(#reservation.id != null and checkPermission(#reservation.id, 'Reservation', 'ReservationEdit')) or (checkPermission(#reservation.offering.id, 'InstructionalOffering', 'ReservationOffering') and checkPermission('ReservationAdd'))")
+ @PreAuthorize("(#reservation.id != null and checkPermission(#reservation.id, 'Reservation', 'ReservationEdit')) or (#reservation.id == null and checkPermission(#reservation.offering.id, 'InstructionalOffering', 'ReservationOffering') and checkPermission('ReservationAdd'))")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports') and checkPermission('HQLReportAdd')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")
+ @PreAuthorize("checkPermission(#id, 'SavedHQL', 'HQLReportDelete')")
+ @PreAuthorize("checkPermission('HQLReports')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/35359697ea7b47dd120b70279a7bd2b22f58dd2c

[COMMIT MESSAGE]:Spring Security|| - reservation pages changed to use the new security model
=========================================================

+ @PreAuthorize("checkPermission('Reservations')")
+ @PreAuthorize("checkPermission('Reservations')")
+ @PreAuthorize("checkPermission('Reservations')")
+ @PreAuthorize("checkPermission('Reservations')")
+ @PreAuthorize("checkPermission('Reservations')")
+ @PreAuthorize("checkPermission(#reservationId, 'Reservation', 'ReservationEdit')")
+ @PreAuthorize("(#reservation.id != null and checkPermission(#reservation.id, 'Reservation', 'ReservationEdit')) or (checkPermission(#reservation.offering.id, 'InstructionalOffering', 'ReservationOffering') and checkPermission('ReservationAdd'))")
+ @PreAuthorize("checkPermission(#reservationId, 'Reservation', 'ReservationDelete')")
+ @PreAuthorize("checkPermission('ReservationAdd')")
+ @PreAuthorize("checkPermission('Reservations')")
+ @PreAuthorize("checkPermission('Reservations')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/99c59f6b954d69fdfec2a33be23b4dd2696635b8

[COMMIT MESSAGE]:Spring|| - introducing Spring security
   - added Spring authorization (database & ldap)
   - added authentication primitives to provide method security
=========================================================

+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission(#curriculumId, 'Curriculum', 'CurriculumDetail')")
+ @PreAuthorize("hasPermission(#curriculum.id, 'Curriculum', 'CurriculumEdit') or hasPermission(#curriculum.department.id, 'Department', 'CurriculumAdd')")
+ @PreAuthorize("hasPermission(#curricula, 'Curriculum', 'CurriculumEdit')")
+ @PreAuthorize("hasPermission(#curriculumId, 'Curriculum', 'CurriculumDelete')")
+ @PreAuthorize("hasPermission(#curriculumIds, 'Curriculum', 'CurriculumDelete')")
+ @PreAuthorize("hasPermission(#curriculumIds, 'Curriculum', 'CurriculumMerge')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+@PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasRight('CurriculumAdd') and hasPermission('CurriculumView')")
+ @PreAuthorize("hasRight('CurriculumAdmin') and hasPermission('CurriculumView')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/3a2a525cb4d0c2f801ceb5bead22b4f5c592e836

[COMMIT MESSAGE]:Curricula|| - field Filter rewritten to use the same component as on the Events page
=========================================================

+ @PreAuthorize("checkPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/7d6aba3f858216f535448c8586409d44ee3a4d73

[COMMIT MESSAGE]:Spring Security|| - course / students / examination / event / administration (HQL) reports pages changed to use the new security model
=========================================================

- @PreAuthorize("(#curriculum.id != null and checkPermission(#curriculum.id, 'Curriculum', 'CurriculumEdit')) or checkPermission(#curriculum.department.id, 'Department', 'CurriculumAdd')")
+ @PreAuthorize("(#curriculum.id != null and checkPermission(#curriculum.id, 'Curriculum', 'CurriculumEdit')) or (#curriculum.id == null and checkPermission(#curriculum.department.id, 'Department', 'CurriculumAdd'))")
- @PreAuthorize("(#reservation.id != null and checkPermission(#reservation.id, 'Reservation', 'ReservationEdit')) or (checkPermission(#reservation.offering.id, 'InstructionalOffering', 'ReservationOffering') and checkPermission('ReservationAdd'))")
+ @PreAuthorize("(#reservation.id != null and checkPermission(#reservation.id, 'Reservation', 'ReservationEdit')) or (#reservation.id == null and checkPermission(#reservation.offering.id, 'InstructionalOffering', 'ReservationOffering') and checkPermission('ReservationAdd'))")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports') and checkPermission('HQLReportAdd')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")
+ @PreAuthorize("checkPermission(#id, 'SavedHQL', 'HQLReportDelete')")
+ @PreAuthorize("checkPermission('HQLReports')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/ff2406d2e84bd5f992e54c25de5f23729b2ae07e

[COMMIT MESSAGE]:Spring Security|| - curriculum pages changed to use the new security model
=========================================================

+ @PreAuthorize("checkPermission('CurriculumProjectionRulesDetail')")
+ @PreAuthorize("checkPermission('CurriculumProjectionRulesEdit')")
+ @PreAuthorize("checkPermission('CurriculumProjectionRulesEdit')")
+ @PreAuthorize("checkPermission('CurriculumAdmin')")
+ @PreAuthorize("checkPermission('CurriculumAdmin')")
+ @PreAuthorize("checkPermission(#offeringId, 'InstructionalOffering', 'InstructionalOfferingDetail') or checkPermission('CurriculumAdmin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/4e7965ba598e8bbff170b5356516ddc9ae45940e

[COMMIT MESSAGE]:Spring Security|| - besides of hasPermission methods (return true or false) also added checkPermission methods (return void, throws AccessDeniedException with a message describing the denial)
 - in an attempt to provide more descriptive access denied messages (not just "Access Denied")
 - added access denied handler
=========================================================

- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission(#curriculumId, 'Curriculum', 'CurriculumDetail')")
+ @PreAuthorize("checkPermission(#curriculumId, 'Curriculum', 'CurriculumDetail')")
- @PreAuthorize("hasPermission(#curriculum.id, 'Curriculum', 'CurriculumEdit') or hasPermission(#curriculum.department.id, 'Department', 'CurriculumAdd')")
+ @PreAuthorize("(#curriculum.id != null and checkPermission(#curriculum.id, 'Curriculum', 'CurriculumEdit')) or checkPermission(#curriculum.department.id, 'Department', 'CurriculumAdd')")
- @PreAuthorize("hasPermission(#curricula, 'Curriculum', 'CurriculumEdit')")
+ @PreAuthorize("checkPermission(#curricula, 'Curriculum', 'CurriculumEdit')")
- @PreAuthorize("hasPermission(#curriculumId, 'Curriculum', 'CurriculumDelete')")
+ @PreAuthorize("checkPermission(#curriculumId, 'Curriculum', 'CurriculumDelete')")
- @PreAuthorize("hasPermission(#curriculumIds, 'Curriculum', 'CurriculumDelete')")
+ @PreAuthorize("checkPermission(#curriculumIds, 'Curriculum', 'CurriculumDelete')")
- @PreAuthorize("hasPermission(#curriculumIds, 'Curriculum', 'CurriculumMerge')")
+ @PreAuthorize("checkPermission(#curriculumIds, 'Curriculum', 'CurriculumMerge')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasRight('CurriculumAdd') and hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumAdd') and checkPermission('CurriculumView')")
- @PreAuthorize("hasRight('CurriculumAdmin') and hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumAdmin') and checkPermission('CurriculumView')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/99c59f6b954d69fdfec2a33be23b4dd2696635b8

[COMMIT MESSAGE]:Spring|| - introducing Spring security
   - added Spring authorization (database & ldap)
   - added authentication primitives to provide method security
=========================================================

+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission(#curriculumId, 'Curriculum', 'CurriculumDetail')")
+ @PreAuthorize("hasPermission(#curriculum.id, 'Curriculum', 'CurriculumEdit') or hasPermission(#curriculum.department.id, 'Department', 'CurriculumAdd')")
+ @PreAuthorize("hasPermission(#curricula, 'Curriculum', 'CurriculumEdit')")
+ @PreAuthorize("hasPermission(#curriculumId, 'Curriculum', 'CurriculumDelete')")
+ @PreAuthorize("hasPermission(#curriculumIds, 'Curriculum', 'CurriculumDelete')")
+ @PreAuthorize("hasPermission(#curriculumIds, 'Curriculum', 'CurriculumMerge')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+@PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasRight('CurriculumAdd') and hasPermission('CurriculumView')")
+ @PreAuthorize("hasRight('CurriculumAdmin') and hasPermission('CurriculumView')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SampathCA/blog-manager/commit/5c34ced6c4d26f64c1e3eab6d16c99ad4400014c

[COMMIT MESSAGE]:sprigify security- script, access control||
=========================================================

+ @PreAuthorize("#blog.user.name==authentication.name or hasRole('ROLE_ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=31&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/Velenteenko/bookmanager/commit/a4ef328f29ec4841c5fdfec72e7b9049f68dcb61

[COMMIT MESSAGE]:Add Security||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/533f759d6adf38587e2c553fcc3d93e373391d12

[COMMIT MESSAGE]:poista tutkinnonosaviite oikeasti||
=========================================================

+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#id, 'perusteenosa', 'KORJAUS')")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/33b3026a1f2dbd6652c78348d3d2125108728657

[COMMIT MESSAGE]:yhtenäistä perusteen kaikki -rajapinta||
=========================================================

- @PreAuthorize("permitAll()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/f9c8e4507d1b573cd333f3889ac4d50155bbd838

[COMMIT MESSAGE]:Uusia rajapintoja ja korjattu bugi perustelistauksen linkkien generoi…||…nnissa
=========================================================

- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/78bc0bed8e1564bd2ad758ec246a2662489c11e0

[COMMIT MESSAGE]:Lisätty rajapinta koko perusopetuksen perusteen hakemiseen sisältöineen||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/37e5f67003d0f3ab7e97fded3344bc326128ad35

[COMMIT MESSAGE]:Korvaamisen perustoiminnallisuus. Vielä pientä UI viilausta.||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/43e02aaaf2542fdd18942ca66810f4618208edb4

[COMMIT MESSAGE]:Toteutusta||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/3c0c2597bc045bd61dd0f004fe51719ea69d6a3b

[COMMIT MESSAGE]:Esiopetuksen perusteprojektin luonti.||
=========================================================

+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/490222013d458b57cf596712c33ae389b4363c58

[COMMIT MESSAGE]:perusteen korjaus julkaisun jälkeen||Lisättu KORJAUS-oikeus update-palveluihin (WIP)
=========================================================

- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'perusteenmetatiedot', 'LUKU')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'perusteenmetatiedot', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'perusteenmetatiedot', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#po.dto.id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#po.dto.id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#po.dto.id, 'perusteenosa', 'KORJAUS')")
- @PreAuthorize("hasPermission(#po.id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#po.id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#po.id, 'perusteenosa', 'KORJAUS')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#id, 'perusteenosa', 'KORJAUS')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#id, 'perusteenosa', 'KORJAUS')")
- @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'MUOKKAUS') or hasPermission(#viiteId, 'tutkinnonosaviite', 'KORJAUS')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#id, 'perusteenosa', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#tov.id, 'tutkinnonosaviite', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#tov.id, 'tutkinnonosaviite', 'MUOKKAUS') or hasPermission(#tov.id, 'tutkinnonosaviite', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/938e04e00e223111598568637dc4886080dc874c

[COMMIT MESSAGE]:lukituksen refaktorointia||Refaktoroitu Suoritustapa käyttämään geneerisempää lukitussysteemiä.
=========================================================

+ @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/8537365888800646f1bd2243b76a9cfacb546537

[COMMIT MESSAGE]:Tutkinnon osien käsittely viitteiden avulla refactorointi.||
=========================================================

+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("isAuthenticated()")
- @PreAuthorize("returnObject?.tila == T(fi.vm.sade.eperusteet.domain.PerusteTila).VALMIS or hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'tutkinnonosaviite', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'tutkinnonosaviite', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'tutkinnonosaviite', 'LUKU')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'LUKU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/34da017bcc4f678893248fa29bea55e6673fe4c5

[COMMIT MESSAGE]:Palvelupuolen toteutus tutkintonimikekoodeille||
=========================================================

+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/1e7ebd73dcf1b210bfac088679a7363745610983

[COMMIT MESSAGE]:perusteenosaviitteen lisäämisen refaktoirointi||
=========================================================

- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/5e14ae63b3327f2c2e26f25eb1095fc534476d5f

[COMMIT MESSAGE]:oikeuksien tarkistelu||
=========================================================

- @PreAuthorize("hasPermission(#dto.perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'peruste', 'LUKU')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'perusteenmetatiedot', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#id, 'perusteprojekti', 'MUOKKAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/a7bdb315375f4353c0ecac21591c669f5d5a2dfb

[COMMIT MESSAGE]:perusteenosien haku suppeassa muodossa.||refaktorointia. perusteen osien ja sisältöviitteiden haku suppeassa
muodossa (ilman yksityiskohtia).
=========================================================

+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/e5d371c626cf81dda88da62595ff77097e9f4955

[COMMIT MESSAGE]:bugikorjaus tekstikappaleen lisäykseen||
=========================================================

- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()") //XXX
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/63ba8685dc699c6ee7f24dc94e34b968e4c899d6

[COMMIT MESSAGE]:oikeustarkisteluja||
=========================================================

+ @PreAuthorize("isAuthenticated()") //XXX ei julkinen rajapinta
+ @PreAuthorize("isAuthenticated()") //XXX ei julkinen rajapinta

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/42bbfc5e21a637e84c942fd0e4ce94b53f1a495e

[COMMIT MESSAGE]:oikeustarkisteluja.||Lisätty oikeustarkisteluja ja refaktoroitu julkista palvelukerroksen
API:a.
=========================================================

+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#k.perusteprojektiId, 'perusteProjekti', 'KOMMENTOINTI')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("returnObject?.tila == T(fi.vm.sade.eperusteet.domain.PerusteTila).VALMIS or hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteprojekti', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteprojekti', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteprojekti', 'LUKU')")
+ @PreAuthorize("isAuthenticated()") //XXX
+ @PreAuthorize("hasPermission(null, 'perusteprojekti', 'LUONTI')")
+ @PreAuthorize("hasPermission(#id, 'perusteprojekti', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteprojekti', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteprojekti', 'TILANVAIHTO')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("hasPermission(#kommenttidto.perusteprojektiId, 'perusteProjekti', 'KOMMENTOINTI')")
- @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/deef82e74791ffa5a2fe5057ba9f3e7851cca7b5

[COMMIT MESSAGE]:Oikeustarkistelun toteutusta.||Perusteenosiin liittyvän perusteprojektin hakeminen. Perustetta tai
perusteen osaa ei voi enää muokata ellei se kuulu käynnissä olevaan
perusteprojektiin (osa tarkistuksista puuttuu yhä).
=========================================================

+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#po.dto.id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#po.id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'POISTO')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/0492d4760359268a4504ab17a6c54dc6d8f250d7

[COMMIT MESSAGE]:Oikeuksien muokkausta.||Oikeuksien suomennos; kommentoinin oikeuksien bugikorjaus.
=========================================================

- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#kommenttidto.perusteProjektiId, 'perusteProjekti', 'COMMENT')")
+ @PreAuthorize("hasPermission(#kommenttidto.perusteprojektiId, 'perusteProjekti', 'KOMMENTOINTI')")
- @PreAuthorize("hasPermission(#kommenttidto.perusteProjektiId, 'perusteProjekti', 'COMMENT')")
+ @PreAuthorize("hasPermission(#kommenttidto.perusteprojektiId, 'perusteProjekti', 'KOMMENTOINTI')")
- @PreAuthorize("hasPermission(#kommenttidto.perusteProjektiId, 'perusteProjekti', 'COMMENT')")
+ //@PreAuthorize("hasPermission(#kommenttidto.perusteprojektiId, 'perusteProjekti', 'KOMMENTOINTI')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/3711405bda225372991a6048bd72366469c877e4

[COMMIT MESSAGE]:Spring-security permission evaluator käyttöönotto.||Oikeustarkistelun lisäämisen ensimmäinen vaihe.
=========================================================

- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#kommenttidto.perusteProjektiId, 'perusteProjekti', 'COMMENT')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#kommenttidto.perusteProjektiId, 'perusteProjekti', 'COMMENT')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#kommenttidto.perusteProjektiId, 'perusteProjekti', 'COMMENT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/732b15fe93fe803e04ad9f09e361ec127a0840f2

[COMMIT MESSAGE]:Muokkaaja ja kommentti versiotietojen hakuun.||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/34f422b1bbfd46c650e2d7e11439f7c1e87d1a35

[COMMIT MESSAGE]:Lisätty sisällön sorttaustoiminto backendiin||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/f1ac50419bf59d40667cae44fcc257a51d5d1ef8

[COMMIT MESSAGE]:api test and ctx||
=========================================================

- @PreAuthorize("(hasRole('apiTest.update') and #dto.id != null) or (hasRole('apiTest.add') and #dto.id == null)")
+ @PreAuthorize("(hasRole('apiTest.update') and #dto.id != null) or (hasRole('apiTest.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('apiTest.list')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=32&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/walidBelfadel/upemgur/commit/ca1eb43cc6d1e1ff9dcd6b80ddead2411d81d71b

[COMMIT MESSAGE]:final commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/walidBelfadel/upemgur/commit/ca1eb43cc6d1e1ff9dcd6b80ddead2411d81d71b

[COMMIT MESSAGE]:final commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/PascalHuijsmans/Enterprice-Grade-Software/commit/baac79b1e9f713a5ad118b5280e52a9a0643d35c

[COMMIT MESSAGE]:intial commit||
=========================================================

+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/PascalHuijsmans/Enterprice-Grade-Software/commit/baac79b1e9f713a5ad118b5280e52a9a0643d35c

[COMMIT MESSAGE]:intial commit||
=========================================================

+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/PascalHuijsmans/Enterprice-Grade-Software/commit/baac79b1e9f713a5ad118b5280e52a9a0643d35c

[COMMIT MESSAGE]:intial commit||
=========================================================

+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Megaprog/spring-users/commit/4a8fcc9f174e91dbfc7254fbb0c0e85c98573d7f

[COMMIT MESSAGE]:it is works||
=========================================================

+ @PreAuthorize("hasAuthority('editor')")
+ @PreAuthorize("hasAuthority('editor')")
+ @PreAuthorize("hasAuthority('editor')")
+ @PreAuthorize("hasAuthority('editor')")
+ @PreAuthorize("hasAuthority('editor')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=33&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/irajghasemi/rapid/commit/8bbfc0c9569d607857a45a52fa863e53f3ffbfd5

[COMMIT MESSAGE]:First Commit||
=========================================================

+ @PreAuthorize("#oauth2.clientHasRole('ROLE_CLIENT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/phantazia/appdirect/commit/068925703d53302cf07e65490421f72a35158e9f

[COMMIT MESSAGE]:the first commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=34&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/wertklop/testcase/commit/1317f95ee046cb08f723ef5aff13029d71822812

[COMMIT MESSAGE]:Доработка по защите приложения||
=========================================================

+ @PreAuthorize("hasRole('ROLE_EDITOR')")
+ @PreAuthorize("hasRole('ROLE_EDITOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/pashtika/spring-mvc/commit/947982f7a8ff714546162ec483a5116ee1a33cc4

[COMMIT MESSAGE]:SpringSecurity-MongoDB-MVC||
=========================================================

+ @PreAuthorize("hasRole('ROLE_CAMPAIGN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/siva636/Sri-Lanka-Jobs/commit/c272c37506c8f3f3e1af6c651497029932bd4952

[COMMIT MESSAGE]:Completed state||
=========================================================

+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_CANDIDATE')")
+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_CANDIDATE')")
+// @PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_EMPLOYER')")
+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_EMPLOYER')")
+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_EMPLOYER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/siva636/Sri-Lanka-Jobs/commit/c272c37506c8f3f3e1af6c651497029932bd4952

[COMMIT MESSAGE]:Completed state||
=========================================================

+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_CANDIDATE')")
+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_CANDIDATE')")
+// @PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_EMPLOYER')")
+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_EMPLOYER')")
+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_EMPLOYER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jaewo7o/java-blog-aggregator/commit/ba3f0c6100d2d5475ec322611901a4555b4f25be

[COMMIT MESSAGE]:pre authorized||
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/2af1760f3264ebc18e953868bd60ac6a7c991b3f

[COMMIT MESSAGE]:oauth2 implemented||
=========================================================

- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/2af1760f3264ebc18e953868bd60ac6a7c991b3f

[COMMIT MESSAGE]:oauth2 implemented||
=========================================================

- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/ca60d83810197a9a48315654b400cb607b65b13e

[COMMIT MESSAGE]:blog samples have removed||
=========================================================

- @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/2af1760f3264ebc18e953868bd60ac6a7c991b3f

[COMMIT MESSAGE]:oauth2 implemented||
=========================================================

- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/ca60d83810197a9a48315654b400cb607b65b13e

[COMMIT MESSAGE]:blog samples have removed||
=========================================================

- @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/2af1760f3264ebc18e953868bd60ac6a7c991b3f

[COMMIT MESSAGE]:oauth2 implemented||
=========================================================

- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=35&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/2af1760f3264ebc18e953868bd60ac6a7c991b3f

[COMMIT MESSAGE]:oauth2 implemented||
=========================================================

- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/ca60d83810197a9a48315654b400cb607b65b13e

[COMMIT MESSAGE]:blog samples have removed||
=========================================================

- @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/2af1760f3264ebc18e953868bd60ac6a7c991b3f

[COMMIT MESSAGE]:oauth2 implemented||
=========================================================

- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/ca60d83810197a9a48315654b400cb607b65b13e

[COMMIT MESSAGE]:blog samples have removed||
=========================================================

- @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/2af1760f3264ebc18e953868bd60ac6a7c991b3f

[COMMIT MESSAGE]:oauth2 implemented||
=========================================================

- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/dhhabi/cecs.scheduling/commit/b77e68c8066e4715cffec80c19c03f3f79e8da8c

[COMMIT MESSAGE]:Professors form building and main ui building started !||
=========================================================

- @PreAuthorize("@currentUserServiceImpl.canAccessUser(principal, #id)")
- @PreAuthorize("hasAuthority('ADMIN')")
- @PreAuthorize("hasAuthority('ADMIN')")
+@PreAuthorize("isFullyAuthenticated()") //do not allow Remember-Me

=========================================================
[CODE-CHANGE-URL]:https://github.com/mishgunn/regataiades-app/commit/461845624294ff956da78762a7f462ed6af17948

[COMMIT MESSAGE]:* Auth token support||* Reg update mode
=========================================================

+ @PreAuthorize("@AccessTool.isAuthenticated()")
+ @PreAuthorize("@AccessTool.isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samitkumarpatel/spring-mvc-test-examples-DEMO/commit/0dc3f4e5884833629d08606b8100140a844bc139

[COMMIT MESSAGE]:initial checkins||spring mvc based example with unitest cases
=========================================================

+ @PreAuthorize("hasPermission('Todo', 'add')")
+ @PreAuthorize("hasPermission('Todo', 'delete')")
+ @PreAuthorize("hasPermission('Todo', 'list')")
+ @PreAuthorize("hasPermission('Todo', 'find')")
+ @PreAuthorize("hasPermission('Todo', 'update')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samitkumarpatel/spring-mvc-test-examples-DEMO/commit/0dc3f4e5884833629d08606b8100140a844bc139

[COMMIT MESSAGE]:initial checkins||spring mvc based example with unitest cases
=========================================================

+ @PreAuthorize("hasPermission('Todo', 'add')")
+ @PreAuthorize("hasPermission('Todo', 'delete')")
+ @PreAuthorize("hasPermission('Todo', 'list')")
+ @PreAuthorize("hasPermission('Todo', 'find')")
+ @PreAuthorize("hasPermission('Todo', 'update')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samitkumarpatel/spring-mvc-test-examples-DEMO/commit/0dc3f4e5884833629d08606b8100140a844bc139

[COMMIT MESSAGE]:initial checkins||spring mvc based example with unitest cases
=========================================================

+ @PreAuthorize("hasPermission('Todo', 'add')")
+ @PreAuthorize("hasPermission('Todo', 'delete')")
+ @PreAuthorize("hasPermission('Todo', 'list')")
+ @PreAuthorize("hasPermission('Todo', 'find')")
+ @PreAuthorize("hasPermission('Todo', 'update')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mimigreg/news/commit/1e5c2064fa3e016488a2d14f2c926d2ba2a0f7f2

[COMMIT MESSAGE]:Basics crud on an easy model||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("#userUI.email == authentication.name")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/janusz-blaszczyk/JbRepoPublic1/commit/639eaf34142b2eb6202a87830cc7f64db38517a7

[COMMIT MESSAGE]:czyszczenie kodu, poukładanie kontrolerów i usług, dodanie strony||startowej z informacjami co, gdzie, dlaczego
=========================================================

-//@PreAuthorize("hasRole('ROLE_OAUTH')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/janusz-blaszczyk/JbRepoPublic1/commit/2b1afe8612b76cf0c6f8c21190f19a5bc4ce84b6

[COMMIT MESSAGE]:działa :) werja 1.0 działającego client/serwer na OAUTH1||
=========================================================

+@PreAuthorize("hasRole('ROLE_OAUTH')")
+ @PreAuthorize("hasRole('ROLE_OAUTH')")
+//@PreAuthorize("hasRole('ROLE_OAUTH')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=36&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/drinkit/drinkit-server/commit/7489cf94a188eb2747cff8b25c532fafe9bacbee

[COMMIT MESSAGE]:extracted from drinkit/drinkIt@dcae852||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAnonymous()")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/drinkit/drinkit-server/commit/7489cf94a188eb2747cff8b25c532fafe9bacbee

[COMMIT MESSAGE]:extracted from drinkit/drinkIt@dcae852||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAnonymous()")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/pazu021/java-blog-aggregator/commit/53e0a6eb1493ae33edfe836950e8e903ae448430

[COMMIT MESSAGE]:Spring web app tutorial 40: Custom Validation Annotation : javavids||
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/voronenko-da/feetapp/commit/e909b51934480b789b1a2d65b70637df380da988

[COMMIT MESSAGE]:first||
=========================================================

+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/voronenko-da/feetapp/commit/e909b51934480b789b1a2d65b70637df380da988

[COMMIT MESSAGE]:first||
=========================================================

+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/xiGUAwanOU/learning-spring-framework/commit/1c8b8f87246cd5e8d8a7c4f8318908bcef71d9df

[COMMIT MESSAGE]:Finally finished the work on spring security.||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/statefulj/statefulj-framework-demo-ddd/commit/5a8299b93b199e32462351a7e58cc694defbbf3f

[COMMIT MESSAGE]:A demo of StatefulJ and DDD architecture||
=========================================================

+ @PreAuthorize("#account.customerId.id == principal.customerId.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/shagaba/shagaba-kickstarter-auth/commit/6b1d7217e5f53a4c406a316dd0bb848cecb8983f

[COMMIT MESSAGE]:security account - user account service||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_VISITOR')")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or (hasRole('ROLE_USER') and #userAccount.accountId == authenticatuin.accountId)")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=37&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/pazu021/java-blog-aggregator/commit/53e0a6eb1493ae33edfe836950e8e903ae448430

[COMMIT MESSAGE]:Spring web app tutorial 40: Custom Validation Annotation : javavids||
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/voronenko-da/feetapp/commit/e909b51934480b789b1a2d65b70637df380da988

[COMMIT MESSAGE]:first||
=========================================================

+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/voronenko-da/feetapp/commit/e909b51934480b789b1a2d65b70637df380da988

[COMMIT MESSAGE]:first||
=========================================================

+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/xiGUAwanOU/learning-spring-framework/commit/1c8b8f87246cd5e8d8a7c4f8318908bcef71d9df

[COMMIT MESSAGE]:Finally finished the work on spring security.||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/statefulj/statefulj-framework-demo-ddd/commit/5a8299b93b199e32462351a7e58cc694defbbf3f

[COMMIT MESSAGE]:A demo of StatefulJ and DDD architecture||
=========================================================

+ @PreAuthorize("#account.customerId.id == principal.customerId.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/shagaba/shagaba-kickstarter-auth/commit/6b1d7217e5f53a4c406a316dd0bb848cecb8983f

[COMMIT MESSAGE]:security account - user account service||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_VISITOR')")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or (hasRole('ROLE_USER') and #userAccount.accountId == authenticatuin.accountId)")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/shagaba/shagaba-kickstarter-auth/commit/c2fe002c8daa13a06d794913cc91c228c9ab6389

[COMMIT MESSAGE]:polish||
=========================================================

+@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ADMIN_AUTHORITY_SERVICE')")
+@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ADMIN_ROLE_SERVICE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/shagaba/shagaba-kickstarter-auth/commit/c2fe002c8daa13a06d794913cc91c228c9ab6389

[COMMIT MESSAGE]:polish||
=========================================================

+@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ADMIN_AUTHORITY_SERVICE')")
+@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ADMIN_ROLE_SERVICE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/code4j-chen/example-code/commit/498826fbc92b86dfd7e00c948e7968447fa690b1

[COMMIT MESSAGE]:Initial commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SPITTER') and #amount > 10")
+ @PreAuthorize("#input.length() <= 3")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=38&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/code4j-chen/example-code/commit/498826fbc92b86dfd7e00c948e7968447fa690b1

[COMMIT MESSAGE]:Initial commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SPITTER') and #amount > 10")
+ @PreAuthorize("#input.length() <= 3")

=========================================================
[CODE-CHANGE-URL]:https://github.com/thasan01/WebChat-Servlet/commit/fc75275aed406d8b334279dbf7039471321dfb19

[COMMIT MESSAGE]:init commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/odahovskiy/tvoiobzor/commit/a69e7314968a5a0f0e081d070fd8515839957848

[COMMIT MESSAGE]:realized comment deleting||
=========================================================

- @PreAuthorize("hasRole('Admin') " +
+ @PreAuthorize("hasRole('Admin') or (hasRole('User') and @UserServiceImpl.findCommentOwner(#id).getUsername().toLowerCase().equals(principal.username.toLowerCase()))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/odahovskiy/tvoiobzor/commit/31d7ad21416924f4b597bf56c8f7f168c37cd3dc

[COMMIT MESSAGE]:add function of deleting comment||
=========================================================

+ @PreAuthorize("hasRole('Admin') " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/odahovskiy/tvoiobzor/commit/01607d7492d0e2048cb67b048b4355abe0507be7

[COMMIT MESSAGE]:realized edit post method||User can edit his post  while post not accepted by admin
Admin can edit post every time
=========================================================

+ @PreAuthorize("hasRole('Admin') " +
+ @PreAuthorize("hasRole('Admin') " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/odahovskiy/tvoiobzor/commit/d0d92cada2215075d5da14258a14345a029eb66e

[COMMIT MESSAGE]:config nicEit||
=========================================================

+ @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('Admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/odahovskiy/tvoiobzor/commit/02fa4b9eb640943b6aa5d07f1fb19f47e834c0ca

[COMMIT MESSAGE]:adding method security||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/odahovskiy/tvoiobzor/commit/809e0204981ba3edd932ed616e8da5b6f9a2b9d5

[COMMIT MESSAGE]:adding change image function controller method||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/odahovskiy/tvoiobzor/commit/02fa4b9eb640943b6aa5d07f1fb19f47e834c0ca

[COMMIT MESSAGE]:adding method security||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/odahovskiy/tvoiobzor/commit/bd52688417db43681d8083d4d9312bcc6557ab33

[COMMIT MESSAGE]:change some logic||Method getDafultThemeId if not exist create end return ID
and ect..
=========================================================

+ @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('Admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/davidsan/montgomery/commit/7d921004aced7450c5db9a523fa8e31c4dc0d711

[COMMIT MESSAGE]:initial commit||
=========================================================

+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/kazamage/sample2/commit/fe44e6a98f4968368dc326f972afa233dcf5bedb

[COMMIT MESSAGE]:add.||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=39&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=25&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jgadi/youtube.demo/commit/f88c0d808c83b80b0667ecc5eec364b7beeca65b

[COMMIT MESSAGE]:new changes||
=========================================================

+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator,ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAssociate')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator', 'ecoachCoach')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")
+@PreAuthorize("hasAnyRole('ecoachCoach', 'ecoachAdministrator')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sophia2901/assignment1/commit/75395d27cbd4fdcd251a4d1acd17ceff97d6a1c4

[COMMIT MESSAGE]:validation and security check||
=========================================================

+////@PreAuthorize("hasRole('MODERATOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yoshutch/mybyu/commit/55f103f31f1162af4f634091975943eb57aedd63

[COMMIT MESSAGE]:UP-3515: Provide a new REST endpoint for permissions at /assignments/…||…{principalType}/{id}.json
=========================================================

+ @PreAuthorize("(#entityType == 'person' and #id == authentication.name) or hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yoshutch/mybyu/commit/0ecdf72b867c62e90ce3cb57860e216e571ab476

[COMMIT MESSAGE]:UP-3311 Fix package name for AuthorizableActivity||
=========================================================

- @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
- @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
- @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
- @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yoshutch/mybyu/commit/d0c37171d5da56d4b2681cfd56da45293771fc2b

[COMMIT MESSAGE]:UP-2950 Adding support and configuration for Spring Security annotati…||…on-based permission expressions under a pre-authentication setup. This commit also includes adding support for SpringMVC's ContentNegotiatingViewResolver.
=========================================================

+ @PreAuthorize("hasPermission('string', 'REST', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yoshutch/mybyu/commit/d0c37171d5da56d4b2681cfd56da45293771fc2b

[COMMIT MESSAGE]:UP-2950 Adding support and configuration for Spring Security annotati…||…on-based permission expressions under a pre-authentication setup. This commit also includes adding support for SpringMVC's ContentNegotiatingViewResolver.
=========================================================

+ @PreAuthorize("hasPermission('string', 'REST', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")
+ @PreAuthorize("hasPermission('string', 'ALL', new org.jasig.portal.spring.security.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/gregturn/spring-a-gram/commit/e6c2210104c015f8f21b89d50256249294fa3fa7

[COMMIT MESSAGE]:Secure save/update||Resolves #29
=========================================================

+ @PreAuthorize("#item?.user == null or #item?.user?.name == authentication?.name")

=========================================================
[CODE-CHANGE-URL]:https://github.com/gregturn/spring-a-gram/commit/41f229a0c1d631850263b53fe0bc6a45bd1e2406

[COMMIT MESSAGE]:Switch on security, hide passwords||
=========================================================

+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("#item?.user?.name == authentication?.name")
+ @PreAuthorize("@itemRepository.findOne(#id)?.user?.name == authentication?.name")

=========================================================
[CODE-CHANGE-URL]:https://github.com/USAID-DELIVER-PROJECT/elmis/commit/c0fc6e9b8bb2996d59b4abf51804b88b7f0d7a75

[COMMIT MESSAGE]:<teklutesfayeh@gmail.com>||this is the first version commit for help module
=========================================================

+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")
+// @PreAuthorize("@permissionEvaluator.hasPermission(principal,'MANAGE_PRODUCT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/lunias/webb/commit/7afd7faab6ab572fd316b19e72025a4ec2e2401f

[COMMIT MESSAGE]:updating api locations in oauth-server frontend||
=========================================================

+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_WRITE + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_WRITE + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/lunias/webb/commit/f2c2733d06e035e1462d8f115983f7e491d8fd39

[COMMIT MESSAGE]:added user service||
=========================================================

+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/lunias/webb/commit/8b785a813a5397f89752ccb5a15c04080f70f945

[COMMIT MESSAGE]:started adding front-end to oauth-server||
=========================================================

+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/lunias/webb/commit/7afd7faab6ab572fd316b19e72025a4ec2e2401f

[COMMIT MESSAGE]:updating api locations in oauth-server frontend||
=========================================================

+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_WRITE + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_WRITE + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=26&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/lunias/webb/commit/7afd7faab6ab572fd316b19e72025a4ec2e2401f

[COMMIT MESSAGE]:updating api locations in oauth-server frontend||
=========================================================

+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_WRITE + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_WRITE + "')")
+ @PreAuthorize("#oauth2.hasScope('" + ScopeConstant.OAUTH_SERVER_READ + "')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/cda41387c05b0d3a4d290f1f4c81ce7e3b7ac4c9

[COMMIT MESSAGE]:OVT-8919: Poistetaan autentikointitarve koodin download rajapinnalta.||
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/89559f08d15446d936674615b3be8458736cd45b

[COMMIT MESSAGE]:OVT-7653: Added KoodistoValidationException. Added new default error …||…messages for each exception and the corresponding messages for koodisto-ui. Removed the hard coded error messages. Removed deprecated exceptions for now optional fields (description and short name). Changed CodesResource to return only valid HTTP responses.
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/8647d6458e04b4fcb13ee83289c506e2b2a81d93

[COMMIT MESSAGE]:OVT-7653: Removed @PreAuthorize from GET methods||GET methods should be available without authentication

Conflicts:
	koodisto-service/src/main/java/fi/vm/sade/koodisto/service/koodisto/rest/CodeElementResource.java
=========================================================

-@PreAuthorize("isAuthenticated()")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
-@PreAuthorize("isAuthenticated()")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
-@PreAuthorize("isAuthenticated()")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/b5ad57fab2eddfffa64be8aac82263e23aef8fe7

[COMMIT MESSAGE]:OVT-8189: Added /save method to REST, which saves whole CodesDTO incl…||…uding relations. Added a test for it and changed test-data.xml accordingly. Additionally separated the DTO -> DataType conversion functions from CodesResource to CodesResourceConverter.
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/b09768f8b4138945a499cbf84a97af5c6c817046

[COMMIT MESSAGE]:OVT-7699: Lisätty rajapintaan latausmetodi, joka palauttaa tiedostot …||…sellaisenaan JSONin sijasta.
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/b4eb7b4e81ff28de5b2080c1a6e655234086814b

[COMMIT MESSAGE]:KH-202: Annotoitu myös muut REST-luokat||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/601825f90398a7605c7b1ab7b752e4a657fe0d88

[COMMIT MESSAGE]:KH-143||Poista-nappi koodiston katselunäkymään
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/b3e79c64a060b983c6405b89755d1e14f5e14a4d

[COMMIT MESSAGE]:REST-rajapinnan siivous||
=========================================================

- @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/93c1cc8bb6d85753d591f2533c1b1446d1456291

[COMMIT MESSAGE]:KH-124 Koodiston katselunäkymässä vie koodisto-nappi||
=========================================================

+@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/koodisto/commit/0d2a874288686eddd25fca9dc876c8e512bf5837

[COMMIT MESSAGE]:OVT-7032||Puute rest-rajapintojen käyttöoikeustarkistuksissa
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")
+ @PreAuthorize("hasAnyRole('ROLE_APP_KOODISTO_READ','ROLE_APP_KOODISTO_READ_UPDATE','ROLE_APP_KOODISTO_CRUD')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/patsancu/comienzoProyecto/commit/1224a93704bdcb9c2c589fe1a0594f548021c8ab

[COMMIT MESSAGE]:Creación y listado de usuarios.||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/patsancu/comienzoProyecto/commit/1480057c20eda9b93afbd825aaa8d574c02452d2

[COMMIT MESSAGE]:Gestión de espacios (no reservas).||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sovan107/RMSDT/commit/363de3240c2345aee8947ae3773ce61528507531

[COMMIT MESSAGE]:2nd time login issue fixed||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SUPER_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/molgenis/molgenis/commit/76aee2cc37136b4f47018f184b7c723de967543d

[COMMIT MESSAGE]:Elasticsearch repository decorator (wip)||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_SU, ROLE_PLUGIN_READ_INDEXMANAGER')")
+ @PreAuthorize("hasAnyRole('ROLE_SU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jfmedeiros1820/Seguranca/commit/8db76cf9436f7ce3c4c3dda4e7249913cdcdf782

[COMMIT MESSAGE]:Configuração de login e resources do projeto||
=========================================================

+ @PreAuthorize("hasRole('MODERADOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jfmedeiros1820/Seguranca/commit/c7ea5fb6be5aaaf931bbcc29e71cb9d5636a79a2

[COMMIT MESSAGE]:Criação da Arquitetura Padrão||
=========================================================

+ @PreAuthorize("hasRole('ADMINISTRADOR')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=27&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/jfmedeiros1820/Seguranca/commit/8db76cf9436f7ce3c4c3dda4e7249913cdcdf782

[COMMIT MESSAGE]:Configuração de login e resources do projeto||
=========================================================

+ @PreAuthorize("hasRole('MODERADOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jfmedeiros1820/Seguranca/commit/c7ea5fb6be5aaaf931bbcc29e71cb9d5636a79a2

[COMMIT MESSAGE]:Criação da Arquitetura Padrão||
=========================================================

+ @PreAuthorize("hasRole('ADMINISTRADOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/energyos/OpenESPI-DataCustodian-java/commit/e03e443d3a1dc0ab1ba8f01ca66ac12e40e442c4

[COMMIT MESSAGE]:Restricts access to ScopeSelectionController||
=========================================================

+@PreAuthorize("hasRole('ROLE_USER')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=28&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/geosolutions-it/OpenSDI-Manager2/commit/1b9a536e6769aa25e70c410bb3c8db022d668c91

[COMMIT MESSAGE]:Fixed test for UserSessionService and relaxed security on delete session||
=========================================================

- @PreAuthorize("(!hasRole('ROLE_ANONYMOUS') and @userSessionService.isOwner(#sessionId,principal)) or hasRole('ROLE_ADMIN')")
+ //@PreAuthorize("(!hasRole('ROLE_ANONYMOUS') and @userSessionService.isOwner(#sessionId,principal)) or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/geosolutions-it/OpenSDI-Manager2/commit/305ea8b09c3ff1b19b7e9b5074db03ffb6ee040d

[COMMIT MESSAGE]:UserSession management API with related REST API and mvc controller||
=========================================================

+ @PreAuthorize("!hasRole('ROLE_ANONYMOUS')")
+ @PreAuthorize("(!hasRole('ROLE_ANONYMOUS') and @userSessionService.isOwner(#sessionId,principal)) or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/gdogaru/cf_demo/commit/09045425b779303e77758ae1f4e50746e02c992d

[COMMIT MESSAGE]:rc1||
=========================================================

+ @PreAuthorize("hasRole('USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/a8430b8f2343f169cf8e16f245fc7a7e0924bf64

[COMMIT MESSAGE]:Administration > Utilities > Scripts|| - added ability to run small programs through the interface
  - e.g., to reset all examination preferences for a particular examination problem
  - it is possible to plug-in additional scripting engines (e.g., python)
=========================================================

+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/a8430b8f2343f169cf8e16f245fc7a7e0924bf64

[COMMIT MESSAGE]:Administration > Utilities > Scripts|| - added ability to run small programs through the interface
  - e.g., to reset all examination preferences for a particular examination problem
  - it is possible to plug-in additional scripting engines (e.g., python)
=========================================================

+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/a8430b8f2343f169cf8e16f245fc7a7e0924bf64

[COMMIT MESSAGE]:Administration > Utilities > Scripts|| - added ability to run small programs through the interface
  - e.g., to reset all examination preferences for a particular examination problem
  - it is possible to plug-in additional scripting engines (e.g., python)
=========================================================

+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=29&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/a8430b8f2343f169cf8e16f245fc7a7e0924bf64

[COMMIT MESSAGE]:Administration > Utilities > Scripts|| - added ability to run small programs through the interface
  - e.g., to reset all examination preferences for a particular examination problem
  - it is possible to plug-in additional scripting engines (e.g., python)
=========================================================

+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/a8430b8f2343f169cf8e16f245fc7a7e0924bf64

[COMMIT MESSAGE]:Administration > Utilities > Scripts|| - added ability to run small programs through the interface
  - e.g., to reset all examination preferences for a particular examination problem
  - it is possible to plug-in additional scripting engines (e.g., python)
=========================================================

+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('Scripts')")
+ @PreAuthorize("checkPermission('ScriptEdit')")
+ @PreAuthorize("checkPermission('Scripts')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/194d89944e64cb4f207c6167414eaa5fdd112af0

[COMMIT MESSAGE]:Course Types|| - course types can be defined under Administration > Other > Course Types
 - each course offering can have a course type (to be edited on Edit Course Offering page)
 - through student scheduling status types, a student can be allowed to request only courses of certain course types
=========================================================

+ @PreAuthorize("checkPermission('CourseTypes')")
+ @PreAuthorize("checkPermission('CourseTypeEdit')")
+ @PreAuthorize("checkPermission('CourseTypeEdit')")
+ @PreAuthorize("checkPermission('CourseTypeEdit')")
+ @PreAuthorize("checkPermission('CourseTypeEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/c57f12c3abe409159dda78d70e40e1a5935a8e9c

[COMMIT MESSAGE]:Add Event|| - added ability to define default value for Additional Emails field
   - in menu, Preferences &gt; Event Defaults (needs permission EventDefaults)
   - users with EventDefaultsEditOther permission can see / modify defaults for other users
=========================================================

+ @PreAuthorize("checkPermission('EventDefaults')")
+ @PreAuthorize("checkPermission('EventDefaults')")
+ @PreAuthorize("checkPermission('HasRole')")
+ @PreAuthorize("checkPermission('EventDefaults')")
+ @PreAuthorize("checkPermission('HasRole')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=30&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/c57f12c3abe409159dda78d70e40e1a5935a8e9c

[COMMIT MESSAGE]:Add Event|| - added ability to define default value for Additional Emails field
   - in menu, Preferences &gt; Event Defaults (needs permission EventDefaults)
   - users with EventDefaultsEditOther permission can see / modify defaults for other users
=========================================================

+ @PreAuthorize("checkPermission('EventDefaults')")
+ @PreAuthorize("checkPermission('EventDefaults')")
+ @PreAuthorize("checkPermission('HasRole')")
+ @PreAuthorize("checkPermission('EventDefaults')")
+ @PreAuthorize("checkPermission('HasRole')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/1837c818f5dabee46fa227f9170aa6efd833b4a8

[COMMIT MESSAGE]:Logging|| - added page Administration > Defaults > Logging that can be used to adjust logging levels while the application is running
=========================================================

+ @PreAuthorize("checkPermission('ApplicationConfig')")
+ @PreAuthorize("checkPermission('ApplicationConfig')")
+ @PreAuthorize("checkPermission('ApplicationConfig')")
+ @PreAuthorize("checkPermission('ApplicationConfig')")
+ @PreAuthorize("checkPermission('ApplicationConfig')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=31&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/194d89944e64cb4f207c6167414eaa5fdd112af0

[COMMIT MESSAGE]:Course Types|| - course types can be defined under Administration > Other > Course Types
 - each course offering can have a course type (to be edited on Edit Course Offering page)
 - through student scheduling status types, a student can be allowed to request only courses of certain course types
=========================================================

+ @PreAuthorize("checkPermission('CourseTypes')")
+ @PreAuthorize("checkPermission('CourseTypeEdit')")
+ @PreAuthorize("checkPermission('CourseTypeEdit')")
+ @PreAuthorize("checkPermission('CourseTypeEdit')")
+ @PreAuthorize("checkPermission('CourseTypeEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/b6d2a381a13335a5c45217f145c9b79915942249

[COMMIT MESSAGE]:Code Cleanup: HQL Reports|| - saved hql service (and the related servlet) replaced by individual backends (using command pattern)
=========================================================

- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports') and checkPermission('HQLReportAdd')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")
- @PreAuthorize("checkPermission(#id, 'SavedHQL', 'HQLReportDelete')")
- @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission(#request.id, 'SavedHQL', 'HQLReportDelete')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/91a6b19f793c6180ab33cf1172f4788423ce4b41

[COMMIT MESSAGE]:Student Accommodations|| - Student Accommodations (administration): added page Student Accommodations where student accommodations / special needs can be managed (very much like with the Student Groups)
 - Instructional Offering Detail, Class Detail, Examination Detail, Event Detail: Enrollments table shows student accommodations, if there are any (column Accommodation is only visible if there is at least one student with an accommodation)
 - Instructional Offering Detail, Class Detail, Examination Detail: If there are any student accommodations, short overview table (accommodation name plus the number of students in the offering / class / exam) is also present at the bottom of the top most section
=========================================================

+ @PreAuthorize("checkPermission('StudentAccommodations')")
+ @PreAuthorize("checkPermission('StudentAccommodationEdit')")
+ @PreAuthorize("checkPermission('StudentAccommodationEdit')")
+ @PreAuthorize("checkPermission('StudentAccommodationEdit')")
+ @PreAuthorize("checkPermission('StudentAccommodationEdit')")
- @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/91a6b19f793c6180ab33cf1172f4788423ce4b41

[COMMIT MESSAGE]:Student Accommodations|| - Student Accommodations (administration): added page Student Accommodations where student accommodations / special needs can be managed (very much like with the Student Groups)
 - Instructional Offering Detail, Class Detail, Examination Detail, Event Detail: Enrollments table shows student accommodations, if there are any (column Accommodation is only visible if there is at least one student with an accommodation)
 - Instructional Offering Detail, Class Detail, Examination Detail: If there are any student accommodations, short overview table (accommodation name plus the number of students in the offering / class / exam) is also present at the bottom of the top most section
=========================================================

+ @PreAuthorize("checkPermission('StudentAccommodations')")
+ @PreAuthorize("checkPermission('StudentAccommodationEdit')")
+ @PreAuthorize("checkPermission('StudentAccommodationEdit')")
+ @PreAuthorize("checkPermission('StudentAccommodationEdit')")
+ @PreAuthorize("checkPermission('StudentAccommodationEdit')")
- @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/b6d2a381a13335a5c45217f145c9b79915942249

[COMMIT MESSAGE]:Code Cleanup: HQL Reports|| - saved hql service (and the related servlet) replaced by individual backends (using command pattern)
=========================================================

- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports') and checkPermission('HQLReportAdd')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")
- @PreAuthorize("checkPermission(#id, 'SavedHQL', 'HQLReportDelete')")
- @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission(#request.id, 'SavedHQL', 'HQLReportDelete')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/b6d2a381a13335a5c45217f145c9b79915942249

[COMMIT MESSAGE]:Code Cleanup: HQL Reports|| - saved hql service (and the related servlet) replaced by individual backends (using command pattern)
=========================================================

- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports') and checkPermission('HQLReportAdd')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")
- @PreAuthorize("checkPermission(#id, 'SavedHQL', 'HQLReportDelete')")
- @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission(#request.id, 'SavedHQL', 'HQLReportDelete')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/b6d2a381a13335a5c45217f145c9b79915942249

[COMMIT MESSAGE]:Code Cleanup: HQL Reports|| - saved hql service (and the related servlet) replaced by individual backends (using command pattern)
=========================================================

- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports') and checkPermission('HQLReportAdd')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")
- @PreAuthorize("checkPermission(#id, 'SavedHQL', 'HQLReportDelete')")
- @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission(#request.id, 'SavedHQL', 'HQLReportDelete')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/70e2472dc15e924e9806128c4505fbc76e50a6e7

[COMMIT MESSAGE]:GWT-based Administration pages|| - code cleanup
   - backend rewritten using command pattern
   - each page is implemented by a separate class (spring service implementing a simple interface)
 - added an interface to create / update / delete a single record
   - this make the update operations run much faster when there are many records on the page
=========================================================

+ @PreAuthorize("checkPermission('AcademicAreas')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicAreaEdit')")
+ @PreAuthorize("checkPermission('AcademicClassifications')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('AcademicClassificationEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormats')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditFormatEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypes')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditTypeEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnits')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('CourseCreditUnitEdit')")
+ @PreAuthorize("checkPermission('EventDateMappings')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventDateMappingEdit')")
+ @PreAuthorize("checkPermission('EventStatuses')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('EventStatusEdit')")
+ @PreAuthorize("checkPermission('ExamTypes')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('ExamTypeEdit')")
+ @PreAuthorize("checkPermission('InstructorRoles')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('InstructorRoleEdit')")
+ @PreAuthorize("checkPermission('Majors')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('MajorEdit')")
+ @PreAuthorize("checkPermission('Minors')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('MinorEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypes')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('OfferingConsentTypeEdit')")
+ @PreAuthorize("checkPermission('Permissions')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PermissionEdit')")
+ @PreAuthorize("checkPermission('PositionTypes')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('PositionTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypes')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('RoomFeatureTypeEdit')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StandardEventNotes')")
+ @PreAuthorize("checkPermission('StudentGroups')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentGroupEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypes')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('StudentSchedulingStatusTypeEdit')")
+ @PreAuthorize("checkPermission('Roles')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
+ @PreAuthorize("checkPermission('RoleEdit')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=32&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/b6d2a381a13335a5c45217f145c9b79915942249

[COMMIT MESSAGE]:Code Cleanup: HQL Reports|| - saved hql service (and the related servlet) replaced by individual backends (using command pattern)
=========================================================

- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports') and checkPermission('HQLReportAdd')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")
- @PreAuthorize("checkPermission(#id, 'SavedHQL', 'HQLReportDelete')")
- @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission(#request.id, 'SavedHQL', 'HQLReportDelete')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/b6d2a381a13335a5c45217f145c9b79915942249

[COMMIT MESSAGE]:Code Cleanup: HQL Reports|| - saved hql service (and the related servlet) replaced by individual backends (using command pattern)
=========================================================

- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports') and checkPermission('HQLReportAdd')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("checkPermission('HQLReports')")
- @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")
- @PreAuthorize("checkPermission(#id, 'SavedHQL', 'HQLReportDelete')")
- @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission(#request.id, 'SavedHQL', 'HQLReportDelete')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/e84ee89a42c88aa2966d2e5e764f18989ed298b6

[COMMIT MESSAGE]:Reservations|| - reservations filter rewritten to use the same component as on the Events page
=========================================================

+ @PreAuthorize("checkPermission('Reservations')")
+ @PreAuthorize("checkPermission('Reservations')")
+ @PreAuthorize("checkPermission('Reservations')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/7d6aba3f858216f535448c8586409d44ee3a4d73

[COMMIT MESSAGE]:Spring Security|| - course / students / examination / event / administration (HQL) reports pages changed to use the new security model
=========================================================

- @PreAuthorize("(#curriculum.id != null and checkPermission(#curriculum.id, 'Curriculum', 'CurriculumEdit')) or checkPermission(#curriculum.department.id, 'Department', 'CurriculumAdd')")
+ @PreAuthorize("(#curriculum.id != null and checkPermission(#curriculum.id, 'Curriculum', 'CurriculumEdit')) or (#curriculum.id == null and checkPermission(#curriculum.department.id, 'Department', 'CurriculumAdd'))")
- @PreAuthorize("(#reservation.id != null and checkPermission(#reservation.id, 'Reservation', 'ReservationEdit')) or (checkPermission(#reservation.offering.id, 'InstructionalOffering', 'ReservationOffering') and checkPermission('ReservationAdd'))")
+ @PreAuthorize("(#reservation.id != null and checkPermission(#reservation.id, 'Reservation', 'ReservationEdit')) or (#reservation.id == null and checkPermission(#reservation.offering.id, 'InstructionalOffering', 'ReservationOffering') and checkPermission('ReservationAdd'))")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports') and checkPermission('HQLReportAdd')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")
+ @PreAuthorize("checkPermission(#id, 'SavedHQL', 'HQLReportDelete')")
+ @PreAuthorize("checkPermission('HQLReports')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/35359697ea7b47dd120b70279a7bd2b22f58dd2c

[COMMIT MESSAGE]:Spring Security|| - reservation pages changed to use the new security model
=========================================================

+ @PreAuthorize("checkPermission('Reservations')")
+ @PreAuthorize("checkPermission('Reservations')")
+ @PreAuthorize("checkPermission('Reservations')")
+ @PreAuthorize("checkPermission('Reservations')")
+ @PreAuthorize("checkPermission('Reservations')")
+ @PreAuthorize("checkPermission(#reservationId, 'Reservation', 'ReservationEdit')")
+ @PreAuthorize("(#reservation.id != null and checkPermission(#reservation.id, 'Reservation', 'ReservationEdit')) or (checkPermission(#reservation.offering.id, 'InstructionalOffering', 'ReservationOffering') and checkPermission('ReservationAdd'))")
+ @PreAuthorize("checkPermission(#reservationId, 'Reservation', 'ReservationDelete')")
+ @PreAuthorize("checkPermission('ReservationAdd')")
+ @PreAuthorize("checkPermission('Reservations')")
+ @PreAuthorize("checkPermission('Reservations')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/99c59f6b954d69fdfec2a33be23b4dd2696635b8

[COMMIT MESSAGE]:Spring|| - introducing Spring security
   - added Spring authorization (database & ldap)
   - added authentication primitives to provide method security
=========================================================

+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission(#curriculumId, 'Curriculum', 'CurriculumDetail')")
+ @PreAuthorize("hasPermission(#curriculum.id, 'Curriculum', 'CurriculumEdit') or hasPermission(#curriculum.department.id, 'Department', 'CurriculumAdd')")
+ @PreAuthorize("hasPermission(#curricula, 'Curriculum', 'CurriculumEdit')")
+ @PreAuthorize("hasPermission(#curriculumId, 'Curriculum', 'CurriculumDelete')")
+ @PreAuthorize("hasPermission(#curriculumIds, 'Curriculum', 'CurriculumDelete')")
+ @PreAuthorize("hasPermission(#curriculumIds, 'Curriculum', 'CurriculumMerge')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+@PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasRight('CurriculumAdd') and hasPermission('CurriculumView')")
+ @PreAuthorize("hasRight('CurriculumAdmin') and hasPermission('CurriculumView')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/3a2a525cb4d0c2f801ceb5bead22b4f5c592e836

[COMMIT MESSAGE]:Curricula|| - field Filter rewritten to use the same component as on the Events page
=========================================================

+ @PreAuthorize("checkPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/7d6aba3f858216f535448c8586409d44ee3a4d73

[COMMIT MESSAGE]:Spring Security|| - course / students / examination / event / administration (HQL) reports pages changed to use the new security model
=========================================================

- @PreAuthorize("(#curriculum.id != null and checkPermission(#curriculum.id, 'Curriculum', 'CurriculumEdit')) or checkPermission(#curriculum.department.id, 'Department', 'CurriculumAdd')")
+ @PreAuthorize("(#curriculum.id != null and checkPermission(#curriculum.id, 'Curriculum', 'CurriculumEdit')) or (#curriculum.id == null and checkPermission(#curriculum.department.id, 'Department', 'CurriculumAdd'))")
- @PreAuthorize("(#reservation.id != null and checkPermission(#reservation.id, 'Reservation', 'ReservationEdit')) or (checkPermission(#reservation.offering.id, 'InstructionalOffering', 'ReservationOffering') and checkPermission('ReservationAdd'))")
+ @PreAuthorize("(#reservation.id != null and checkPermission(#reservation.id, 'Reservation', 'ReservationEdit')) or (#reservation.id == null and checkPermission(#reservation.offering.id, 'InstructionalOffering', 'ReservationOffering') and checkPermission('ReservationAdd'))")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports') and checkPermission('HQLReportAdd')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("checkPermission('HQLReports')")
+ @PreAuthorize("(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))")
+ @PreAuthorize("checkPermission(#id, 'SavedHQL', 'HQLReportDelete')")
+ @PreAuthorize("checkPermission('HQLReports')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/ff2406d2e84bd5f992e54c25de5f23729b2ae07e

[COMMIT MESSAGE]:Spring Security|| - curriculum pages changed to use the new security model
=========================================================

+ @PreAuthorize("checkPermission('CurriculumProjectionRulesDetail')")
+ @PreAuthorize("checkPermission('CurriculumProjectionRulesEdit')")
+ @PreAuthorize("checkPermission('CurriculumProjectionRulesEdit')")
+ @PreAuthorize("checkPermission('CurriculumAdmin')")
+ @PreAuthorize("checkPermission('CurriculumAdmin')")
+ @PreAuthorize("checkPermission(#offeringId, 'InstructionalOffering', 'InstructionalOfferingDetail') or checkPermission('CurriculumAdmin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/4e7965ba598e8bbff170b5356516ddc9ae45940e

[COMMIT MESSAGE]:Spring Security|| - besides of hasPermission methods (return true or false) also added checkPermission methods (return void, throws AccessDeniedException with a message describing the denial)
 - in an attempt to provide more descriptive access denied messages (not just "Access Denied")
 - added access denied handler
=========================================================

- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission(#curriculumId, 'Curriculum', 'CurriculumDetail')")
+ @PreAuthorize("checkPermission(#curriculumId, 'Curriculum', 'CurriculumDetail')")
- @PreAuthorize("hasPermission(#curriculum.id, 'Curriculum', 'CurriculumEdit') or hasPermission(#curriculum.department.id, 'Department', 'CurriculumAdd')")
+ @PreAuthorize("(#curriculum.id != null and checkPermission(#curriculum.id, 'Curriculum', 'CurriculumEdit')) or checkPermission(#curriculum.department.id, 'Department', 'CurriculumAdd')")
- @PreAuthorize("hasPermission(#curricula, 'Curriculum', 'CurriculumEdit')")
+ @PreAuthorize("checkPermission(#curricula, 'Curriculum', 'CurriculumEdit')")
- @PreAuthorize("hasPermission(#curriculumId, 'Curriculum', 'CurriculumDelete')")
+ @PreAuthorize("checkPermission(#curriculumId, 'Curriculum', 'CurriculumDelete')")
- @PreAuthorize("hasPermission(#curriculumIds, 'Curriculum', 'CurriculumDelete')")
+ @PreAuthorize("checkPermission(#curriculumIds, 'Curriculum', 'CurriculumDelete')")
- @PreAuthorize("hasPermission(#curriculumIds, 'Curriculum', 'CurriculumMerge')")
+ @PreAuthorize("checkPermission(#curriculumIds, 'Curriculum', 'CurriculumMerge')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumView')")
- @PreAuthorize("hasRight('CurriculumAdd') and hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumAdd') and checkPermission('CurriculumView')")
- @PreAuthorize("hasRight('CurriculumAdmin') and hasPermission('CurriculumView')")
+ @PreAuthorize("checkPermission('CurriculumAdmin') and checkPermission('CurriculumView')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/UniTime/unitime/commit/99c59f6b954d69fdfec2a33be23b4dd2696635b8

[COMMIT MESSAGE]:Spring|| - introducing Spring security
   - added Spring authorization (database & ldap)
   - added authentication primitives to provide method security
=========================================================

+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission(#curriculumId, 'Curriculum', 'CurriculumDetail')")
+ @PreAuthorize("hasPermission(#curriculum.id, 'Curriculum', 'CurriculumEdit') or hasPermission(#curriculum.department.id, 'Department', 'CurriculumAdd')")
+ @PreAuthorize("hasPermission(#curricula, 'Curriculum', 'CurriculumEdit')")
+ @PreAuthorize("hasPermission(#curriculumId, 'Curriculum', 'CurriculumDelete')")
+ @PreAuthorize("hasPermission(#curriculumIds, 'Curriculum', 'CurriculumDelete')")
+ @PreAuthorize("hasPermission(#curriculumIds, 'Curriculum', 'CurriculumMerge')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+@PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasPermission('CurriculumView')")
+ @PreAuthorize("hasRight('CurriculumAdd') and hasPermission('CurriculumView')")
+ @PreAuthorize("hasRight('CurriculumAdmin') and hasPermission('CurriculumView')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SampathCA/blog-manager/commit/5c34ced6c4d26f64c1e3eab6d16c99ad4400014c

[COMMIT MESSAGE]:sprigify security- script, access control||
=========================================================

+ @PreAuthorize("#blog.user.name==authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Velenteenko/bookmanager/commit/a4ef328f29ec4841c5fdfec72e7b9049f68dcb61

[COMMIT MESSAGE]:Add Security||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/533f759d6adf38587e2c553fcc3d93e373391d12

[COMMIT MESSAGE]:poista tutkinnonosaviite oikeasti||
=========================================================

+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#id, 'perusteenosa', 'KORJAUS')")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/33b3026a1f2dbd6652c78348d3d2125108728657

[COMMIT MESSAGE]:yhtenäistä perusteen kaikki -rajapinta||
=========================================================

- @PreAuthorize("permitAll()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/f9c8e4507d1b573cd333f3889ac4d50155bbd838

[COMMIT MESSAGE]:Uusia rajapintoja ja korjattu bugi perustelistauksen linkkien generoi…||…nnissa
=========================================================

- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/78bc0bed8e1564bd2ad758ec246a2662489c11e0

[COMMIT MESSAGE]:Lisätty rajapinta koko perusopetuksen perusteen hakemiseen sisältöineen||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/37e5f67003d0f3ab7e97fded3344bc326128ad35

[COMMIT MESSAGE]:Korvaamisen perustoiminnallisuus. Vielä pientä UI viilausta.||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/43e02aaaf2542fdd18942ca66810f4618208edb4

[COMMIT MESSAGE]:Toteutusta||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/3c0c2597bc045bd61dd0f004fe51719ea69d6a3b

[COMMIT MESSAGE]:Esiopetuksen perusteprojektin luonti.||
=========================================================

+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/490222013d458b57cf596712c33ae389b4363c58

[COMMIT MESSAGE]:perusteen korjaus julkaisun jälkeen||Lisättu KORJAUS-oikeus update-palveluihin (WIP)
=========================================================

- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'perusteenmetatiedot', 'LUKU')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'perusteenmetatiedot', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'perusteenmetatiedot', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#po.dto.id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#po.dto.id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#po.dto.id, 'perusteenosa', 'KORJAUS')")
- @PreAuthorize("hasPermission(#po.id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#po.id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#po.id, 'perusteenosa', 'KORJAUS')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#id, 'perusteenosa', 'KORJAUS')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#id, 'perusteenosa', 'KORJAUS')")
- @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'MUOKKAUS') or hasPermission(#viiteId, 'tutkinnonosaviite', 'KORJAUS')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS') or hasPermission(#id, 'perusteenosa', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#tov.id, 'tutkinnonosaviite', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#tov.id, 'tutkinnonosaviite', 'MUOKKAUS') or hasPermission(#tov.id, 'tutkinnonosaviite', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS') or hasPermission(#perusteId, 'peruste', 'KORJAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/938e04e00e223111598568637dc4886080dc874c

[COMMIT MESSAGE]:lukituksen refaktorointia||Refaktoroitu Suoritustapa käyttämään geneerisempää lukitussysteemiä.
=========================================================

+ @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/8537365888800646f1bd2243b76a9cfacb546537

[COMMIT MESSAGE]:Tutkinnon osien käsittely viitteiden avulla refactorointi.||
=========================================================

+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("isAuthenticated()")
- @PreAuthorize("returnObject?.tila == T(fi.vm.sade.eperusteet.domain.PerusteTila).VALMIS or hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'tutkinnonosaviite', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'tutkinnonosaviite', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'tutkinnonosaviite', 'LUKU')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#viiteId, 'tutkinnonosaviite', 'LUKU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/34da017bcc4f678893248fa29bea55e6673fe4c5

[COMMIT MESSAGE]:Palvelupuolen toteutus tutkintonimikekoodeille||
=========================================================

+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/1e7ebd73dcf1b210bfac088679a7363745610983

[COMMIT MESSAGE]:perusteenosaviitteen lisäämisen refaktoirointi||
=========================================================

- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/5e14ae63b3327f2c2e26f25eb1095fc534476d5f

[COMMIT MESSAGE]:oikeuksien tarkistelu||
=========================================================

- @PreAuthorize("hasPermission(#dto.perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'peruste', 'LUKU')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'perusteenmetatiedot', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#id, 'perusteprojekti', 'MUOKKAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/a7bdb315375f4353c0ecac21591c669f5d5a2dfb

[COMMIT MESSAGE]:perusteenosien haku suppeassa muodossa.||refaktorointia. perusteen osien ja sisältöviitteiden haku suppeassa
muodossa (ilman yksityiskohtia).
=========================================================

+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/e5d371c626cf81dda88da62595ff77097e9f4955

[COMMIT MESSAGE]:bugikorjaus tekstikappaleen lisäykseen||
=========================================================

- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()") //XXX
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/63ba8685dc699c6ee7f24dc94e34b968e4c899d6

[COMMIT MESSAGE]:oikeustarkisteluja||
=========================================================

+ @PreAuthorize("isAuthenticated()") //XXX ei julkinen rajapinta
+ @PreAuthorize("isAuthenticated()") //XXX ei julkinen rajapinta

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/42bbfc5e21a637e84c942fd0e4ce94b53f1a495e

[COMMIT MESSAGE]:oikeustarkisteluja.||Lisätty oikeustarkisteluja ja refaktoroitu julkista palvelukerroksen
API:a.
=========================================================

+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#k.perusteprojektiId, 'perusteProjekti', 'KOMMENTOINTI')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'LUKU')")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("returnObject?.tila == T(fi.vm.sade.eperusteet.domain.PerusteTila).VALMIS or hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteprojekti', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteprojekti', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteprojekti', 'LUKU')")
+ @PreAuthorize("isAuthenticated()") //XXX
+ @PreAuthorize("hasPermission(null, 'perusteprojekti', 'LUONTI')")
+ @PreAuthorize("hasPermission(#id, 'perusteprojekti', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteprojekti', 'LUKU')")
+ @PreAuthorize("hasPermission(#id, 'perusteprojekti', 'TILANVAIHTO')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("hasPermission(#kommenttidto.perusteprojektiId, 'perusteProjekti', 'KOMMENTOINTI')")
- @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/deef82e74791ffa5a2fe5057ba9f3e7851cca7b5

[COMMIT MESSAGE]:Oikeustarkistelun toteutusta.||Perusteenosiin liittyvän perusteprojektin hakeminen. Perustetta tai
perusteen osaa ei voi enää muokata ellei se kuulu käynnissä olevaan
perusteprojektiin (osa tarkistuksista puuttuu yhä).
=========================================================

+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#po.dto.id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#po.id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'POISTO')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#id, 'perusteenosa', 'MUOKKAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/0492d4760359268a4504ab17a6c54dc6d8f250d7

[COMMIT MESSAGE]:Oikeuksien muokkausta.||Oikeuksien suomennos; kommentoinin oikeuksien bugikorjaus.
=========================================================

- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'MUOKKAUS')")
- @PreAuthorize("hasPermission(#kommenttidto.perusteProjektiId, 'perusteProjekti', 'COMMENT')")
+ @PreAuthorize("hasPermission(#kommenttidto.perusteprojektiId, 'perusteProjekti', 'KOMMENTOINTI')")
- @PreAuthorize("hasPermission(#kommenttidto.perusteProjektiId, 'perusteProjekti', 'COMMENT')")
+ @PreAuthorize("hasPermission(#kommenttidto.perusteprojektiId, 'perusteProjekti', 'KOMMENTOINTI')")
- @PreAuthorize("hasPermission(#kommenttidto.perusteProjektiId, 'perusteProjekti', 'COMMENT')")
+ //@PreAuthorize("hasPermission(#kommenttidto.perusteprojektiId, 'perusteProjekti', 'KOMMENTOINTI')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/3711405bda225372991a6048bd72366469c877e4

[COMMIT MESSAGE]:Spring-security permission evaluator käyttöönotto.||Oikeustarkistelun lisäämisen ensimmäinen vaihe.
=========================================================

- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
+ @PreAuthorize("hasPermission(#perusteId, 'peruste', 'UPDATE')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#kommenttidto.perusteProjektiId, 'perusteProjekti', 'COMMENT')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#kommenttidto.perusteProjektiId, 'perusteProjekti', 'COMMENT')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasPermission(#kommenttidto.perusteProjektiId, 'perusteProjekti', 'COMMENT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/732b15fe93fe803e04ad9f09e361ec127a0840f2

[COMMIT MESSAGE]:Muokkaaja ja kommentti versiotietojen hakuun.||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet/commit/34f422b1bbfd46c650e2d7e11439f7c1e87d1a35

[COMMIT MESSAGE]:Lisätty sisällön sorttaustoiminto backendiin||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/f1ac50419bf59d40667cae44fcc257a51d5d1ef8

[COMMIT MESSAGE]:api test and ctx||
=========================================================

- @PreAuthorize("(hasRole('apiTest.update') and #dto.id != null) or (hasRole('apiTest.add') and #dto.id == null)")
+ @PreAuthorize("(hasRole('apiTest.update') and #dto.id != null) or (hasRole('apiTest.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('apiTest.list')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jklmnlkevin/daxia-jeasyui/commit/8865db62701a8d031109d3b44dc1605f38471502

[COMMIT MESSAGE]:init||
=========================================================

+ @PreAuthorize("(hasRole('system.menu.update') and #dto.id != null) or (hasRole('system.menu.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.menu.delete')")
+ @PreAuthorize("(hasRole('system.authority.update') and #dto.id != null) or (hasRole('system.authority.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.authority.delete')")
+ @PreAuthorize("(hasRole('system.systemConfig.update') and #dto.id != null) or (hasRole('system.systemConfig.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemConfig.delete')")
+ @PreAuthorize("hasRole('system.systemConfig.list')")
+ @PreAuthorize("(hasRole('system.systemLog.update') and #dto.id != null) or (hasRole('system.systemLog.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('system.systemLog.delete')")
+ @PreAuthorize("hasRole('system.systemLog.list')")
+ @PreAuthorize("(hasRole('user.update') and #dto.id != null) or (hasRole('user.add') and #dto.id == null)")
+ @PreAuthorize("hasRole('user.updateRole')")
+ @PreAuthorize("hasRole('user.disable')")
+ @PreAuthorize("hasRole('user.active')")
+ @PreAuthorize("hasRole('user.list')")
+ @PreAuthorize("hasRole('user.resetPassword')")
+ @PreAuthorize("hasRole('user.delete')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=33&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/walidBelfadel/upemgur/commit/ca1eb43cc6d1e1ff9dcd6b80ddead2411d81d71b

[COMMIT MESSAGE]:final commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/walidBelfadel/upemgur/commit/ca1eb43cc6d1e1ff9dcd6b80ddead2411d81d71b

[COMMIT MESSAGE]:final commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=34&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/walidBelfadel/upemgur/commit/ca1eb43cc6d1e1ff9dcd6b80ddead2411d81d71b

[COMMIT MESSAGE]:final commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/walidBelfadel/upemgur/commit/ca1eb43cc6d1e1ff9dcd6b80ddead2411d81d71b

[COMMIT MESSAGE]:final commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/PascalHuijsmans/Enterprice-Grade-Software/commit/baac79b1e9f713a5ad118b5280e52a9a0643d35c

[COMMIT MESSAGE]:intial commit||
=========================================================

+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/PascalHuijsmans/Enterprice-Grade-Software/commit/baac79b1e9f713a5ad118b5280e52a9a0643d35c

[COMMIT MESSAGE]:intial commit||
=========================================================

+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/PascalHuijsmans/Enterprice-Grade-Software/commit/baac79b1e9f713a5ad118b5280e52a9a0643d35c

[COMMIT MESSAGE]:intial commit||
=========================================================

+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")
+@PreAuthorize("hasRole('ROLE_EMPLOYEE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Megaprog/spring-users/commit/4a8fcc9f174e91dbfc7254fbb0c0e85c98573d7f

[COMMIT MESSAGE]:it is works||
=========================================================

+ @PreAuthorize("hasAuthority('editor')")
+ @PreAuthorize("hasAuthority('editor')")
+ @PreAuthorize("hasAuthority('editor')")
+ @PreAuthorize("hasAuthority('editor')")
+ @PreAuthorize("hasAuthority('editor')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/irajghasemi/rapid/commit/8bbfc0c9569d607857a45a52fa863e53f3ffbfd5

[COMMIT MESSAGE]:First Commit||
=========================================================

+ @PreAuthorize("#oauth2.clientHasRole('ROLE_CLIENT')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=35&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/phantazia/appdirect/commit/068925703d53302cf07e65490421f72a35158e9f

[COMMIT MESSAGE]:the first commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/wertklop/testcase/commit/1317f95ee046cb08f723ef5aff13029d71822812

[COMMIT MESSAGE]:Доработка по защите приложения||
=========================================================

+ @PreAuthorize("hasRole('ROLE_EDITOR')")
+ @PreAuthorize("hasRole('ROLE_EDITOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/pashtika/spring-mvc/commit/947982f7a8ff714546162ec483a5116ee1a33cc4

[COMMIT MESSAGE]:SpringSecurity-MongoDB-MVC||
=========================================================

+ @PreAuthorize("hasRole('ROLE_CAMPAIGN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=36&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/siva636/Sri-Lanka-Jobs/commit/c272c37506c8f3f3e1af6c651497029932bd4952

[COMMIT MESSAGE]:Completed state||
=========================================================

+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_CANDIDATE')")
+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_CANDIDATE')")
+// @PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_EMPLOYER')")
+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_EMPLOYER')")
+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_EMPLOYER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/siva636/Sri-Lanka-Jobs/commit/c272c37506c8f3f3e1af6c651497029932bd4952

[COMMIT MESSAGE]:Completed state||
=========================================================

+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_CANDIDATE')")
+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_CANDIDATE')")
+// @PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_EMPLOYER')")
+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_EMPLOYER')")
+ @PreAuthorize("hasRole('ROLE_EMAIL_VERIFIED_EMPLOYER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jaewo7o/java-blog-aggregator/commit/ba3f0c6100d2d5475ec322611901a4555b4f25be

[COMMIT MESSAGE]:pre authorized||
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/2af1760f3264ebc18e953868bd60ac6a7c991b3f

[COMMIT MESSAGE]:oauth2 implemented||
=========================================================

- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/2af1760f3264ebc18e953868bd60ac6a7c991b3f

[COMMIT MESSAGE]:oauth2 implemented||
=========================================================

- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/ca60d83810197a9a48315654b400cb607b65b13e

[COMMIT MESSAGE]:blog samples have removed||
=========================================================

- @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/2af1760f3264ebc18e953868bd60ac6a7c991b3f

[COMMIT MESSAGE]:oauth2 implemented||
=========================================================

- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/ca60d83810197a9a48315654b400cb607b65b13e

[COMMIT MESSAGE]:blog samples have removed||
=========================================================

- @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/2af1760f3264ebc18e953868bd60ac6a7c991b3f

[COMMIT MESSAGE]:oauth2 implemented||
=========================================================

- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/2af1760f3264ebc18e953868bd60ac6a7c991b3f

[COMMIT MESSAGE]:oauth2 implemented||
=========================================================

- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/ca60d83810197a9a48315654b400cb607b65b13e

[COMMIT MESSAGE]:blog samples have removed||
=========================================================

- @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/2af1760f3264ebc18e953868bd60ac6a7c991b3f

[COMMIT MESSAGE]:oauth2 implemented||
=========================================================

- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/ca60d83810197a9a48315654b400cb607b65b13e

[COMMIT MESSAGE]:blog samples have removed||
=========================================================

- @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/2af1760f3264ebc18e953868bd60ac6a7c991b3f

[COMMIT MESSAGE]:oauth2 implemented||
=========================================================

- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=37&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/webyildirim/trafikhaberci/commit/2af1760f3264ebc18e953868bd60ac6a7c991b3f

[COMMIT MESSAGE]:oauth2 implemented||
=========================================================

- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
- @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/dhhabi/cecs.scheduling/commit/b77e68c8066e4715cffec80c19c03f3f79e8da8c

[COMMIT MESSAGE]:Professors form building and main ui building started !||
=========================================================

- @PreAuthorize("@currentUserServiceImpl.canAccessUser(principal, #id)")
- @PreAuthorize("hasAuthority('ADMIN')")
- @PreAuthorize("hasAuthority('ADMIN')")
+@PreAuthorize("isFullyAuthenticated()") //do not allow Remember-Me

=========================================================
[CODE-CHANGE-URL]:https://github.com/mishgunn/regataiades-app/commit/461845624294ff956da78762a7f462ed6af17948

[COMMIT MESSAGE]:* Auth token support||* Reg update mode
=========================================================

+ @PreAuthorize("@AccessTool.isAuthenticated()")
+ @PreAuthorize("@AccessTool.isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samitkumarpatel/spring-mvc-test-examples-DEMO/commit/0dc3f4e5884833629d08606b8100140a844bc139

[COMMIT MESSAGE]:initial checkins||spring mvc based example with unitest cases
=========================================================

+ @PreAuthorize("hasPermission('Todo', 'add')")
+ @PreAuthorize("hasPermission('Todo', 'delete')")
+ @PreAuthorize("hasPermission('Todo', 'list')")
+ @PreAuthorize("hasPermission('Todo', 'find')")
+ @PreAuthorize("hasPermission('Todo', 'update')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samitkumarpatel/spring-mvc-test-examples-DEMO/commit/0dc3f4e5884833629d08606b8100140a844bc139

[COMMIT MESSAGE]:initial checkins||spring mvc based example with unitest cases
=========================================================

+ @PreAuthorize("hasPermission('Todo', 'add')")
+ @PreAuthorize("hasPermission('Todo', 'delete')")
+ @PreAuthorize("hasPermission('Todo', 'list')")
+ @PreAuthorize("hasPermission('Todo', 'find')")
+ @PreAuthorize("hasPermission('Todo', 'update')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/samitkumarpatel/spring-mvc-test-examples-DEMO/commit/0dc3f4e5884833629d08606b8100140a844bc139

[COMMIT MESSAGE]:initial checkins||spring mvc based example with unitest cases
=========================================================

+ @PreAuthorize("hasPermission('Todo', 'add')")
+ @PreAuthorize("hasPermission('Todo', 'delete')")
+ @PreAuthorize("hasPermission('Todo', 'list')")
+ @PreAuthorize("hasPermission('Todo', 'find')")
+ @PreAuthorize("hasPermission('Todo', 'update')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mimigreg/news/commit/1e5c2064fa3e016488a2d14f2c926d2ba2a0f7f2

[COMMIT MESSAGE]:Basics crud on an easy model||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("#userUI.email == authentication.name")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/janusz-blaszczyk/JbRepoPublic1/commit/639eaf34142b2eb6202a87830cc7f64db38517a7

[COMMIT MESSAGE]:czyszczenie kodu, poukładanie kontrolerów i usług, dodanie strony||startowej z informacjami co, gdzie, dlaczego
=========================================================

-//@PreAuthorize("hasRole('ROLE_OAUTH')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/janusz-blaszczyk/JbRepoPublic1/commit/2b1afe8612b76cf0c6f8c21190f19a5bc4ce84b6

[COMMIT MESSAGE]:działa :) werja 1.0 działającego client/serwer na OAUTH1||
=========================================================

+@PreAuthorize("hasRole('ROLE_OAUTH')")
+ @PreAuthorize("hasRole('ROLE_OAUTH')")
+//@PreAuthorize("hasRole('ROLE_OAUTH')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=38&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/drinkit/drinkit-server/commit/7489cf94a188eb2747cff8b25c532fafe9bacbee

[COMMIT MESSAGE]:extracted from drinkit/drinkIt@dcae852||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAnonymous()")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/drinkit/drinkit-server/commit/7489cf94a188eb2747cff8b25c532fafe9bacbee

[COMMIT MESSAGE]:extracted from drinkit/drinkIt@dcae852||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAnonymous()")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/pazu021/java-blog-aggregator/commit/53e0a6eb1493ae33edfe836950e8e903ae448430

[COMMIT MESSAGE]:Spring web app tutorial 40: Custom Validation Annotation : javavids||
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/voronenko-da/feetapp/commit/e909b51934480b789b1a2d65b70637df380da988

[COMMIT MESSAGE]:first||
=========================================================

+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/voronenko-da/feetapp/commit/e909b51934480b789b1a2d65b70637df380da988

[COMMIT MESSAGE]:first||
=========================================================

+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/xiGUAwanOU/learning-spring-framework/commit/1c8b8f87246cd5e8d8a7c4f8318908bcef71d9df

[COMMIT MESSAGE]:Finally finished the work on spring security.||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/statefulj/statefulj-framework-demo-ddd/commit/5a8299b93b199e32462351a7e58cc694defbbf3f

[COMMIT MESSAGE]:A demo of StatefulJ and DDD architecture||
=========================================================

+ @PreAuthorize("#account.customerId.id == principal.customerId.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/shagaba/shagaba-kickstarter-auth/commit/6b1d7217e5f53a4c406a316dd0bb848cecb8983f

[COMMIT MESSAGE]:security account - user account service||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_VISITOR')")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or (hasRole('ROLE_USER') and #userAccount.accountId == authenticatuin.accountId)")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/shagaba/shagaba-kickstarter-auth/commit/c2fe002c8daa13a06d794913cc91c228c9ab6389

[COMMIT MESSAGE]:polish||
=========================================================

+@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ADMIN_AUTHORITY_SERVICE')")
+@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ADMIN_ROLE_SERVICE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/shagaba/shagaba-kickstarter-auth/commit/c2fe002c8daa13a06d794913cc91c228c9ab6389

[COMMIT MESSAGE]:polish||
=========================================================

+@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ADMIN_AUTHORITY_SERVICE')")
+@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ADMIN_ROLE_SERVICE')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=39&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/statefulj/statefulj-framework-demo-ddd/commit/5a8299b93b199e32462351a7e58cc694defbbf3f

[COMMIT MESSAGE]:A demo of StatefulJ and DDD architecture||
=========================================================

+ @PreAuthorize("#account.customerId.id == principal.customerId.id")

=========================================================
[CODE-CHANGE-URL]:https://github.com/shagaba/shagaba-kickstarter-auth/commit/6b1d7217e5f53a4c406a316dd0bb848cecb8983f

[COMMIT MESSAGE]:security account - user account service||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_USER')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_VISITOR')")
+ @PreAuthorize("hasRole('ROLE_ADMIN') or (hasRole('ROLE_USER') and #userAccount.accountId == authenticatuin.accountId)")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/shagaba/shagaba-kickstarter-auth/commit/c2fe002c8daa13a06d794913cc91c228c9ab6389

[COMMIT MESSAGE]:polish||
=========================================================

+@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ADMIN_AUTHORITY_SERVICE')")
+@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ADMIN_ROLE_SERVICE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/shagaba/shagaba-kickstarter-auth/commit/c2fe002c8daa13a06d794913cc91c228c9ab6389

[COMMIT MESSAGE]:polish||
=========================================================

+@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ADMIN_AUTHORITY_SERVICE')")
+@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ADMIN_ROLE_SERVICE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/code4j-chen/example-code/commit/498826fbc92b86dfd7e00c948e7968447fa690b1

[COMMIT MESSAGE]:Initial commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SPITTER') and #amount > 10")
+ @PreAuthorize("#input.length() <= 3")

=========================================================
[CODE-CHANGE-URL]:https://github.com/code4j-chen/example-code/commit/498826fbc92b86dfd7e00c948e7968447fa690b1

[COMMIT MESSAGE]:Initial commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SPITTER') and #amount > 10")
+ @PreAuthorize("#input.length() <= 3")

=========================================================
[CODE-CHANGE-URL]:https://github.com/thasan01/WebChat-Servlet/commit/fc75275aed406d8b334279dbf7039471321dfb19

[COMMIT MESSAGE]:init commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/odahovskiy/tvoiobzor/commit/a69e7314968a5a0f0e081d070fd8515839957848

[COMMIT MESSAGE]:realized comment deleting||
=========================================================

- @PreAuthorize("hasRole('Admin') " +
+ @PreAuthorize("hasRole('Admin') or (hasRole('User') and @UserServiceImpl.findCommentOwner(#id).getUsername().toLowerCase().equals(principal.username.toLowerCase()))")

=========================================================
[CODE-CHANGE-URL]:https://github.com/odahovskiy/tvoiobzor/commit/31d7ad21416924f4b597bf56c8f7f168c37cd3dc

[COMMIT MESSAGE]:add function of deleting comment||
=========================================================

+ @PreAuthorize("hasRole('Admin') " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/odahovskiy/tvoiobzor/commit/01607d7492d0e2048cb67b048b4355abe0507be7

[COMMIT MESSAGE]:realized edit post method||User can edit his post  while post not accepted by admin
Admin can edit post every time
=========================================================

+ @PreAuthorize("hasRole('Admin') " +
+ @PreAuthorize("hasRole('Admin') " +

=========================================================
[CODE-CHANGE-URL]:https://github.com/odahovskiy/tvoiobzor/commit/d0d92cada2215075d5da14258a14345a029eb66e

[COMMIT MESSAGE]:config nicEit||
=========================================================

+ @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('Admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/odahovskiy/tvoiobzor/commit/02fa4b9eb640943b6aa5d07f1fb19f47e834c0ca

[COMMIT MESSAGE]:adding method security||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/odahovskiy/tvoiobzor/commit/809e0204981ba3edd932ed616e8da5b6f9a2b9d5

[COMMIT MESSAGE]:adding change image function controller method||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/odahovskiy/tvoiobzor/commit/02fa4b9eb640943b6aa5d07f1fb19f47e834c0ca

[COMMIT MESSAGE]:adding method security||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("isAuthenticated()")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=40&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/odahovskiy/tvoiobzor/commit/bd52688417db43681d8083d4d9312bcc6557ab33

[COMMIT MESSAGE]:change some logic||Method getDafultThemeId if not exist create end return ID
and ect..
=========================================================

+ @PreAuthorize("hasRole('Admin')")
+ @PreAuthorize("hasRole('Admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/davidsan/montgomery/commit/7d921004aced7450c5db9a523fa8e31c4dc0d711

[COMMIT MESSAGE]:initial commit||
=========================================================

+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/kazamage/sample2/commit/fe44e6a98f4968368dc326f972afa233dcf5bedb

[COMMIT MESSAGE]:add.||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/prasobhpk/spring-rest-security/commit/97706767e3c0dea5007f6168b18b6ed16fa2070d

[COMMIT MESSAGE]:Initial commit for spring rest security||
=========================================================

+@PreAuthorize("hasAuthority('ROLE_DOMAIN_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/htiwari84/spring-data-examples/commit/1d7554b57ad524bd5d1944490ec5ceca81e6eb05

[COMMIT MESSAGE]:#21 - Polished Spring Data REST + Spring Security example.||Removed obsolete dependency declarations from pom.xml. Rewrote test cases to use Spring MVC test support instead of a running server and RestTemplate. Fixed Security configuration to allow bootstrap in Spring MVC test context. Formatting, JavaDoc.

Original pull request: #22.
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/htiwari84/spring-data-examples/commit/c5920a64d9571a4403aa0ffaf3d2418412d25a14

[COMMIT MESSAGE]:#21 - Added example for Spring Data REST and Spring Security.||Added example of how to secure a Spring Data REST project with Spring Security both on the method level as well as the URI level.

Original pull request: #22.
=========================================================

+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/rpcherrera/ipalit-alpha/commit/a6bf3ab619bcd7193aef9fd7153ca193720d8f32

[COMMIT MESSAGE]:final||
=========================================================

+ @PreAuthorize("#blog.user.username == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#wishlist.user.username == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/rpcherrera/ipalit-alpha/commit/a6bf3ab619bcd7193aef9fd7153ca193720d8f32

[COMMIT MESSAGE]:final||
=========================================================

+ @PreAuthorize("#blog.user.username == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#wishlist.user.username == authentication.name or hasRole('ROLE_ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=41&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/rpcherrera/ipalit-alpha/commit/a6bf3ab619bcd7193aef9fd7153ca193720d8f32

[COMMIT MESSAGE]:final||
=========================================================

+ @PreAuthorize("#blog.user.username == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#wishlist.user.username == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/rpcherrera/ipalit-alpha/commit/a6bf3ab619bcd7193aef9fd7153ca193720d8f32

[COMMIT MESSAGE]:final||
=========================================================

+ @PreAuthorize("#blog.user.username == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#wishlist.user.username == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/IldarS1995/StudentsWebApp/commit/f5a389d397d5821ba4a0c4dad4177868ddfdd5d0

[COMMIT MESSAGE]:Corrected controller files||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/IldarS1995/StudentsWebApp/commit/3d37a33768be3c42f53f8bc83726eb8fce7e031b

[COMMIT MESSAGE]:Added cities localizing, adding and removing features, and modified s…||…tart page
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/IldarS1995/StudentsWebApp/commit/66fe10e7afdaf2589351231ba1b72c26705ea154

[COMMIT MESSAGE]:Correct dynamic news uploading code, fixed bug with deleting news whi…||…le being on the same news viewing page and added JS file size checking to the student info page.
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/IldarS1995/StudentsWebApp/commit/49fba5bd749773889db4125774f48b84ed065f31

[COMMIT MESSAGE]:Added modifying and deleting news, with some security||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#news.author.username == authentication.name")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sanketbajoria/jittrackGTS/commit/b38d88603d26c6a6e51a1705218ca40f350afad7

[COMMIT MESSAGE]:Merge branch 'master' of||https://github.com/sanketbajoria/jittrackGTS.git

Conflicts:
	jittrackGTS/src/main/java/com/jittrack/gts/config/SecurityConfiguration.java
	jittrackGTS/src/main/java/com/jittrack/gts/web/rest/GTSAccountResource.java
=========================================================

+ @PreAuthorize("hasPermission(null, 'allowDoSomething')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sanketbajoria/jittrackGTS/commit/b96c5fe549c95155015af541d0d74b7c78592aaa

[COMMIT MESSAGE]:Changes||
=========================================================

+ @PreAuthorize("hasPermission(null, 'allowDoSomething')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/limackk/project1/commit/8e9292d1152adf43e0834a64f1b8cecf0d74d597

[COMMIT MESSAGE]:second commit||
=========================================================

+ @PreAuthorize("#route.user.name = authentication.name")

=========================================================
[CODE-CHANGE-URL]:https://github.com/bkielczewski/example-spring-boot-security/commit/57ce6761df3db2ad79355bdfebd5404cb4839c82

[COMMIT MESSAGE]:Initial commit||
=========================================================

+ @PreAuthorize("@currentUserServiceImpl.canAccessUser(principal, #id)")
+ @PreAuthorize("hasAuthority('ADMIN')")
+ @PreAuthorize("hasAuthority('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/kleskq/Springjs/commit/2a4b6b33a5f3dab67fa0efdb6278e6440ec1df98

[COMMIT MESSAGE]:restapi||
=========================================================

- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/kleskq/Springjs/commit/2a4b6b33a5f3dab67fa0efdb6278e6440ec1df98

[COMMIT MESSAGE]:restapi||
=========================================================

- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chintan2201/TicTacToe_cs520/commit/018884b034cd4e17d16faa8c4bd8a045a8434969

[COMMIT MESSAGE]:tic tac toe init||init
=========================================================

+ - I have add @PreAuthorize("principal.username == #user.username") tag on the above of getSavedGames() method in
+ @PreAuthorize("principal.username == #user.username")
+ @PreAuthorize("principal.username == #user.username")
+ - I have add @PreAuthorize("principal.username == #user.username") tag on the above of getSavedGames() method in
+ @PreAuthorize("principal.username == #user.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/marcodd23/hirelance/commit/c9e3d6d8b0065fec4f7203b16d0111208aed7427

[COMMIT MESSAGE]:primo||
=========================================================

+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ //@PreAuthorize("hasRole('admin')")
+ @PreAuthorize("#userID==principal.user.userID")
+ //@PreAuthorize("1==2")
+ @PreAuthorize("#userID==principal.user.userID")
+ @PreAuthorize("hasRole('admin') OR principal.user.userID==#userID")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=42&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/kleskq/Springjs/commit/2a4b6b33a5f3dab67fa0efdb6278e6440ec1df98

[COMMIT MESSAGE]:restapi||
=========================================================

- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/chintan2201/TicTacToe_cs520/commit/018884b034cd4e17d16faa8c4bd8a045a8434969

[COMMIT MESSAGE]:tic tac toe init||init
=========================================================

+ - I have add @PreAuthorize("principal.username == #user.username") tag on the above of getSavedGames() method in
+ @PreAuthorize("principal.username == #user.username")
+ @PreAuthorize("principal.username == #user.username")
+ - I have add @PreAuthorize("principal.username == #user.username") tag on the above of getSavedGames() method in
+ @PreAuthorize("principal.username == #user.username")

=========================================================
[CODE-CHANGE-URL]:https://github.com/marcodd23/hirelance/commit/c9e3d6d8b0065fec4f7203b16d0111208aed7427

[COMMIT MESSAGE]:primo||
=========================================================

+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ //@PreAuthorize("hasRole('admin')")
+ @PreAuthorize("#userID==principal.user.userID")
+ //@PreAuthorize("1==2")
+ @PreAuthorize("#userID==principal.user.userID")
+ @PreAuthorize("hasRole('admin') OR principal.user.userID==#userID")

=========================================================
[CODE-CHANGE-URL]:https://github.com/marcodd23/hirelance/commit/c9e3d6d8b0065fec4f7203b16d0111208aed7427

[COMMIT MESSAGE]:primo||
=========================================================

+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ //@PreAuthorize("hasRole('admin')")
+ @PreAuthorize("#userID==principal.user.userID")
+ //@PreAuthorize("1==2")
+ @PreAuthorize("#userID==principal.user.userID")
+ @PreAuthorize("hasRole('admin') OR principal.user.userID==#userID")

=========================================================
[CODE-CHANGE-URL]:https://github.com/marcodd23/hirelance/commit/c9e3d6d8b0065fec4f7203b16d0111208aed7427

[COMMIT MESSAGE]:primo||
=========================================================

+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ @PreAuthorize("#curriculumID==principal.user.freelanceProfile.curriculum.curriculumID")
+ //@PreAuthorize("hasRole('admin')")
+ @PreAuthorize("#userID==principal.user.userID")
+ //@PreAuthorize("1==2")
+ @PreAuthorize("#userID==principal.user.userID")
+ @PreAuthorize("hasRole('admin') OR principal.user.userID==#userID")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Merwis/raid-planner/commit/c15ef744c024b68d534d524c5dd64daca2a0a564

[COMMIT MESSAGE]:Přidána úprava uživatelů a postav.||
=========================================================

+ //@PreAuthorize("#myCharacter.user.login == authentication.name OR hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Merwis/raid-planner/commit/1918fb48e5bd3d541f897f516789ada45e640599

[COMMIT MESSAGE]:Další práce na uživatelských účtech a validace formulářů.||
=========================================================

+ @PreAuthorize("#myCharacter.user.login == authentication.name OR hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Merwis/raid-planner/commit/c15ef744c024b68d534d524c5dd64daca2a0a564

[COMMIT MESSAGE]:Přidána úprava uživatelů a postav.||
=========================================================

+ //@PreAuthorize("#myCharacter.user.login == authentication.name OR hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Merwis/raid-planner/commit/1918fb48e5bd3d541f897f516789ada45e640599

[COMMIT MESSAGE]:Další práce na uživatelských účtech a validace formulářů.||
=========================================================

+ @PreAuthorize("#myCharacter.user.login == authentication.name OR hasRole('ROLE_ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=43&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/marcosco/ttimer/commit/52d3bd02c4ed9c892833b789491ccbb341d19e24

[COMMIT MESSAGE]:First commit||
=========================================================

+ @PreAuthorize("#timer.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/augustinejuly/BloodBank/commit/79d772f8e64b7ea6cd03c7c1eb3cdff6db1fc34c

[COMMIT MESSAGE]:Bloodbank POC project||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_USER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_USER','ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/augustinejuly/BloodBank/commit/79d772f8e64b7ea6cd03c7c1eb3cdff6db1fc34c

[COMMIT MESSAGE]:Bloodbank POC project||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_USER','ROLE_ADMIN')")
+ @PreAuthorize("hasAnyRole('ROLE_USER','ROLE_ADMIN')")
+@PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mg-3/Turbo/commit/1a9ab4b1366feaff64258557b3b831ac4aa3babc

[COMMIT MESSAGE]:Adding phod report accessibility via REST||Plugin data sources
Initial Spring security
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER'")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Proactum/arti-initial/commit/139947cbab7f270007dcd6b5ee3eac24ca78b2b0

[COMMIT MESSAGE]:Code brought over from Metka. Most clear major changes done. Removed …||…HTML-code from inside java since it's smarter to develope the site as a separate entity.
=========================================================

+@PreAuthorize("hasPermission('"+ Permission.Values.CAN_PERFORM_SEARCH +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_SAVE_EXPERT_SEARCH +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission(#id, '" + PermissionCheck.Values.REMOVE_SEARCH + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+@PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_CREATE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_APPROVE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_REMOVE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_RESTORE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_PERFORM_SEARCH +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+//@PreAuthorize("hasPermission('canViewSettingsPage', 'PERMISSION')")
+@PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_SETTINGS_PAGE +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_JSON +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_GENERATE_REPORTS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_API_USERS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_API_USERS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_API_USERS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION') OR " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION') OR " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_INDEX_INFO +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_MANUALLY_INDEX_CONTENT +"', 'PERMISSION')")
+ /*@PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_JSON +"', 'PERMISSION')")
+//@PreAuthorize("hasRole('ROLE_ADMIN')")
+ //@PreAuthorize("hasRole('ROLE_XXX')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Proactum/arti-initial/commit/139947cbab7f270007dcd6b5ee3eac24ca78b2b0

[COMMIT MESSAGE]:Code brought over from Metka. Most clear major changes done. Removed …||…HTML-code from inside java since it's smarter to develope the site as a separate entity.
=========================================================

+@PreAuthorize("hasPermission('"+ Permission.Values.CAN_PERFORM_SEARCH +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_SAVE_EXPERT_SEARCH +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission(#id, '" + PermissionCheck.Values.REMOVE_SEARCH + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+@PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_CREATE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_APPROVE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_REMOVE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_RESTORE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_PERFORM_SEARCH +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+//@PreAuthorize("hasPermission('canViewSettingsPage', 'PERMISSION')")
+@PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_SETTINGS_PAGE +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_JSON +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_GENERATE_REPORTS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_API_USERS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_API_USERS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_API_USERS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION') OR " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION') OR " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_INDEX_INFO +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_MANUALLY_INDEX_CONTENT +"', 'PERMISSION')")
+ /*@PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_JSON +"', 'PERMISSION')")
+//@PreAuthorize("hasRole('ROLE_ADMIN')")
+ //@PreAuthorize("hasRole('ROLE_XXX')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Proactum/arti-initial/commit/139947cbab7f270007dcd6b5ee3eac24ca78b2b0

[COMMIT MESSAGE]:Code brought over from Metka. Most clear major changes done. Removed …||…HTML-code from inside java since it's smarter to develope the site as a separate entity.
=========================================================

+@PreAuthorize("hasPermission('"+ Permission.Values.CAN_PERFORM_SEARCH +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_SAVE_EXPERT_SEARCH +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission(#id, '" + PermissionCheck.Values.REMOVE_SEARCH + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+@PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_CREATE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_APPROVE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_REMOVE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_RESTORE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_PERFORM_SEARCH +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+//@PreAuthorize("hasPermission('canViewSettingsPage', 'PERMISSION')")
+@PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_SETTINGS_PAGE +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_JSON +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_GENERATE_REPORTS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_API_USERS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_API_USERS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_API_USERS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION') OR " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION') OR " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_INDEX_INFO +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_MANUALLY_INDEX_CONTENT +"', 'PERMISSION')")
+ /*@PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_JSON +"', 'PERMISSION')")
+//@PreAuthorize("hasRole('ROLE_ADMIN')")
+ //@PreAuthorize("hasRole('ROLE_XXX')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Proactum/arti-initial/commit/139947cbab7f270007dcd6b5ee3eac24ca78b2b0

[COMMIT MESSAGE]:Code brought over from Metka. Most clear major changes done. Removed …||…HTML-code from inside java since it's smarter to develope the site as a separate entity.
=========================================================

+@PreAuthorize("hasPermission('"+ Permission.Values.CAN_PERFORM_SEARCH +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_SAVE_EXPERT_SEARCH +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission(#id, '" + PermissionCheck.Values.REMOVE_SEARCH + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+@PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_CREATE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_APPROVE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_REMOVE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_RESTORE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_PERFORM_SEARCH +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+//@PreAuthorize("hasPermission('canViewSettingsPage', 'PERMISSION')")
+@PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_SETTINGS_PAGE +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_JSON +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_GENERATE_REPORTS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_API_USERS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_API_USERS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_API_USERS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION') OR " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION') OR " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_INDEX_INFO +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_MANUALLY_INDEX_CONTENT +"', 'PERMISSION')")
+ /*@PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_JSON +"', 'PERMISSION')")
+//@PreAuthorize("hasRole('ROLE_ADMIN')")
+ //@PreAuthorize("hasRole('ROLE_XXX')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Proactum/arti-initial/commit/139947cbab7f270007dcd6b5ee3eac24ca78b2b0

[COMMIT MESSAGE]:Code brought over from Metka. Most clear major changes done. Removed …||…HTML-code from inside java since it's smarter to develope the site as a separate entity.
=========================================================

+@PreAuthorize("hasPermission('"+ Permission.Values.CAN_PERFORM_SEARCH +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_SAVE_EXPERT_SEARCH +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission(#id, '" + PermissionCheck.Values.REMOVE_SEARCH + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+@PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_CREATE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_APPROVE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_REMOVE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_RESTORE_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_PERFORM_SEARCH +"', '" + PermissionCheck.Values.PERMISSION + "')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_REVISION +"', '" + PermissionCheck.Values.PERMISSION + "') " +
+//@PreAuthorize("hasPermission('canViewSettingsPage', 'PERMISSION')")
+@PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_SETTINGS_PAGE +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_JSON +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_GENERATE_REPORTS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_API_USERS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_API_USERS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_EDIT_API_USERS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION') OR " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION') OR " +
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_VIEW_INDEX_INFO +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_MANUALLY_INDEX_CONTENT +"', 'PERMISSION')")
+ /*@PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_CONFIGURATIONS +"', 'PERMISSION')")
+ @PreAuthorize("hasPermission('"+ Permission.Values.CAN_UPLOAD_JSON +"', 'PERMISSION')")
+//@PreAuthorize("hasRole('ROLE_ADMIN')")
+ //@PreAuthorize("hasRole('ROLE_XXX')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/KramerIT/Library/commit/08d7a3ee96d43a66e15a8e38150862b1e7b175ab

[COMMIT MESSAGE]:upload project||
=========================================================

+ //@PreAuthorize("APP_ROLE")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=44&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/sambitc/FitnessTracker/commit/d802e9c9eae8bdfd63a12830f48b7ea069e30567

[COMMIT MESSAGE]:commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN') and hasPermission(#goal, 'createGoal')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sambitc/ch19/commit/832402b48748ad37abb1f16b3638dd73d9929d92

[COMMIT MESSAGE]:commit||
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/ffb4bff1b13a3b10a926019b7df00881cbcbf323

[COMMIT MESSAGE]:M6 - Implement controllers for system administrator interface||git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5226 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

+ @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/4072d64570d0e0839f1922965976ba8967ea790c

[COMMIT MESSAGE]:M6 - Implement controllers for system administrator interface||git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5202 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

-@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
-@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #userId)")
+@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #adminId)")
+@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #adminId)")
- @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/ffb4bff1b13a3b10a926019b7df00881cbcbf323

[COMMIT MESSAGE]:M6 - Implement controllers for system administrator interface||git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5226 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

+ @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/4072d64570d0e0839f1922965976ba8967ea790c

[COMMIT MESSAGE]:M6 - Implement controllers for system administrator interface||git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5202 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

-@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
-@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #userId)")
+@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #adminId)")
+@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #adminId)")
- @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/1ec0867a5ebc0ca6fe214dba8a6551d0e478f820

[COMMIT MESSAGE]:[M6] - Add ACL||git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5187 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

+@PreAuthorize("@decisionAccess.permissionCompany(principal, #companyId)")
+ @PreAuthorize("permitAll")
+@PreAuthorize("@decisionAccess.permissionCompany(principal, #companyId)")
+@PreAuthorize("@decisionAccess.permissionCompany(principal, #companyId)")
+@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #userId)")
-//@PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("@decisionAccess.permissionUser(principal, #userId)")
- //@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN') or (hasRole('ROLE_USER') and #userId == authentication.name)")
+ @PreAuthorize("permitAll")
-//@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN') or (hasRole('ROLE_USER') and #userId == authentication.name)")
+@PreAuthorize("@decisionAccess.permissionUser(principal, #userId)")
+ @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/c05540e531a26378b00950eb4338f5e2e51f3ed8

[COMMIT MESSAGE]:Fix remove reviews||git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5179 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

+@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+//@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN') or (hasRole('ROLE_USER') and #userId == authentication.name)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/6aa1d6ed7a2dfb46e7fb4aa9d64211c94e7ca35d

[COMMIT MESSAGE]:Fix auto login and change message for validation fields||git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5173 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

- //@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN') or (hasRole('ROLE_USER') and #userId == authentication.name")
+ //@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN') or (hasRole('ROLE_USER') and #userId == authentication.name)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/0ae2ea2d03835c140d41ae9e989fd6507b0c182c

[COMMIT MESSAGE]:[M5] Implements page for review details||git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5164 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

- //@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN') or (hasRole('ROLE_USER') and #userId.toString() == authentication.name")
+ //@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN') or (hasRole('ROLE_USER') and #userId == authentication.name")

=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/4072d64570d0e0839f1922965976ba8967ea790c

[COMMIT MESSAGE]:M6 - Implement controllers for system administrator interface||git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5202 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

-@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
-@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #userId)")
+@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #adminId)")
+@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #adminId)")
- @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/ffb4bff1b13a3b10a926019b7df00881cbcbf323

[COMMIT MESSAGE]:M6 - Implement controllers for system administrator interface||git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5226 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

+ @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/4072d64570d0e0839f1922965976ba8967ea790c

[COMMIT MESSAGE]:M6 - Implement controllers for system administrator interface||git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5202 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

-@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
-@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #userId)")
+@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #adminId)")
+@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #adminId)")
- @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/4072d64570d0e0839f1922965976ba8967ea790c

[COMMIT MESSAGE]:M6 - Implement controllers for system administrator interface||git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5202 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

-@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
-@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #userId)")
+@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #adminId)")
+@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #adminId)")
- @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/ffb4bff1b13a3b10a926019b7df00881cbcbf323

[COMMIT MESSAGE]:M6 - Implement controllers for system administrator interface||git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5226 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

+ @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/4072d64570d0e0839f1922965976ba8967ea790c

[COMMIT MESSAGE]:M6 - Implement controllers for system administrator interface||git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5202 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

-@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
-@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #userId)")
+@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #adminId)")
+@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #adminId)")
- @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/b5d9a965a8aee61de75fdbd23f499ac324e1ccaf

[COMMIT MESSAGE]:M6 - Implement controllers for system administrator interface: fix sa…||…ve point and add tablet, refactor social network connect, fix menu after activate email

git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5247 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

+ @PreAuthorize("permitAll")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=45&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/b5d9a965a8aee61de75fdbd23f499ac324e1ccaf

[COMMIT MESSAGE]:M6 - Implement controllers for system administrator interface: fix sa…||…ve point and add tablet, refactor social network connect, fix menu after activate email

git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5247 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

+ @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/1ec0867a5ebc0ca6fe214dba8a6551d0e478f820

[COMMIT MESSAGE]:[M6] - Add ACL||git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5187 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

+@PreAuthorize("@decisionAccess.permissionCompany(principal, #companyId)")
+ @PreAuthorize("permitAll")
+@PreAuthorize("@decisionAccess.permissionCompany(principal, #companyId)")
+@PreAuthorize("@decisionAccess.permissionCompany(principal, #companyId)")
+@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #userId)")
-//@PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("@decisionAccess.permissionUser(principal, #userId)")
- //@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN') or (hasRole('ROLE_USER') and #userId == authentication.name)")
+ @PreAuthorize("permitAll")
-//@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN') or (hasRole('ROLE_USER') and #userId == authentication.name)")
+@PreAuthorize("@decisionAccess.permissionUser(principal, #userId)")
+ @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/redwerk/likelabs/commit/4072d64570d0e0839f1922965976ba8967ea790c

[COMMIT MESSAGE]:M6 - Implement controllers for system administrator interface||git-svn-id: svn+ssh://redwerk.com/home/svn/likelabs@5202 5beb62dc-ff0c-0410-899a-bd8837d9df5a
=========================================================

-@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+@PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SYSTEM_ADMIN')")
-@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #userId)")
+@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #adminId)")
+@PreAuthorize("@decisionAccess.permissionCompanyAdmin(principal, #adminId)")
- @PreAuthorize("permitAll")

=========================================================
[CODE-CHANGE-URL]:https://github.com/wangwudi/Undone/commit/296afdf3209652904ab7eb3fac7508dbd1565e80

[COMMIT MESSAGE]:增加方法安全注解||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/RomanXdd/TextStyle/commit/9fc9005d5c93cf54345e72732624bbd57f6095c4

[COMMIT MESSAGE]:WorkProject||
=========================================================

+ @PreAuthorize("@security.owner(#folderId) and @security.owner(#resources)")
+ @PreAuthorize("@security.owner(#folderId) and @security.owner(#presentations)")
+ @PreAuthorize("@security.owner(#folderID)")
+ @PreAuthorize("#folder.id==null or @security.owner(#folder.id)")
+ @PreAuthorize("@security.allowRead(#id)")
+ @PreAuthorize("@security.owner(#id)")
+ @PreAuthorize("@security.allowChangeHierarchy(#presentationId)")
+ @PreAuthorize("@security.allowChangeHierarchy(#slideID) && (#item.id==null || @security.allowChangeHierarchy(#item.id))")
+ @PreAuthorize("#presentation.id==null || @security.owner(#presentation.id)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID) and @security.owner(#resourceId)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID)")
+ @PreAuthorize("@security.allowChangeHierarchy(#slideId)")
+ @PreAuthorize("@security.authorized()")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.owner(#id)")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.owner(#resourcesIds)")
+ @PreAuthorize("@security.owner(#resourceIDS)")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.authorized()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/RomanXdd/TextStyle/commit/9fc9005d5c93cf54345e72732624bbd57f6095c4

[COMMIT MESSAGE]:WorkProject||
=========================================================

+ @PreAuthorize("@security.owner(#folderId) and @security.owner(#resources)")
+ @PreAuthorize("@security.owner(#folderId) and @security.owner(#presentations)")
+ @PreAuthorize("@security.owner(#folderID)")
+ @PreAuthorize("#folder.id==null or @security.owner(#folder.id)")
+ @PreAuthorize("@security.allowRead(#id)")
+ @PreAuthorize("@security.owner(#id)")
+ @PreAuthorize("@security.allowChangeHierarchy(#presentationId)")
+ @PreAuthorize("@security.allowChangeHierarchy(#slideID) && (#item.id==null || @security.allowChangeHierarchy(#item.id))")
+ @PreAuthorize("#presentation.id==null || @security.owner(#presentation.id)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID) and @security.owner(#resourceId)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID)")
+ @PreAuthorize("@security.allowChangeHierarchy(#slideId)")
+ @PreAuthorize("@security.authorized()")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.owner(#id)")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.owner(#resourcesIds)")
+ @PreAuthorize("@security.owner(#resourceIDS)")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.authorized()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/RomanXdd/TextStyle/commit/9fc9005d5c93cf54345e72732624bbd57f6095c4

[COMMIT MESSAGE]:WorkProject||
=========================================================

+ @PreAuthorize("@security.owner(#folderId) and @security.owner(#resources)")
+ @PreAuthorize("@security.owner(#folderId) and @security.owner(#presentations)")
+ @PreAuthorize("@security.owner(#folderID)")
+ @PreAuthorize("#folder.id==null or @security.owner(#folder.id)")
+ @PreAuthorize("@security.allowRead(#id)")
+ @PreAuthorize("@security.owner(#id)")
+ @PreAuthorize("@security.allowChangeHierarchy(#presentationId)")
+ @PreAuthorize("@security.allowChangeHierarchy(#slideID) && (#item.id==null || @security.allowChangeHierarchy(#item.id))")
+ @PreAuthorize("#presentation.id==null || @security.owner(#presentation.id)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID) and @security.owner(#resourceId)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID)")
+ @PreAuthorize("@security.allowChangeHierarchy(#slideId)")
+ @PreAuthorize("@security.authorized()")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.owner(#id)")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.owner(#resourcesIds)")
+ @PreAuthorize("@security.owner(#resourceIDS)")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.authorized()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/RomanXdd/TextStyle/commit/9fc9005d5c93cf54345e72732624bbd57f6095c4

[COMMIT MESSAGE]:WorkProject||
=========================================================

+ @PreAuthorize("@security.owner(#folderId) and @security.owner(#resources)")
+ @PreAuthorize("@security.owner(#folderId) and @security.owner(#presentations)")
+ @PreAuthorize("@security.owner(#folderID)")
+ @PreAuthorize("#folder.id==null or @security.owner(#folder.id)")
+ @PreAuthorize("@security.allowRead(#id)")
+ @PreAuthorize("@security.owner(#id)")
+ @PreAuthorize("@security.allowChangeHierarchy(#presentationId)")
+ @PreAuthorize("@security.allowChangeHierarchy(#slideID) && (#item.id==null || @security.allowChangeHierarchy(#item.id))")
+ @PreAuthorize("#presentation.id==null || @security.owner(#presentation.id)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID) and @security.owner(#resourceId)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID)")
+ @PreAuthorize("@security.allowChangeHierarchy(#slideId)")
+ @PreAuthorize("@security.authorized()")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.owner(#id)")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.owner(#resourcesIds)")
+ @PreAuthorize("@security.owner(#resourceIDS)")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.authorized()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/RomanXdd/TextStyle/commit/9fc9005d5c93cf54345e72732624bbd57f6095c4

[COMMIT MESSAGE]:WorkProject||
=========================================================

+ @PreAuthorize("@security.owner(#folderId) and @security.owner(#resources)")
+ @PreAuthorize("@security.owner(#folderId) and @security.owner(#presentations)")
+ @PreAuthorize("@security.owner(#folderID)")
+ @PreAuthorize("#folder.id==null or @security.owner(#folder.id)")
+ @PreAuthorize("@security.allowRead(#id)")
+ @PreAuthorize("@security.owner(#id)")
+ @PreAuthorize("@security.allowChangeHierarchy(#presentationId)")
+ @PreAuthorize("@security.allowChangeHierarchy(#slideID) && (#item.id==null || @security.allowChangeHierarchy(#item.id))")
+ @PreAuthorize("#presentation.id==null || @security.owner(#presentation.id)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID) and @security.owner(#resourceId)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID)")
+ @PreAuthorize("@security.allowChangeHierarchy(#displayItemID)")
+ @PreAuthorize("@security.allowChangeHierarchy(#slideId)")
+ @PreAuthorize("@security.authorized()")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.owner(#id)")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.owner(#resourcesIds)")
+ @PreAuthorize("@security.owner(#resourceIDS)")
+ @PreAuthorize("@security.owner(#resourceID)")
+ @PreAuthorize("@security.authorized()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jaroslavpsenicka/bordylek/commit/e44d034106ef478164f25ed6bc0a7066465c5c0a

[COMMIT MESSAGE]:initial import||
=========================================================

+ @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
+ @PreAuthorize("hasPermission(#s, 'OWNER') or hasRole('ADMIN')")
+ @PreAuthorize("hasPermission(#s, 'OWNER') or hasRole('ADMIN')")
+ @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
+ @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
+ @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
+ @PreAuthorize("hasPermission(#user, 'OWNER') or hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=46&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/jaroslavpsenicka/bordylek/commit/e44d034106ef478164f25ed6bc0a7066465c5c0a

[COMMIT MESSAGE]:initial import||
=========================================================

+ @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
+ @PreAuthorize("hasPermission(#s, 'OWNER') or hasRole('ADMIN')")
+ @PreAuthorize("hasPermission(#s, 'OWNER') or hasRole('ADMIN')")
+ @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
+ @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
+ @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
+ @PreAuthorize("hasPermission(#user, 'OWNER') or hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/vitakozlova/tp_project/commit/4057ed28b3302a70c9e5b03beeabd48c554ea245

[COMMIT MESSAGE]:getInventory||Vita
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_CLERK', 'ROLE_ADMIN', 'ROLE_MANAGER', 'ROLE_SELLER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/darrenhamilton/Woflow/commit/2b24059cf553e6bb33d291d6c01a35fa9b8ef455

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/darrenhamilton/Woflow/commit/2b24059cf553e6bb33d291d6c01a35fa9b8ef455

[COMMIT MESSAGE]:Initial Commit||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=47&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/mkjasinski/spring-security-acl/commit/a9e67e4c44f23f6867ada3e0ebaad535b17d0e3b

[COMMIT MESSAGE]:I have added ACL support||
=========================================================

+ @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")
+ @PreAuthorize("hasPermission(#event, delete)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/imanuelchandra/rbac/commit/02acfc45e20df780ca0f014c1f1aa9c585ac0354

[COMMIT MESSAGE]:add rbac project||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mdecourci/myaxon-gradle/commit/e8c075b789d7d159f4c8558111625dd8bf5e4500

[COMMIT MESSAGE]:tran||
=========================================================

- @PreAuthorize("hasRole('DRM_Sales')")
+ @PreAuthorize("hasRole('DRM_Legal')")
- @PreAuthorize("hasRole('DRM_Legal')")
+ @PreAuthorize("hasRole('DRM_Sales')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mdecourci/myaxon-gradle/commit/8fd29a449ccd12cd49a4f3e00756fc351e618be2

[COMMIT MESSAGE]:Security done||
=========================================================

+ @PreAuthorize("hasRole('DRM_Sales')")
+ @PreAuthorize("hasRole('DRM_Legal')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/miricy/mystore/commit/4d82cb837b1695987d04a191dcf35fc2f6b749d3

[COMMIT MESSAGE]:adding generic controller and service||
=========================================================

+ @PreAuthorize("hasPermission(#user, 'cadastra_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'altera_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'remove_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'listagem_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'cadastra_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'altera_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'remove_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'listagem_'+#this.this.name)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/miricy/mystore/commit/4d82cb837b1695987d04a191dcf35fc2f6b749d3

[COMMIT MESSAGE]:adding generic controller and service||
=========================================================

+ @PreAuthorize("hasPermission(#user, 'cadastra_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'altera_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'remove_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'listagem_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'cadastra_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'altera_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'remove_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'listagem_'+#this.this.name)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/miricy/mystore/commit/e0002f447e898ab0560cf408dd29be27c7899203

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/dkojic/unity/commit/6ea533251ec00a997c9ec6aa111e5b11b1b5079f

[COMMIT MESSAGE]:-Bugfix:login page post action fixed when running on tomcat||-utf-8 char encoding filter added
=========================================================

+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/tibetjungle/security/commit/e21ef98ff9285a33bb04e59613c0c49daad568b5

[COMMIT MESSAGE]:init repository||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasPermission(#contact, 'delete') or hasPermission(#contact, admin)")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasPermission(#domainObject, admin)")
+ @PreAuthorize("hasPermission(#domainObject, admin)")
+ @PreAuthorize("hasPermission(#domainObject, 'delete') or hasPermission(#domainObject, admin)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/tibetjungle/security/commit/e21ef98ff9285a33bb04e59613c0c49daad568b5

[COMMIT MESSAGE]:init repository||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasPermission(#contact, 'delete') or hasPermission(#contact, admin)")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasPermission(#domainObject, admin)")
+ @PreAuthorize("hasPermission(#domainObject, admin)")
+ @PreAuthorize("hasPermission(#domainObject, 'delete') or hasPermission(#domainObject, admin)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DaryaNikiforova/SpringProject/commit/b4c7fbef14364b65fd75e4b4d7e3e34ece95d373

[COMMIT MESSAGE]:Final project commit||
=========================================================

+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DaryaNikiforova/SpringProject/commit/ec1108cae64c810fc4643c36e9db3ef18b987229

[COMMIT MESSAGE]:Working Spring MVC, Spring Data||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('addRole')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=48&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/DaryaNikiforova/SpringProject/commit/b4c7fbef14364b65fd75e4b4d7e3e34ece95d373

[COMMIT MESSAGE]:Final project commit||
=========================================================

+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DaryaNikiforova/SpringProject/commit/ec1108cae64c810fc4643c36e9db3ef18b987229

[COMMIT MESSAGE]:Working Spring MVC, Spring Data||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('addRole')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DaryaNikiforova/SpringProject/commit/b4c7fbef14364b65fd75e4b4d7e3e34ece95d373

[COMMIT MESSAGE]:Final project commit||
=========================================================

+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DaryaNikiforova/SpringProject/commit/ec1108cae64c810fc4643c36e9db3ef18b987229

[COMMIT MESSAGE]:Working Spring MVC, Spring Data||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('addRole')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DaryaNikiforova/SpringProject/commit/b4c7fbef14364b65fd75e4b4d7e3e34ece95d373

[COMMIT MESSAGE]:Final project commit||
=========================================================

+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DaryaNikiforova/SpringProject/commit/ec1108cae64c810fc4643c36e9db3ef18b987229

[COMMIT MESSAGE]:Working Spring MVC, Spring Data||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('addRole')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DaryaNikiforova/SpringProject/commit/b4c7fbef14364b65fd75e4b4d7e3e34ece95d373

[COMMIT MESSAGE]:Final project commit||
=========================================================

+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DaryaNikiforova/SpringProject/commit/ec1108cae64c810fc4643c36e9db3ef18b987229

[COMMIT MESSAGE]:Working Spring MVC, Spring Data||
=========================================================

+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('addRole')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+@PreAuthorize("denyAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("permitAll")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/klebermo/mystore/commit/c7f477b377df7097a679aaee2fc3c9c6b6bb47c8

[COMMIT MESSAGE]:updating several views||
=========================================================

- @PreAuthorize("hasPermission(#user, 'listagem_'+#this.this.name)")
- @PreAuthorize("hasPermission(#user, 'listagem_'+#this.this.name)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/klebermo/mystore/commit/d62e0a78da2ffa80f7f6d1d40b7e5ae51ca9425f

[COMMIT MESSAGE]:updating code files from Application||
=========================================================

- @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/klebermo/mystore/commit/a0502dbaaaa6730a51ac304ce4aa5a33e9d55e14

[COMMIT MESSAGE]:trying implement Multipart file upload||
=========================================================

- @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/klebermo/mystore/commit/c7f477b377df7097a679aaee2fc3c9c6b6bb47c8

[COMMIT MESSAGE]:updating several views||
=========================================================

- @PreAuthorize("hasPermission(#user, 'listagem_'+#this.this.name)")
- @PreAuthorize("hasPermission(#user, 'listagem_'+#this.this.name)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/klebermo/mystore/commit/d62e0a78da2ffa80f7f6d1d40b7e5ae51ca9425f

[COMMIT MESSAGE]:updating code files from Application||
=========================================================

- @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/klebermo/mystore/commit/a0502dbaaaa6730a51ac304ce4aa5a33e9d55e14

[COMMIT MESSAGE]:trying implement Multipart file upload||
=========================================================

- @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/klebermo/mystore/commit/a0827a56c579e84418cb319527bb2d799c8e8b1d

[COMMIT MESSAGE]:updating generic controller and service classes||
=========================================================

+ @PreAuthorize("hasPermission(#user, 'listagem_'+#this.this.name)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/klebermo/mystore/commit/4d82cb837b1695987d04a191dcf35fc2f6b749d3

[COMMIT MESSAGE]:adding generic controller and service||
=========================================================

+ @PreAuthorize("hasPermission(#user, 'cadastra_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'altera_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'remove_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'listagem_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'cadastra_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'altera_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'remove_'+#this.this.name)")
+ @PreAuthorize("hasPermission(#user, 'listagem_'+#this.this.name)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/klebermo/mystore/commit/c9d9e885c32e4760d203cfe9fed672602d0adac2

[COMMIT MESSAGE]:adding preAuthorize conditional to views||
=========================================================

- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/klebermo/mystore/commit/99a225caf6fbc924947c6b0b6a6a1f9538eaf1ed

[COMMIT MESSAGE]:updating MainController and ClienteController||
=========================================================

- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
- @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sadasidha/identity-web/commit/0ccf9cf39a7a7b69dcca87b27b11837838134a5e

[COMMIT MESSAGE]:added admin option view||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/ruinra/yodde_spring/commit/d9ac98350f7c17c8abff3f53784032b190a65cf2

[COMMIT MESSAGE]:first||
=========================================================

+ @PreAuthorize("authenticated")

=========================================================
[CODE-CHANGE-URL]:https://github.com/vilasmaciel/rideon-server/commit/f83d511d034c45b93b285f8451d3073e0d8832dc

[COMMIT MESSAGE]:Import source code||
=========================================================

+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #event.id)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId) or @userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMessageOwner(authentication.name, #messageId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #group.id)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId) or @groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isMember(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isMessageOwner(authentication.name, #groupId, #messageId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isOwner(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isOwner(authentication.name, #practiceId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userDto.username)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #request.target.username) or "
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=49&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/vilasmaciel/rideon-server/commit/f83d511d034c45b93b285f8451d3073e0d8832dc

[COMMIT MESSAGE]:Import source code||
=========================================================

+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #event.id)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId) or @userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMessageOwner(authentication.name, #messageId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #group.id)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId) or @groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isMember(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isMessageOwner(authentication.name, #groupId, #messageId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isOwner(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isOwner(authentication.name, #practiceId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userDto.username)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #request.target.username) or "
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/vilasmaciel/rideon-server/commit/f83d511d034c45b93b285f8451d3073e0d8832dc

[COMMIT MESSAGE]:Import source code||
=========================================================

+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #event.id)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId) or @userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMessageOwner(authentication.name, #messageId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #group.id)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId) or @groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isMember(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isMessageOwner(authentication.name, #groupId, #messageId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isOwner(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isOwner(authentication.name, #practiceId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userDto.username)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #request.target.username) or "
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/vilasmaciel/rideon-server/commit/f83d511d034c45b93b285f8451d3073e0d8832dc

[COMMIT MESSAGE]:Import source code||
=========================================================

+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #event.id)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId) or @userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMessageOwner(authentication.name, #messageId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #group.id)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId) or @groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isMember(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isMessageOwner(authentication.name, #groupId, #messageId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isOwner(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isOwner(authentication.name, #practiceId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userDto.username)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #request.target.username) or "
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/vilasmaciel/rideon-server/commit/f83d511d034c45b93b285f8451d3073e0d8832dc

[COMMIT MESSAGE]:Import source code||
=========================================================

+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #event.id)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId) or @userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMessageOwner(authentication.name, #messageId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #group.id)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId) or @groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isMember(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isMessageOwner(authentication.name, #groupId, #messageId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isOwner(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isOwner(authentication.name, #practiceId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userDto.username)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #request.target.username) or "
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/vilasmaciel/rideon-server/commit/f83d511d034c45b93b285f8451d3073e0d8832dc

[COMMIT MESSAGE]:Import source code||
=========================================================

+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #event.id)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId) or @userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isOwner(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isAllowed(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMember(authentication.name, #eventId)")
+ @PreAuthorize("@eventPermisions.isMessageOwner(authentication.name, #messageId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #group.id)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId) or @groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isOwner(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isMember(authentication.name, #groupId)")
+ @PreAuthorize("@groupPermisions.isMessageOwner(authentication.name, #groupId, #messageId)")
+ @PreAuthorize("@groupPermisions.isAllowed(authentication.name, #groupId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isOwner(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isAllowed(authentication.name, #practiceId)")
+ @PreAuthorize("@practicePermisions.isOwner(authentication.name, #practiceId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userDto.username)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isFriendOf(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #request.target.username) or "
+ @PreAuthorize("@userPermisions.isAllowed(authentication.name, #userId)")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=50&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=51&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/cekiboy/WebAuction/commit/be861a004d174ba708849cf2cd8c748134354cdc

[COMMIT MESSAGE]:First commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cekiboy/WebAuction/commit/ca48edc79297fdf49ecde42a364994d2d12420c8

[COMMIT MESSAGE]:error checking||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cekiboy/WebAuction/commit/c7b885d783bfe2da371fa23caa88801ab09abb21

[COMMIT MESSAGE]:added functionalities : My Auctions, My Bids||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cekiboy/WebAuction/commit/5507c15d81c758c49a3d7c1f2339a32a9e03b442

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cekiboy/WebAuction/commit/be861a004d174ba708849cf2cd8c748134354cdc

[COMMIT MESSAGE]:First commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cekiboy/WebAuction/commit/ca48edc79297fdf49ecde42a364994d2d12420c8

[COMMIT MESSAGE]:error checking||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cekiboy/WebAuction/commit/c7b885d783bfe2da371fa23caa88801ab09abb21

[COMMIT MESSAGE]:added functionalities : My Auctions, My Bids||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cekiboy/WebAuction/commit/5507c15d81c758c49a3d7c1f2339a32a9e03b442

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cekiboy/WebAuction/commit/be861a004d174ba708849cf2cd8c748134354cdc

[COMMIT MESSAGE]:First commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cekiboy/WebAuction/commit/ca48edc79297fdf49ecde42a364994d2d12420c8

[COMMIT MESSAGE]:error checking||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cekiboy/WebAuction/commit/5507c15d81c758c49a3d7c1f2339a32a9e03b442

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cekiboy/WebAuction/commit/be861a004d174ba708849cf2cd8c748134354cdc

[COMMIT MESSAGE]:First commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cekiboy/WebAuction/commit/ca48edc79297fdf49ecde42a364994d2d12420c8

[COMMIT MESSAGE]:error checking||
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cekiboy/WebAuction/commit/c7b885d783bfe2da371fa23caa88801ab09abb21

[COMMIT MESSAGE]:added functionalities : My Auctions, My Bids||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/cekiboy/WebAuction/commit/5507c15d81c758c49a3d7c1f2339a32a9e03b442

[COMMIT MESSAGE]:first commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/execom-eu/ECLunchOrder/commit/fe5522a282125b1d55d23bfce26c2108f1857167

[COMMIT MESSAGE]:Model corrections, supplier admin GUI elements.||
=========================================================

+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/execom-eu/ECLunchOrder/commit/fe5522a282125b1d55d23bfce26c2108f1857167

[COMMIT MESSAGE]:Model corrections, supplier admin GUI elements.||
=========================================================

+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/execom-eu/ECLunchOrder/commit/fe5522a282125b1d55d23bfce26c2108f1857167

[COMMIT MESSAGE]:Model corrections, supplier admin GUI elements.||
=========================================================

+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
+ @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")
- @PreAuthorize("hasRole('SUPER_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet-ylops/commit/eb142be081da327b6367c788bb646c7030d20227

[COMMIT MESSAGE]:optimoi tietokantalatauksia||
=========================================================

+ @PreAuthorize("hasPermission(#opsId, 'opetussuunnitelma', 'LUKU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet-ylops/commit/47c778053346f765d94bb89861caf18ceb06a3eb

[COMMIT MESSAGE]:Lisätty metodit oppiaineen vuosiluokkakokonaisuuden ja vuosiluokan si…||…sällön päivittämiseen
=========================================================

+ @PreAuthorize("hasPermission(#opsId, 'opetussuunnitelma', 'MUOKKAUS')")
+ @PreAuthorize("hasPermission(#opsId, 'opetussuunnitelma', 'MUOKKAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet-ylops/commit/e940bded85f59013446cc522cd84e100ddf27f59

[COMMIT MESSAGE]:lisää oppiaineen tavoitteiden vuosiluokkaistaminen||keskeneräinen ensimmäinen versio.
=========================================================

+ @PreAuthorize("hasPermission(#opsId, 'opetussuunnitelma', 'MUOKKAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet-ylops/commit/f00519e01fbed89e63b86527d55bdf7efc39c73a

[COMMIT MESSAGE]:Käytä OppimaaraLaajaDto:ta jotta oppimääriinkin populoituisi kaikki p…||…erusteista löytyvä data
=========================================================

+ @PreAuthorize("hasPermission(#opsId, 'opetussuunnitelma', 'MUOKKAUS')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Opetushallitus/eperusteet-ylops/commit/dd9b3b13b6fff4c1dfebcddbad826dce6930991b

[COMMIT MESSAGE]:OppiaineControlleriin getAll-operaatio||
=========================================================

+ @PreAuthorize("hasPermission(#opsId, 'opetussuunnitelma', 'LUKU')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/amertum/spring-security-play2/commit/8fc8da4fe568f87c7e808682f29a830b227264e3

[COMMIT MESSAGE]:Initial commit||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ANONYMOUS')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mcronald92/InventoryManager/commit/823ad02d44f49627769d5a29229269386bf666fe

[COMMIT MESSAGE]:Added user database||
=========================================================

+ @PreAuthorize("hasAnyRole('INVENTORY_MANAGER','PRODUCTION_MANAGER','BUSINESS_MANAGER')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=52&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/mcronald92/InventoryManager/commit/a517236d4315106a07709bfe5d28df0b1ff123f6

[COMMIT MESSAGE]:Bugfix||
=========================================================

- @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasAnyRole('BUSINESS_MANAGER','PRODUCTION_MANAGER')")
- @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasAnyRole('BUSINESS_MANAGER','PRODUCTION_MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mcronald92/InventoryManager/commit/9471ccb3140641f3e3305ced0321330c9e8e2573

[COMMIT MESSAGE]:Added products||
=========================================================

- @PreAuthorize("hasRole('INVENTORY_MANAGER') or hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasAnyRole('INVENTORY_MANAGER','PRODUCTION_MANAGER')")
- @PreAuthorize("hasRole('INVENTORY_MANAGER') or hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasAnyRole('INVENTORY_MANAGER','PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mcronald92/InventoryManager/commit/58094bdcc277ae393f11ba6083d9f14a862debd8

[COMMIT MESSAGE]:Added production goal and order list||
=========================================================

+ @PreAuthorize("hasRole('INVENTORY_MANAGER')")
+ @PreAuthorize("hasRole('BUSINESS_MANAGER')")
+ @PreAuthorize("hasRole('BUSINESS_MANAGER')")
+ @PreAuthorize("hasRole('BUSINESS_MANAGER')")
+ @PreAuthorize("hasRole('BUSINESS_MANAGER')")
+ @PreAuthorize("hasRole('BUSINESS_MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mcronald92/InventoryManager/commit/9471ccb3140641f3e3305ced0321330c9e8e2573

[COMMIT MESSAGE]:Added products||
=========================================================

- @PreAuthorize("hasRole('INVENTORY_MANAGER') or hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasAnyRole('INVENTORY_MANAGER','PRODUCTION_MANAGER')")
- @PreAuthorize("hasRole('INVENTORY_MANAGER') or hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasAnyRole('INVENTORY_MANAGER','PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mcronald92/InventoryManager/commit/4baa0987b8c859aad59c4e3d3ed8cd4d23e27a44

[COMMIT MESSAGE]:Finished complex parts, added creating products||
=========================================================

+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mcronald92/InventoryManager/commit/7a5cd79d594f3d6046e0a8e2a8339d551f3c9f63

[COMMIT MESSAGE]:Added create and retrieve complex parts||
=========================================================

+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mcronald92/InventoryManager/commit/fc0c4aaaed9d06c6530cbbe4f0545917d66dcf69

[COMMIT MESSAGE]:Added simple parts listing||
=========================================================

+ @PreAuthorize("hasRole('INVENTORY_MANAGER') or hasRole('PRODUCTION_MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mcronald92/InventoryManager/commit/464fd29b4fae09e58f1ed6ae19db5a10e5434d85

[COMMIT MESSAGE]:Added simple part functionalities||
=========================================================

+ @PreAuthorize("hasRole('INVENTORY_MANAGER')")
+ @PreAuthorize("hasRole('INVENTORY_MANAGER')")
+ @PreAuthorize("hasRole('INVENTORY_MANAGER')")
+ @PreAuthorize("hasRole('INVENTORY_MANAGER') or hasRole('PRODUCTION_MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mcronald92/InventoryManager/commit/58094bdcc277ae393f11ba6083d9f14a862debd8

[COMMIT MESSAGE]:Added production goal and order list||
=========================================================

+ @PreAuthorize("hasRole('INVENTORY_MANAGER')")
+ @PreAuthorize("hasRole('BUSINESS_MANAGER')")
+ @PreAuthorize("hasRole('BUSINESS_MANAGER')")
+ @PreAuthorize("hasRole('BUSINESS_MANAGER')")
+ @PreAuthorize("hasRole('BUSINESS_MANAGER')")
+ @PreAuthorize("hasRole('BUSINESS_MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mcronald92/InventoryManager/commit/4baa0987b8c859aad59c4e3d3ed8cd4d23e27a44

[COMMIT MESSAGE]:Finished complex parts, added creating products||
=========================================================

+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mcronald92/InventoryManager/commit/7a5cd79d594f3d6046e0a8e2a8339d551f3c9f63

[COMMIT MESSAGE]:Added create and retrieve complex parts||
=========================================================

+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mcronald92/InventoryManager/commit/464fd29b4fae09e58f1ed6ae19db5a10e5434d85

[COMMIT MESSAGE]:Added simple part functionalities||
=========================================================

+ @PreAuthorize("hasRole('INVENTORY_MANAGER')")
+ @PreAuthorize("hasRole('INVENTORY_MANAGER')")
+ @PreAuthorize("hasRole('INVENTORY_MANAGER')")
+ @PreAuthorize("hasRole('INVENTORY_MANAGER') or hasRole('PRODUCTION_MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mcronald92/InventoryManager/commit/9471ccb3140641f3e3305ced0321330c9e8e2573

[COMMIT MESSAGE]:Added products||
=========================================================

- @PreAuthorize("hasRole('INVENTORY_MANAGER') or hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasAnyRole('INVENTORY_MANAGER','PRODUCTION_MANAGER')")
- @PreAuthorize("hasRole('INVENTORY_MANAGER') or hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasAnyRole('INVENTORY_MANAGER','PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mcronald92/InventoryManager/commit/4baa0987b8c859aad59c4e3d3ed8cd4d23e27a44

[COMMIT MESSAGE]:Finished complex parts, added creating products||
=========================================================

+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")
+ @PreAuthorize("hasRole('PRODUCTION_MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/mcronald92/InventoryManager/commit/58094bdcc277ae393f11ba6083d9f14a862debd8

[COMMIT MESSAGE]:Added production goal and order list||
=========================================================

+ @PreAuthorize("hasRole('INVENTORY_MANAGER')")
+ @PreAuthorize("hasRole('BUSINESS_MANAGER')")
+ @PreAuthorize("hasRole('BUSINESS_MANAGER')")
+ @PreAuthorize("hasRole('BUSINESS_MANAGER')")
+ @PreAuthorize("hasRole('BUSINESS_MANAGER')")
+ @PreAuthorize("hasRole('BUSINESS_MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/sambitc/SpringBlog/commit/59f718ae819ef253f4f95084f14bce52c6eb8005

[COMMIT MESSAGE]:initial commit||
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yannicl/rdv/commit/a8b5c72a1e97f2b5408f996680e46f6120c5ecba

[COMMIT MESSAGE]:Adding cancelling of event||Adding resource security
=========================================================

+ @PreAuthorize("denyAll")
+ @PreAuthorize("@eventSM.mayCancelEvent(#eventId)")
+ @PreAuthorize("denyAll")
+ @PreAuthorize("@eventSM.hasAccessToPerson(#personId)")
+ @PreAuthorize("@eventSM.hasAccessToPerson(#personId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yannicl/rdv/commit/a8b5c72a1e97f2b5408f996680e46f6120c5ecba

[COMMIT MESSAGE]:Adding cancelling of event||Adding resource security
=========================================================

+ @PreAuthorize("denyAll")
+ @PreAuthorize("@eventSM.mayCancelEvent(#eventId)")
+ @PreAuthorize("denyAll")
+ @PreAuthorize("@eventSM.hasAccessToPerson(#personId)")
+ @PreAuthorize("@eventSM.hasAccessToPerson(#personId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yannicl/rdv/commit/40d122888312132deec4918ca7051cd8e7fb2c92

[COMMIT MESSAGE]:Correct security flaw||
=========================================================

- @PreAuthorize("denyAll")
- @PreAuthorize("@eventSM.mayCancelEvent(#eventId)")
+ @PreAuthorize("denyAll")
+ @PreAuthorize("@eventSM.mayCancelEvent(#eventId)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yannicl/rdv/commit/a8b5c72a1e97f2b5408f996680e46f6120c5ecba

[COMMIT MESSAGE]:Adding cancelling of event||Adding resource security
=========================================================

+ @PreAuthorize("denyAll")
+ @PreAuthorize("@eventSM.mayCancelEvent(#eventId)")
+ @PreAuthorize("denyAll")
+ @PreAuthorize("@eventSM.hasAccessToPerson(#personId)")
+ @PreAuthorize("@eventSM.hasAccessToPerson(#personId)")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=53&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/syakuis/Spring-security-restful-authentication-and-Angularjs/commit/f531d561d2533306e94eb89be3e98401e9c74480

[COMMIT MESSAGE]:잘못된 소스 정보 변경||
=========================================================

+ @PreAuthorize("#userVO.user_name == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("authenticated")

=========================================================
[CODE-CHANGE-URL]:https://github.com/syakuis/Spring-security-restful-authentication-and-Angularjs/commit/f531d561d2533306e94eb89be3e98401e9c74480

[COMMIT MESSAGE]:잘못된 소스 정보 변경||
=========================================================

+ @PreAuthorize("#userVO.user_name == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("authenticated")

=========================================================
[CODE-CHANGE-URL]:https://github.com/CalabashFox/hemu.tic/commit/fcbf367b6ebbfbafc129bdb138b85cf0d11b45d1

[COMMIT MESSAGE]:added freemarker template engine, added basic settings||
=========================================================

- @PreAuthorize("hasAnyRole('ADMIN_SETTINGS','ADMIN_GLOBAL_SETTINGS')")
+ @PreAuthorize("hayRole('ADMIN_SETTINGS')")
+ @PreAuthorize("hayRole('ADMIN_SETTINGS')")
+ @PreAuthorize("hasRole('ADMIN_USER')")
+ @PreAuthorize("hasRole('ADMIN_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/CalabashFox/hemu.tic/commit/fcbf367b6ebbfbafc129bdb138b85cf0d11b45d1

[COMMIT MESSAGE]:added freemarker template engine, added basic settings||
=========================================================

- @PreAuthorize("hasAnyRole('ADMIN_SETTINGS','ADMIN_GLOBAL_SETTINGS')")
+ @PreAuthorize("hayRole('ADMIN_SETTINGS')")
+ @PreAuthorize("hayRole('ADMIN_SETTINGS')")
+ @PreAuthorize("hasRole('ADMIN_USER')")
+ @PreAuthorize("hasRole('ADMIN_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/CalabashFox/hemu.tic/commit/fcbf367b6ebbfbafc129bdb138b85cf0d11b45d1

[COMMIT MESSAGE]:added freemarker template engine, added basic settings||
=========================================================

- @PreAuthorize("hasAnyRole('ADMIN_SETTINGS','ADMIN_GLOBAL_SETTINGS')")
+ @PreAuthorize("hayRole('ADMIN_SETTINGS')")
+ @PreAuthorize("hayRole('ADMIN_SETTINGS')")
+ @PreAuthorize("hasRole('ADMIN_USER')")
+ @PreAuthorize("hasRole('ADMIN_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/CalabashFox/hemu.tic/commit/fcbf367b6ebbfbafc129bdb138b85cf0d11b45d1

[COMMIT MESSAGE]:added freemarker template engine, added basic settings||
=========================================================

- @PreAuthorize("hasAnyRole('ADMIN_SETTINGS','ADMIN_GLOBAL_SETTINGS')")
+ @PreAuthorize("hayRole('ADMIN_SETTINGS')")
+ @PreAuthorize("hayRole('ADMIN_SETTINGS')")
+ @PreAuthorize("hasRole('ADMIN_USER')")
+ @PreAuthorize("hasRole('ADMIN_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/JustusAdam/swt-festivalmanager/commit/b095f8e3b5926a010b924326faf31828bc2ac0e6

[COMMIT MESSAGE]:new directory structure, copied catering prototype as skeleton for fi…||…nal product
=========================================================

+@PreAuthorize("hasRole('ROLE_CATERER')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=54&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/anr-ru/base.services/commit/9986508af594070be3741705bbddc6d44493c808

[COMMIT MESSAGE]:Repaired a test with ACL security and added a new ACL Manager to||simplify ACL operations.
=========================================================

+ @PreAuthorize("hasPermission(#xx,'write')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("isFullyAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/anr-ru/base.services/commit/9986508af594070be3741705bbddc6d44493c808

[COMMIT MESSAGE]:Repaired a test with ACL security and added a new ACL Manager to||simplify ACL operations.
=========================================================

+ @PreAuthorize("hasPermission(#xx,'write')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("isFullyAuthenticated()")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=55&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/anr-ru/base.services/commit/eba343df3faf8dd7704ee35fb5b3b61a387784e1

[COMMIT MESSAGE]:Added an additional domain-level security checking which delegates the||access to a context domain object. It can be used in conjuntion with a
standard acl hasPermission(...) checking.
=========================================================

- @PreAuthorize("hasPermission(#xx,'write')")
+ @PreAuthorize("hasPermission(#xx,'write') or hasPermission(#xx,'access_write')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/anr-ru/base.services/commit/9986508af594070be3741705bbddc6d44493c808

[COMMIT MESSAGE]:Repaired a test with ACL security and added a new ACL Manager to||simplify ACL operations.
=========================================================

+ @PreAuthorize("hasPermission(#xx,'write')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("isFullyAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SWT14W18/MDG-2000/commit/39b3b14a539e1051219ac6aaef8bccb6cb23249d

[COMMIT MESSAGE]:TOTO kann jetzt mit Geld gewettet werden , tabelle richitg , checkboxen||
=========================================================

-@PreAuthorize("hasRole('ROLE_CUSTOMER_BLOCKABLE')")
+@PreAuthorize("hasRole('ROLE_CUSTOMER_BLOCKABLE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SWT14W18/MDG-2000/commit/8a2e4d74c87c5e8960a4155ce6fcd1332cf0df96

[COMMIT MESSAGE]:Anonymer Nuter erstellt, Controller angelegt, methoden geschrieben,||es fehlen noch kleinigkeiten
=========================================================

+@PreAuthorize("hasRole('ROLE_ANONYM')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SWT14W18/MDG-2000/commit/39b3b14a539e1051219ac6aaef8bccb6cb23249d

[COMMIT MESSAGE]:TOTO kann jetzt mit Geld gewettet werden , tabelle richitg , checkboxen||
=========================================================

-@PreAuthorize("hasRole('ROLE_CUSTOMER_BLOCKABLE')")
+@PreAuthorize("hasRole('ROLE_CUSTOMER_BLOCKABLE')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SWT14W18/MDG-2000/commit/6d1a9c485977c95d97247449d9e22b122681322c

[COMMIT MESSAGE]:Aufsplittung der Rollen im Code fertig, templates fehlen noch.||
=========================================================

+@PreAuthorize("hasRole('ROLE_CUSTOMER_BLOCKABLE')")
+@PreAuthorize("hasRole('ROLE_CUSTOMER')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SWT14W18/MDG-2000/commit/99dc17b712d5f03694264a8a259ae5d0e74452fd

[COMMIT MESSAGE]:neue Rollen nun auch im Header||
=========================================================

+ @PreAuthorize("isAuthenticated()")
- @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SWT14W18/MDG-2000/commit/6d1a9c485977c95d97247449d9e22b122681322c

[COMMIT MESSAGE]:Aufsplittung der Rollen im Code fertig, templates fehlen noch.||
=========================================================

+@PreAuthorize("hasRole('ROLE_CUSTOMER_BLOCKABLE')")
+@PreAuthorize("hasRole('ROLE_CUSTOMER')")
- @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SWT14W18/MDG-2000/commit/f5b0372bdacc2381be9a9425f03ffdd6b7b74a88

[COMMIT MESSAGE]:RIESEN UPDATE: komplette Fehler-/Erfolgsboxen eingefügt. Diverse Bugfixe||jquery und bootstrap mit bootsbox eingebunden. wird nur für die
Fehlerbox verwendet
=========================================================

-@PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SWT14W18/MDG-2000/commit/055b1645941539522549180ba34c39f93038a1cb

[COMMIT MESSAGE]:Controller System ein weniger überarbeitet. (db Ordner löschen!)||Es werden nun einige Rollenchecks ausgeführt, zudem habe ich einigen
Code neu geordnet und optimiert.
Ist noch nicht fertig, habe aber einige //TODO's hinterlassen. ;)
=========================================================

+@PreAuthorize("hasRole('ROLE_BOSS')")
+@PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SWT14W18/MDG-2000/commit/51391c6b2e5c3814d1f24f1711331d87d4e82418

[COMMIT MESSAGE]:Toto Ziehung anzeige + Liste + Controller + Constant.ROLE_TOTOLIST +||Header + Website
=========================================================

+@PreAuthorize("hasRole('ROLE_TOTOLIST')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SWT14W18/MDG-2000/commit/055b1645941539522549180ba34c39f93038a1cb

[COMMIT MESSAGE]:Controller System ein weniger überarbeitet. (db Ordner löschen!)||Es werden nun einige Rollenchecks ausgeführt, zudem habe ich einigen
Code neu geordnet und optimiert.
Ist noch nicht fertig, habe aber einige //TODO's hinterlassen. ;)
=========================================================

+@PreAuthorize("hasRole('ROLE_BOSS')")
+@PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SWT14W18/MDG-2000/commit/51391c6b2e5c3814d1f24f1711331d87d4e82418

[COMMIT MESSAGE]:Toto Ziehung anzeige + Liste + Controller + Constant.ROLE_TOTOLIST +||Header + Website
=========================================================

+@PreAuthorize("hasRole('ROLE_TOTOLIST')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SWT14W18/MDG-2000/commit/0a8df71f8a2629a8c76c62c1d8d214d96087239b

[COMMIT MESSAGE]:Merge branch 'master' of git@github.com:SWT14W18/MDG-2000.git||
=========================================================

+@PreAuthorize("hasRole('ROLE_TOTOLIST')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SWT14W18/MDG-2000/commit/51391c6b2e5c3814d1f24f1711331d87d4e82418

[COMMIT MESSAGE]:Toto Ziehung anzeige + Liste + Controller + Constant.ROLE_TOTOLIST +||Header + Website
=========================================================

+@PreAuthorize("hasRole('ROLE_TOTOLIST')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jakaarl/wepa/commit/66f0e3ae25bf2eb9c7f3b12b2865de9ae5e21a2a

[COMMIT MESSAGE]:Still can't act on reports||
=========================================================

- @PreAuthorize("hasRole('ADMIN')")
- @PreAuthorize("hasRole('ADMIN')")
- @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jakaarl/wepa/commit/8ed879040f5af3036a28b68093784484b3341c3e

[COMMIT MESSAGE]:Roles meant to be Reports, cleaned Controller||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jakaarl/wepa/commit/74ed5a2464954453f4947e48046a9e1f77a78faa

[COMMIT MESSAGE]:AnimalPictureController cleanup.||- formatted, organized imports
- added PreAuthorize-annotations where needed
- moved redirect String to Routes, use placeholder instead of gluing
  the picture id with String concatenation
=========================================================

+ @PreAuthorize("authenticated")
+ @PreAuthorize("authenticated")
+ @PreAuthorize("authenticated")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jakaarl/wepa/commit/c974c6143ea05c3a7c091bb8fdfb1cc71aabcee8

[COMMIT MESSAGE]:Adding some method security to controllers.||* added method security
* removed auth from services
* moved uploaded file validation from service to controller
* fixed some tests

Sorry for the huge big commit. Changes quickly became horribly
tangles and chopping them to several commits would have been
quite an operation.
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("authenticated")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jakaarl/wepa/commit/c974c6143ea05c3a7c091bb8fdfb1cc71aabcee8

[COMMIT MESSAGE]:Adding some method security to controllers.||* added method security
* removed auth from services
* moved uploaded file validation from service to controller
* fixed some tests

Sorry for the huge big commit. Changes quickly became horribly
tangles and chopping them to several commits would have been
quite an operation.
=========================================================

+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("authenticated")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=56&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/huytan/java-blog-aggregator/commit/149a73c75af2ab79852986f12ef2e968d58ea182

[COMMIT MESSAGE]:final||
=========================================================

- @PreAuthorize("#blog.user.name == authencation.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("#blog.user.name == authentication.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/huytan/java-blog-aggregator/commit/97303e38140fef60be720fd28dca6e94ed347980

[COMMIT MESSAGE]:conmit 3||
=========================================================

+ @PreAuthorize("#blog.user.name == authencation.name or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Ruixz/java-note-management/commit/0e1de9252f4933c385518144b5640f3875814dc0

[COMMIT MESSAGE]:reload updated version||
=========================================================

+ @PreAuthorize("#note.user.name == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SUPER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Ruixz/java-note-management/commit/0e1de9252f4933c385518144b5640f3875814dc0

[COMMIT MESSAGE]:reload updated version||
=========================================================

+ @PreAuthorize("#note.user.name == authentication.name or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_SUPER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/tonykopetto/minimalspringmvcsample/commit/80a4e38c5f1afe4830ae0cd75bc887c85575d9e8

[COMMIT MESSAGE]:initial cut||
=========================================================

+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/snesterenkov/desktopviewer-back/commit/b14700311ae6894dd099b4e62e43dbf1ed3141a9

[COMMIT MESSAGE]:Task #376343||add find open department
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/snesterenkov/desktopviewer-back/commit/49475254124c2e08b527af7467330746d25cd2c8

[COMMIT MESSAGE]:Task #368760||1. In model add ProjectEntity(sample data)
2. Add repository for project(crud + changeStatus)
3. Add service for projcet(cru + changeStatus)
4. Add Controller for project(cru + changeStatus)
=========================================================

+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/snesterenkov/desktopviewer-back/commit/b107d9af2b6ee0d80c4061d8869d95311dab977d

[COMMIT MESSAGE]:Task #368760||Add openCompany servicers fr user
add parentstatus in detaildto
=========================================================

+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/snesterenkov/desktopviewer-back/commit/49475254124c2e08b527af7467330746d25cd2c8

[COMMIT MESSAGE]:Task #368760||1. In model add ProjectEntity(sample data)
2. Add repository for project(crud + changeStatus)
3. Add service for projcet(cru + changeStatus)
4. Add Controller for project(cru + changeStatus)
=========================================================

+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/snesterenkov/desktopviewer-back/commit/0fd9ba42caeca69913da290f942f3525e7670e5c

[COMMIT MESSAGE]:Rollback with oauth autentification||
=========================================================

- //@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
- //@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
- //@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/snesterenkov/desktopviewer-back/commit/66e0638dadb05068027042d1e22bf3e3756a2296

[COMMIT MESSAGE]:Task #381387 Create controller for returning snapshots for given user…||… id.
=========================================================

+ //@PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/snesterenkov/desktopviewer-back/commit/09a140025b09df2d0ce28b39f42b7ac2c58a68b7

[COMMIT MESSAGE]:Task #375593||1.add Entity
2.add repository
3.add Service
3.1. Crud
3.2. Save file to /{clientid}/{dateformat(yyyyMMdd_HH_mm_ss)}.jpg
4.add Controller
=========================================================

+ //@PreAuthorize("isAuthenticated()")
+ //@PreAuthorize("isAuthenticated()")
-// @PreAuthorize("isAuthenticated()")
-// @PreAuthorize("isAuthenticated()")
-// @PreAuthorize("isAuthenticated()")
- // @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/snesterenkov/desktopviewer-back/commit/49475254124c2e08b527af7467330746d25cd2c8

[COMMIT MESSAGE]:Task #368760||1. In model add ProjectEntity(sample data)
2. Add repository for project(crud + changeStatus)
3. Add service for projcet(cru + changeStatus)
4. Add Controller for project(cru + changeStatus)
=========================================================

+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")
+// @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/snesterenkov/desktopviewer-back/commit/aeede023758341ade8550405092e2e2f8211f5d6

[COMMIT MESSAGE]:Task #362643||delete authorized in POST user controller
add Role when create
=========================================================

- @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/snesterenkov/desktopviewer-back/commit/a614432157ef41922f4fd7e9a277d38a30d57ba7

[COMMIT MESSAGE]:Task #356487 and Task #356482||add check for existing login by loginName
Add authorization for all requests in user controller
=========================================================

+ @PreAuthorize("isAuthenticated()")
+@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=57&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/snesterenkov/desktopviewer-back/commit/a614432157ef41922f4fd7e9a277d38a30d57ba7

[COMMIT MESSAGE]:Task #356487 and Task #356482||add check for existing login by loginName
Add authorization for all requests in user controller
=========================================================

+ @PreAuthorize("isAuthenticated()")
+@PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated()")

=========================================================
[CODE-CHANGE-URL]:https://github.com/lanyuancom/lanyuan-2.0/commit/40c28c7b677ab9400e9f6d3a902873ef97a2402a

[COMMIT MESSAGE]:No commit message||
=========================================================

+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/lanyuancom/lanyuan-2.0/commit/40c28c7b677ab9400e9f6d3a902873ef97a2402a

[COMMIT MESSAGE]:No commit message||
=========================================================

+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ * @PreAuthorize("hasRole('ROLE_SUPER')")
+ @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。

=========================================================
[CODE-CHANGE-URL]:https://github.com/idamai/wonderlust/commit/fb7eddf4525800eb9472e09722d9c3801120fb19

[COMMIT MESSAGE]:Merge branch 'master' of https://github.com/idamai/wonderlust.git||Conflicts:
	src/main/webapp/WEB-INF/views/dashboard.jsp
	src/main/webapp/resources/js/app.js
=========================================================

-@PreAuthorize("hasRole('ROLE_USER')")
+@PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/idamai/wonderlust/commit/b9ccdfe5ab6d013975a08c75b8e2ac888fe06a41

[COMMIT MESSAGE]:Added home controller||
=========================================================

+@PreAuthorize("hasRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SumitBisht/InventoryMgt/commit/652299af975e2de27ed94f9ce2d18e66172449dc

[COMMIT MESSAGE]:raaz commit with many changes in purchase and approve module||
=========================================================

+/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
+/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SumitBisht/InventoryMgt/commit/0d364ed53d98fb03983ddae82329cfb4b494f19c

[COMMIT MESSAGE]:commit with changes on acl||
=========================================================

-/* 34: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','add')")
+/* 34: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','add')")
+/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 105: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','update')")
+/* 105: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 135: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','view')")
+/* 135: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 154: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','delete')")
+/* 154: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 36: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','add')")
+/* 36: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 54: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','update')")
+/* 54: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','add')")
+/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 109: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','add')")
+/* 109: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 152: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','update')")
+/* 152: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 178: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','delete')")
+/* 178: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 198: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','delete')")
+/* 198: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 218: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','delete')")
+/* 218: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 238: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','update')")
+/* 238: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 248: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','update')")
+/* 248: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 258: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','update')")
+/* 258: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
+/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
+/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 46: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','add')")
+/* 46: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 66: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','add')")
+/* 66: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 92: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','update')")
+/* 92: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 121: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','update')")
+/* 121: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 146: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','view')")
+/* 146: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 176: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','delete')")
+/* 176: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 79: @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
-/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
-/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
-/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
-/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/* 257: @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
-/* 42: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','view')")
+/* 42: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','view')")
+/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 65: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','view')")
+/* 65: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 75: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','add')")
+/* 75: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 87: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','add')")
+/* 87: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 98: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','add')")
+/* 98: */ @PreAuthorize("hasAnyRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SumitBisht/InventoryMgt/commit/0d364ed53d98fb03983ddae82329cfb4b494f19c

[COMMIT MESSAGE]:commit with changes on acl||
=========================================================

-/* 34: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','add')")
+/* 34: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','add')")
+/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 105: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','update')")
+/* 105: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 135: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','view')")
+/* 135: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 154: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','delete')")
+/* 154: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 36: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','add')")
+/* 36: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 54: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','update')")
+/* 54: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','add')")
+/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 109: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','add')")
+/* 109: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 152: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','update')")
+/* 152: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 178: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','delete')")
+/* 178: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 198: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','delete')")
+/* 198: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 218: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','delete')")
+/* 218: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 238: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','update')")
+/* 238: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 248: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','update')")
+/* 248: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 258: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','update')")
+/* 258: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
+/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
+/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 46: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','add')")
+/* 46: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 66: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','add')")
+/* 66: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 92: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','update')")
+/* 92: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 121: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','update')")
+/* 121: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 146: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','view')")
+/* 146: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 176: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','delete')")
+/* 176: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 79: @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
-/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
-/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
-/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
-/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/* 257: @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
-/* 42: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','view')")
+/* 42: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','view')")
+/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 65: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','view')")
+/* 65: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 75: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','add')")
+/* 75: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 87: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','add')")
+/* 87: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 98: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','add')")
+/* 98: */ @PreAuthorize("hasAnyRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SumitBisht/InventoryMgt/commit/0d364ed53d98fb03983ddae82329cfb4b494f19c

[COMMIT MESSAGE]:commit with changes on acl||
=========================================================

-/* 34: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','add')")
+/* 34: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','add')")
+/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 105: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','update')")
+/* 105: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 135: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','view')")
+/* 135: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 154: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','delete')")
+/* 154: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 36: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','add')")
+/* 36: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 54: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','update')")
+/* 54: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','add')")
+/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 109: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','add')")
+/* 109: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 152: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','update')")
+/* 152: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 178: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','delete')")
+/* 178: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 198: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','delete')")
+/* 198: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 218: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','delete')")
+/* 218: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 238: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','update')")
+/* 238: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 248: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','update')")
+/* 248: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 258: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','update')")
+/* 258: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
+/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
+/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 46: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','add')")
+/* 46: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 66: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','add')")
+/* 66: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 92: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','update')")
+/* 92: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 121: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','update')")
+/* 121: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 146: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','view')")
+/* 146: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 176: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','delete')")
+/* 176: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 79: @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
-/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
-/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
-/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
-/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/* 257: @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
-/* 42: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','view')")
+/* 42: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','view')")
+/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 65: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','view')")
+/* 65: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 75: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','add')")
+/* 75: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 87: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','add')")
+/* 87: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 98: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','add')")
+/* 98: */ @PreAuthorize("hasAnyRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SumitBisht/InventoryMgt/commit/0d364ed53d98fb03983ddae82329cfb4b494f19c

[COMMIT MESSAGE]:commit with changes on acl||
=========================================================

-/* 34: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','add')")
+/* 34: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','add')")
+/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 105: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','update')")
+/* 105: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 135: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','view')")
+/* 135: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 154: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','delete')")
+/* 154: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 36: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','add')")
+/* 36: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 54: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','update')")
+/* 54: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','add')")
+/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 109: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','add')")
+/* 109: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 152: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','update')")
+/* 152: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 178: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','delete')")
+/* 178: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 198: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','delete')")
+/* 198: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 218: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','delete')")
+/* 218: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 238: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','update')")
+/* 238: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 248: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','update')")
+/* 248: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 258: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','update')")
+/* 258: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
+/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
+/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 46: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','add')")
+/* 46: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 66: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','add')")
+/* 66: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 92: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','update')")
+/* 92: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 121: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','update')")
+/* 121: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 146: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','view')")
+/* 146: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 176: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','delete')")
+/* 176: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 79: @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
-/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
-/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
-/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
-/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/* 257: @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
-/* 42: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','view')")
+/* 42: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','view')")
+/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 65: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','view')")
+/* 65: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 75: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','add')")
+/* 75: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 87: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','add')")
+/* 87: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 98: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','add')")
+/* 98: */ @PreAuthorize("hasAnyRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SumitBisht/InventoryMgt/commit/0d364ed53d98fb03983ddae82329cfb4b494f19c

[COMMIT MESSAGE]:commit with changes on acl||
=========================================================

-/* 34: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','add')")
+/* 34: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','add')")
+/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 105: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','update')")
+/* 105: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 135: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','view')")
+/* 135: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 154: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','delete')")
+/* 154: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 36: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','add')")
+/* 36: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 54: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','update')")
+/* 54: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','add')")
+/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 109: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','add')")
+/* 109: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 152: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','update')")
+/* 152: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 178: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','delete')")
+/* 178: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 198: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','delete')")
+/* 198: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 218: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','delete')")
+/* 218: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 238: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','update')")
+/* 238: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 248: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','update')")
+/* 248: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 258: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','update')")
+/* 258: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
+/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
+/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 46: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','add')")
+/* 46: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 66: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','add')")
+/* 66: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 92: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','update')")
+/* 92: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 121: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','update')")
+/* 121: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 146: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','view')")
+/* 146: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 176: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','delete')")
+/* 176: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 79: @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
-/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
-/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
-/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
-/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/* 257: @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
-/* 42: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','view')")
+/* 42: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','view')")
+/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 65: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','view')")
+/* 65: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 75: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','add')")
+/* 75: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 87: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','add')")
+/* 87: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 98: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','add')")
+/* 98: */ @PreAuthorize("hasAnyRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SumitBisht/InventoryMgt/commit/652299af975e2de27ed94f9ce2d18e66172449dc

[COMMIT MESSAGE]:raaz commit with many changes in purchase and approve module||
=========================================================

+/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
+/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SumitBisht/InventoryMgt/commit/0d364ed53d98fb03983ddae82329cfb4b494f19c

[COMMIT MESSAGE]:commit with changes on acl||
=========================================================

-/* 34: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','add')")
+/* 34: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','add')")
+/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 105: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','update')")
+/* 105: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 135: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','view')")
+/* 135: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 154: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('account','delete')")
+/* 154: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 36: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','add')")
+/* 36: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 54: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','update')")
+/* 54: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','add')")
+/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 109: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','add')")
+/* 109: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 152: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','update')")
+/* 152: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 178: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','delete')")
+/* 178: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 198: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','delete')")
+/* 198: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 218: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','delete')")
+/* 218: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 238: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','update')")
+/* 238: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 248: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','update')")
+/* 248: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 258: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','update')")
+/* 258: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
+/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
+/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 46: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','add')")
+/* 46: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 66: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','add')")
+/* 66: */ @PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 92: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','update')")
+/* 92: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 121: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','update')")
+/* 121: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 146: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','view')")
+/* 146: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 176: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaseorder','delete')")
+/* 176: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 79: @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
-/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
-/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
-/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
-/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/*@PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
-/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
+@PreAuthorize("hasAnyRole('ROLE_USER')")
+/* 257: @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
-/* 42: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','view')")
+/* 42: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','view')")
+/* 53: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 65: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','view')")
+/* 65: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 75: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('item','add')")
+/* 75: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 87: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemcategory','add')")
+/* 87: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")
-/* 98: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('itemunit','add')")
+/* 98: */ @PreAuthorize("hasAnyRole('ROLE_USER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/SumitBisht/InventoryMgt/commit/bcbe92d5e1dc5e0e06eecefaa693b81a1b28f74e

[COMMIT MESSAGE]:commit with changes on purchase menu||
=========================================================

+/* 79: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 100: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','add')")
+/* 161: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+/* 194: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','update')")
+/* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','view')")
+/* 257: */ @PreAuthorize("hasAnyRole('ROLE_USER') AND hasPermission('purchaserequisition','delete')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=58&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/SumitBisht/InventoryMgt/commit/145ce9b1250edcbd38446506eedfb7b407b2e113

[COMMIT MESSAGE]:Commit after adding files||
=========================================================

+ /* 222: */ @PreAuthorize("hasAnyRole('ROLE_USER') ")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/7cf02a5425d166ea49533dfa84f92ff9e48c456a

[COMMIT MESSAGE]:Added messages API functionality.||SQL importable files are included, but unsure which is correct so needs to be corrected.
=========================================================

+ @PreAuthorize("hasPermission(#task, 'member') or hasPermission(#task, 'manager')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasPermission(#task, 'member') or hasPermission(#task, 'manager')")
+ @PreAuthorize("hasPermission(#message, 'write') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("(hasPermission(#message, 'write') or hasRole('ROLE_MODERATOR')) and (hasPermission(#task, 'member') or hasPermission(#task, 'manager'))")
+ @PreAuthorize("hasPermission(#message, 'delete') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/87f8d12b29cb2b6b8da911d00a7784f53220fae3

[COMMIT MESSAGE]:added core competencies||
=========================================================

+ @PreAuthorize("hasRole(#location, 'MANAGER')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/79d80fe44b6c957877df0f8930b4b0e7927fa8d0

[COMMIT MESSAGE]:in the middle of something||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_MODERATOR') or hasPermission(#group, 'MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/d9892bfece1f53ad56fa883822d346bb59f458ee

[COMMIT MESSAGE]:started ..||
=========================================================

+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#class, 'MANAGER')"
+ @PreAuthorize("hasPermission(#class, 'MANAGER')"
+ @PreAuthorize("hasPermission(#class, 'MANAGER')"
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_MODERATOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/8bb78f0c9c4c628341a3c36d6eb2e72aeb4f1926

[COMMIT MESSAGE]:added user delete functionality back in||
=========================================================

-// @PreAuthorize("hasPermission(#user, 'DELETE') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#user, 'DELETE') or hasRole('ROLE_ADMIN')")
-// @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/d9892bfece1f53ad56fa883822d346bb59f458ee

[COMMIT MESSAGE]:started ..||
=========================================================

+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#class, 'MANAGER')"
+ @PreAuthorize("hasPermission(#class, 'MANAGER')"
+ @PreAuthorize("hasPermission(#class, 'MANAGER')"
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_MODERATOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/afa584f3d2da8eb6dc1cd836e86356a6daa087c5

[COMMIT MESSAGE]:Started implementation of changing user roles via api. Resource and||service interface are complete, still need service implementation/doa.  

Build is functional but nothing will happen if you try to use the
updateUserRole functionality.
=========================================================

+ @PreAuthorize("hasPermission(#user, 'WRITE') and hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/aecb83a82e9d75c838505240f30c2c14eff42c6d

[COMMIT MESSAGE]:Fixed Full updates (@PUT)||-full update can be used to set values to null
=========================================================

- @PreAuthorize("hasPermission(#user, 'DELETE') or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+// @PreAuthorize("hasPermission(#user, 'DELETE') or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/aecb83a82e9d75c838505240f30c2c14eff42c6d

[COMMIT MESSAGE]:Fixed Full updates (@PUT)||-full update can be used to set values to null
=========================================================

- @PreAuthorize("hasPermission(#user, 'DELETE') or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_ADMIN')")
+// @PreAuthorize("hasPermission(#user, 'DELETE') or hasRole('ROLE_ADMIN')")
+// @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/f55729eaa82bbad2582ca7fb2b07bdac6d69e919

[COMMIT MESSAGE]:Changes:||Users
-to recieve the user object of the current user make a get request to
/user/myUser
-to recieve the collection of all user objects make get request to /user
-changed permission requirement of get all users so that anyone can make
this request and will actually return all users.

Post
-Bugfix: Users are now allowed to create a new post in any groups they
are manager of.  Previously was mistakenly restricted to only users.
=========================================================

- @PreAuthorize("hasPermission(#group, 'member')")
+ @PreAuthorize("hasPermission(#group, 'member') or hasPermisssion(#group, 'manager')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/879ad876b3089cb2eac1dda1d6253ad3d9ccff9f

[COMMIT MESSAGE]:Added password setting functionality, requires logged in a the user or||as an admin.
=========================================================

+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/a09c07008b2608c877315bd8f7597b0d7be3b954

[COMMIT MESSAGE]:replaced honors.uh.edu with dash as package||
=========================================================

+ @PreAuthorize("hasPermission(#bar, 'DELETE')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasPermission(#user, 'DELETE')")
+ @PreAuthorize("hasPermission(#user, 'DELETE') or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/11a1a9f1630c3a98ba65c770dc310cbb64310daa

[COMMIT MESSAGE]:Version for playing||
=========================================================

- @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole(#location, 'MANAGER')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/87f8d12b29cb2b6b8da911d00a7784f53220fae3

[COMMIT MESSAGE]:added core competencies||
=========================================================

+ @PreAuthorize("hasRole(#location, 'MANAGER')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/79d80fe44b6c957877df0f8930b4b0e7927fa8d0

[COMMIT MESSAGE]:in the middle of something||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_MODERATOR') or hasPermission(#group, 'MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/d9892bfece1f53ad56fa883822d346bb59f458ee

[COMMIT MESSAGE]:started ..||
=========================================================

+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#class, 'MANAGER')"
+ @PreAuthorize("hasPermission(#class, 'MANAGER')"
+ @PreAuthorize("hasPermission(#class, 'MANAGER')"
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_MODERATOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/71460406b4b4f4874106ecf1e6364feca635a93e

[COMMIT MESSAGE]:Multiple fixes to Task on the resource and service layers.||Post is implemented by is inactive for this commit.  I'll activate and
and test and then push it later today.
=========================================================

+ @PreAuthorize("hasPermission(#group, 'member')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasPermission(#post, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#post, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#post, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasPermission(#post, 'MANAGER') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_MODERATOR') or hasPermission(#post, 'MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/e7d09beea00dc880dfdb38664b287be68e4f038a

[COMMIT MESSAGE]:Added Tasks!||Known bugs: 
-Something is preventing the user TaskManagerDemo from adding himself to
a group as a member, but the manager of the group may add him..
-We are recieving a "granted authority required" error when attempting
to use /byManager /byMembership on houssuggest. Local builds do not have
this error.  Can be temporarily fixed by ressetting the mysql tables.
=========================================================

+ @PreAuthorize("hasPermission(#group, 'member') or hasPermission(#group, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasPermission(#task, 'MANAGER') or hasPermission(#group, 'manager') "
+ @PreAuthorize("hasPermission(#task, 'MANAGER') or hasPermission(#group, 'manager') "
+ @PreAuthorize("hasPermission(#task, 'MANAGER') or hasPermission(#group, 'manager') "
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasPermission(#task, 'MANAGER') or hasPermission(#group, 'manager') "
+ @PreAuthorize("hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasPermission(#group, 'manager') "
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasPermission(#group, 'manager') "

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/71460406b4b4f4874106ecf1e6364feca635a93e

[COMMIT MESSAGE]:Multiple fixes to Task on the resource and service layers.||Post is implemented by is inactive for this commit.  I'll activate and
and test and then push it later today.
=========================================================

+ @PreAuthorize("hasPermission(#group, 'member')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasPermission(#post, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#post, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#post, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasPermission(#post, 'MANAGER') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_MODERATOR') or hasPermission(#post, 'MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/f8427bfb7228d930abd40085c49651a7a32cb9be

[COMMIT MESSAGE]:Primary Changes:||-Implemented the "Group" data type and its acl permissions handling.
-Created the aclController bean to be used by service level
implementations
-Updated sql structure

Please look at the wiki for detailed information on how to use the API
=========================================================

- @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/b2a79a404309371f7abe58c99fd27f4e88555825

[COMMIT MESSAGE]:Lots of changes,and additions, will write a complete commit message when||its working.  In summary though I attempted to add a group object and
its permissions
=========================================================

+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasPermission(#group, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#group, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#group, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#group, 'MANAGER') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_MODERATOR') or hasPermission(#group, 'MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/d9892bfece1f53ad56fa883822d346bb59f458ee

[COMMIT MESSAGE]:started ..||
=========================================================

+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#class, 'MANAGER')"
+ @PreAuthorize("hasPermission(#class, 'MANAGER')"
+ @PreAuthorize("hasPermission(#class, 'MANAGER')"
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_MODERATOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/41f414b6876b88d607638f4c4ef5b033f3b98370

[COMMIT MESSAGE]:-Hours are now more or less fully functional. Have not tested||partial/full update but everything else seems to be in order.
-special use case "approve" is to be used to changed approved status,
also automaticall changes field pending to false.
-Updated Mysql tables included
=========================================================

+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasPermission(#hour, 'write') or hasPermission(#group, 'manager') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#hour, 'write') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#hour, 'write') or hasPermission(#group, 'manager') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#hour, 'write') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#group, 'manager') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#hour, 'delete') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/4b97595444977f2120581797c601465c259a85ec

[COMMIT MESSAGE]:Mostly done with comments. Available at "/comments" Performs basic CRUD.||Pending some testing and client-integration changes.

Please verify the SQL file is correct before merging, the size seems to have almost doubled. Maybe too much being exported.
=========================================================

+ @PreAuthorize("hasPermission(#group, 'member') or hasPermission(#group, 'manager') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasPermission(#comment, 'write') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#comment, 'write') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#comment, 'delete') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/d9892bfece1f53ad56fa883822d346bb59f458ee

[COMMIT MESSAGE]:started ..||
=========================================================

+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#class, 'MANAGER')"
+ @PreAuthorize("hasPermission(#class, 'MANAGER')"
+ @PreAuthorize("hasPermission(#class, 'MANAGER')"
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_MODERATOR')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/65aca698dabfea769530a6a5fd11cf637a4de967

[COMMIT MESSAGE]:Fixed sql in passwordReset function and a typo in PostService.java||
=========================================================

- @PreAuthorize("hasPermission(#group, 'member') or hasPermisssion(#group, 'manager')")
+ @PreAuthorize("hasPermission(#group, 'member') or hasPermission(#group, 'manager')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/f55729eaa82bbad2582ca7fb2b07bdac6d69e919

[COMMIT MESSAGE]:Changes:||Users
-to recieve the user object of the current user make a get request to
/user/myUser
-to recieve the collection of all user objects make get request to /user
-changed permission requirement of get all users so that anyone can make
this request and will actually return all users.

Post
-Bugfix: Users are now allowed to create a new post in any groups they
are manager of.  Previously was mistakenly restricted to only users.
=========================================================

- @PreAuthorize("hasPermission(#group, 'member')")
+ @PreAuthorize("hasPermission(#group, 'member') or hasPermisssion(#group, 'manager')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/a23b627af4bfbf33f3bcee5bc2078a4110f344bd

[COMMIT MESSAGE]:NON FUCTIONAL Post||This is only for referencing the post resource structure.  Will build
and all other services are fully functional.
=========================================================

- @PreAuthorize("hasPermission(#post, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#post, 'write') or hasRole('ROLE_MODERATOR')")
- @PreAuthorize("hasPermission(#post, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#post, 'write') or hasRole('ROLE_MODERATOR')")
- @PreAuthorize("hasPermission(#post, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#post, 'delete') or hasRole('ROLE_MODERATOR')")
- @PreAuthorize("hasPermission(#post, 'MANAGER') or hasRole('ROLE_ADMIN')")
- @PreAuthorize("hasRole('ROLE_MODERATOR')")
- @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_MODERATOR')")
- @PreAuthorize("hasRole('ROLE_USER')")
- @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_MODERATOR') or hasPermission(#post, 'MANAGER')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/71460406b4b4f4874106ecf1e6364feca635a93e

[COMMIT MESSAGE]:Multiple fixes to Task on the resource and service layers.||Post is implemented by is inactive for this commit.  I'll activate and
and test and then push it later today.
=========================================================

+ @PreAuthorize("hasPermission(#group, 'member')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasPermission(#post, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#post, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#post, 'MANAGER') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_ROOT')")
+ @PreAuthorize("hasPermission(#post, 'MANAGER') or hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_MODERATOR')")
+ @PreAuthorize("hasRole('ROLE_USER')")
+ @PreAuthorize("hasPermission(#user, 'WRITE') or hasRole('ROLE_MODERATOR') or hasPermission(#post, 'MANAGER')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=59&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/7b06fb43e1fbbb86a9d9a6f101966212e05af9b8

[COMMIT MESSAGE]:Worked on Cores stuff.||
=========================================================

- @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ADMIN')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/DataAnalyticsinStudentHands/CommunityHealthWorkersBackend/commit/87f8d12b29cb2b6b8da911d00a7784f53220fae3

[COMMIT MESSAGE]:added core competencies||
=========================================================

+ @PreAuthorize("hasRole(#location, 'MANAGER')")
+ @PreAuthorize("hasPermission(#location, 'MANAGER') or hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/kumlien/school/commit/d542eadb04839c32abd634d14f2eb91054abee82

[COMMIT MESSAGE]:Lägg till lite mer security||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/kumlien/school/commit/c71e956b1dc265ce98ff17f9143ba30f478fc298

[COMMIT MESSAGE]:Add stuff for security||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/evilself/wikiABS/commit/d91f0b044c3adeaf93496e7b5d6847e96c32da17

[COMMIT MESSAGE]:refactored some code, added logging||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/evilself/wikiABS/commit/09ae56fffe272d43d0500d173b7e2f63843203b6

[COMMIT MESSAGE]:whole bunch of CSS and other fixes||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/evilself/wikiABS/commit/60075506139924caa9c0b2c3ff772f1c067a7f98

[COMMIT MESSAGE]:changes to Product and Attachment - add content type||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/evilself/wikiABS/commit/694eebd715c4044d35863b6b73c3c13855dead63

[COMMIT MESSAGE]:worked on AJAX login||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/evilself/wikiABS/commit/d91f0b044c3adeaf93496e7b5d6847e96c32da17

[COMMIT MESSAGE]:refactored some code, added logging||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/evilself/wikiABS/commit/ff585999bf237515594841bbadf77036dca8776e

[COMMIT MESSAGE]:refactored some User code||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/evilself/wikiABS/commit/09ae56fffe272d43d0500d173b7e2f63843203b6

[COMMIT MESSAGE]:whole bunch of CSS and other fixes||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/evilself/wikiABS/commit/60075506139924caa9c0b2c3ff772f1c067a7f98

[COMMIT MESSAGE]:changes to Product and Attachment - add content type||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/evilself/wikiABS/commit/694eebd715c4044d35863b6b73c3c13855dead63

[COMMIT MESSAGE]:worked on AJAX login||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/evilself/wikiABS/commit/d91f0b044c3adeaf93496e7b5d6847e96c32da17

[COMMIT MESSAGE]:refactored some code, added logging||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/evilself/wikiABS/commit/09ae56fffe272d43d0500d173b7e2f63843203b6

[COMMIT MESSAGE]:whole bunch of CSS and other fixes||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/evilself/wikiABS/commit/60075506139924caa9c0b2c3ff772f1c067a7f98

[COMMIT MESSAGE]:changes to Product and Attachment - add content type||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/evilself/wikiABS/commit/694eebd715c4044d35863b6b73c3c13855dead63

[COMMIT MESSAGE]:worked on AJAX login||
=========================================================

+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")
+ @PreAuthorize("hasRole('ADMIN')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yecllsl/sia3-code/commit/b0e8bf2386fe9c91e8767c18874d623fddf0ba03

[COMMIT MESSAGE]:初始化||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SPITTER') and #amount > 10")
+ @PreAuthorize("#input.length() <= 3")

=========================================================
[CODE-CHANGE-URL]:https://github.com/yecllsl/sia3-code/commit/b0e8bf2386fe9c91e8767c18874d623fddf0ba03

[COMMIT MESSAGE]:初始化||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SPITTER') and #amount > 10")
+ @PreAuthorize("#input.length() <= 3")

=========================================================
[CODE-CHANGE-URL]:https://github.com/jmisur/javaagent/commit/2e7692adc1a85f520b4c7229ecff849ff4a6b9ef

[COMMIT MESSAGE]:spring security poc||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=60&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/jmisur/javaagent/commit/2e7692adc1a85f520b4c7229ecff849ff4a6b9ef

[COMMIT MESSAGE]:spring security poc||
=========================================================

+ @PreAuthorize("hasRole('ROLE_USER')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=61&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=62&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/GaaraZhu/SpringMVCDemo/commit/f31f38811bbf5237abe892adfa6cd56a8c29b828

[COMMIT MESSAGE]:Regular updates||
=========================================================

+ @PreAuthorize("hasRole('role_internal')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Milan26/music-library/commit/2dda9e52ee6c907063bc0adb80bae00066466b81

[COMMIT MESSAGE]:services are now secured with spring Pre-Post annotations||
=========================================================

+ @PreAuthorize("hasAuthority('CREATE')")
+ @PreAuthorize("hasAuthority('DELETE')")
+ @PreAuthorize("hasAuthority('EDIT')")
+ @PreAuthorize("hasAuthority('CREATE')")
+ @PreAuthorize("hasAuthority('DELETE')")
+ @PreAuthorize("hasAuthority('EDIT')")
+ @PreAuthorize("hasAuthority('CREATE')")
+ @PreAuthorize("hasAuthority('DELETE')")
+ @PreAuthorize("hasAuthority('EDIT')")
+ @PreAuthorize("hasAuthority('DELETE')")
+ @PreAuthorize("authentication.principal.username.equals(#userDto.email) or hasAuthority('EDIT')")
+ @PreAuthorize("hasAuthority('VIEW')")
+ @PreAuthorize("hasAuthority('VIEW')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=63&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/Milan26/music-library/commit/2dda9e52ee6c907063bc0adb80bae00066466b81

[COMMIT MESSAGE]:services are now secured with spring Pre-Post annotations||
=========================================================

+ @PreAuthorize("hasAuthority('CREATE')")
+ @PreAuthorize("hasAuthority('DELETE')")
+ @PreAuthorize("hasAuthority('EDIT')")
+ @PreAuthorize("hasAuthority('CREATE')")
+ @PreAuthorize("hasAuthority('DELETE')")
+ @PreAuthorize("hasAuthority('EDIT')")
+ @PreAuthorize("hasAuthority('CREATE')")
+ @PreAuthorize("hasAuthority('DELETE')")
+ @PreAuthorize("hasAuthority('EDIT')")
+ @PreAuthorize("hasAuthority('DELETE')")
+ @PreAuthorize("authentication.principal.username.equals(#userDto.email) or hasAuthority('EDIT')")
+ @PreAuthorize("hasAuthority('VIEW')")
+ @PreAuthorize("hasAuthority('VIEW')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Milan26/music-library/commit/2dda9e52ee6c907063bc0adb80bae00066466b81

[COMMIT MESSAGE]:services are now secured with spring Pre-Post annotations||
=========================================================

+ @PreAuthorize("hasAuthority('CREATE')")
+ @PreAuthorize("hasAuthority('DELETE')")
+ @PreAuthorize("hasAuthority('EDIT')")
+ @PreAuthorize("hasAuthority('CREATE')")
+ @PreAuthorize("hasAuthority('DELETE')")
+ @PreAuthorize("hasAuthority('EDIT')")
+ @PreAuthorize("hasAuthority('CREATE')")
+ @PreAuthorize("hasAuthority('DELETE')")
+ @PreAuthorize("hasAuthority('EDIT')")
+ @PreAuthorize("hasAuthority('DELETE')")
+ @PreAuthorize("authentication.principal.username.equals(#userDto.email) or hasAuthority('EDIT')")
+ @PreAuthorize("hasAuthority('VIEW')")
+ @PreAuthorize("hasAuthority('VIEW')")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Milan26/music-library/commit/2dda9e52ee6c907063bc0adb80bae00066466b81

[COMMIT MESSAGE]:services are now secured with spring Pre-Post annotations||
=========================================================

+ @PreAuthorize("hasAuthority('CREATE')")
+ @PreAuthorize("hasAuthority('DELETE')")
+ @PreAuthorize("hasAuthority('EDIT')")
+ @PreAuthorize("hasAuthority('CREATE')")
+ @PreAuthorize("hasAuthority('DELETE')")
+ @PreAuthorize("hasAuthority('EDIT')")
+ @PreAuthorize("hasAuthority('CREATE')")
+ @PreAuthorize("hasAuthority('DELETE')")
+ @PreAuthorize("hasAuthority('EDIT')")
+ @PreAuthorize("hasAuthority('DELETE')")
+ @PreAuthorize("authentication.principal.username.equals(#userDto.email) or hasAuthority('EDIT')")
+ @PreAuthorize("hasAuthority('VIEW')")
+ @PreAuthorize("hasAuthority('VIEW')")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=64&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/dlee0113/spring_in_action/commit/96f2afa1a30121f0fe5f8c7c24cf77ef41884e3c

[COMMIT MESSAGE]:initial upload||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SPITTER') and #amount > 10")
+ @PreAuthorize("#input.length() <= 3")

=========================================================
[CODE-CHANGE-URL]:https://github.com/dlee0113/spring_in_action/commit/96f2afa1a30121f0fe5f8c7c24cf77ef41884e3c

[COMMIT MESSAGE]:initial upload||
=========================================================

+ @PreAuthorize("hasRole('ROLE_SPITTER') and #amount > 10")
+ @PreAuthorize("#input.length() <= 3")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=65&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93


=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/22c5a19e87cdc3fd3541c6dac2a1d8de5362b088

[COMMIT MESSAGE]:Added implementation for basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_ROLES)")
- @PreAuthorize("permitAll()")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ENABLED)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_ACCOUNTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHORITY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_AUTHORITIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BLOBS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CATEGORIES)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBCOMMENTS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBFLAGS)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
- @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DBRATES)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK_WITH_ACCOUNT_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_BOOKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_CAMPS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_DONATIONS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_MODERATE_CONTENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_READ_MONKS)")

=========================================================
[CODE-CHANGE-URL]:https://github.com/Myanmar-Hub/MyDhammaBook/commit/29422c3bccda905f830c11f5741004d0225a735e

[COMMIT MESSAGE]:Added basic services||
=========================================================

+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_ROLE_BY_ID)")
+ @PreAuthorize("permitAll()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_ACCOUNT_BY_ROLE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated()")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_ACCOUNT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_AUTHOR)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_AUTHOR_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BLOB)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BLOB_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CATEGORY)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CATEGORY_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBCOMMENT)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBCOMMENT_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBFLAG)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBFLAG_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DBRATE)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DBRATE_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_BOOK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_BOOK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_CAMP)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_CAMP_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_DONATION)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_DONATION_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_CREATE_NEW_MONK)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_UPDATE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_DELETE_MONK_BY_ID)")
+ @PreAuthorize("isAuthenticated() and hasRole(T(com.mydhammabook.core.entity.Authority).AUTHORITY_REMOVE_MONK_BY_ID)")
[NEXT-PAGE-URL]:https://github.com/search?l=java&o=desc&p=66&q=%40PreAuthorize%28%22&s=indexed&type=Code&utf8=%E2%9C%93

