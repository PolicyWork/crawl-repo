=========================================================
[CODE-CHANGE_URL]:https://github.com/StevenLaw/RentControl/commit/45c315b4d27dd0da7eddbe352ff5a95716f06308

=========================================================
+ public void preauthorize(float amount, String number) {
=========================================================
[CODE-CHANGE_URL]:https://github.com/rwinch/SEC-2815/commit/208edcb8da8c6769a3546d88f2de6a842bae99c0

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("denyAll")
=========================================================
[CODE-CHANGE_URL]:https://github.com/aputtur/ccc/commit/c106da8bba275b5c5551448d0c0dedb5393778e9

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/antonyraj/SpringSecurityPreAuthorize/commit/48d08f3031b60435504d20eeae62b8d9a649edc6

=========================================================
+ <name>SpringSecurityPreAuthorize</name>
+ <groupId>com.poc.preauthorize</groupId>
+package com.poc.preauthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_USER') OR hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+groupId=com.poc.preauthorize
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()'><b>testAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()'><b>testAuthenticatedMethodWithDuplicateRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()'><b>testAuthenticatedMethodWithManyRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()'><b>testCallByeAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsUser()'><b>testCallByeAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()'><b>testCallHelloAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()'><b>testCallHelloAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()'><b>testMissingRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()'><b>testMissingUsername</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()'><b>testNotAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="10" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="0.663" errors="0">
+ <testcase name="testAuthenticatedMethod" time="0.0060" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingUsername" time="0.0010" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testCallByeAsAdmin" time="0.023" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="0.0010" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="0.0020" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsUser" time="0.0" classname="com.poc.preauthorize.MyServiceTest"/>
+<td>com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.MyServiceTest</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-658</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-649</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-648</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-31</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-6</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-4</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-1</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-647</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-646</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-644</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>0</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>9</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>10</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>11</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>12</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>14</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>627</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>652</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>654</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>657</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<html><head><title>testng.xml for Command line suite</title></head><body><tt>&lt;!DOCTYPE&nbsp;suite&nbsp;SYSTEM&nbsp;"http://testng.org/testng-1.0.dtd"&gt;<br/>&lt;suite&nbsp;thread-count="5"&nbsp;configfailurepolicy="skip"&nbsp;verbose="0"&nbsp;name="Command&nbsp;line&nbsp;suite"&nbsp;skipfailedinvocationcounts="false"&nbsp;annotations="JDK"&nbsp;data-provider-thread-count="10"&gt;<br/>&nbsp;&nbsp;&lt;test&nbsp;verbose="1"&nbsp;name="Command&nbsp;line&nbsp;test"&nbsp;junit="false"&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;classes&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.AuthenticationListenerTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.MyServiceTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/classes&gt;<br/>&nbsp;&nbsp;&lt;/test&gt;<br/>&lt;/suite&gt;<br/></tt></body></html>
+ <property name="user.dir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="basedir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="surefire.real.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar"/>
+ <property name="surefire.test.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="java.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="sun.java.command" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire4238019510158485087tmp /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire8676915986051255923tmp"/>
+ <testcase time="0.006" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethod"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithDuplicateRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithManyRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingRoles"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingUsername"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testNotAuthenticatedMethod"/>
+ <testcase time="0.023" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsAdmin"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsUser"/>
+ <testcase time="0.002" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsAdmin"/>
+ <testcase time="0" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsUser"/>
+<tr class="passedodd"><td rowspan="6">com.poc.preauthorize.AuthenticationListenerTest<td><a href="#m1"><b>testAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">6</td></tr><tr class="passedodd"><td><a href="#m2"><b>testAuthenticatedMethodWithDuplicateRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m3"><b>testAuthenticatedMethodWithManyRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m4"><b>testMissingRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m5"><b>testMissingUsername</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedodd"><td><a href="#m6"><b>testNotAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<tr class="passedeven"><td rowspan="4">com.poc.preauthorize.MyServiceTest<td><a href="#m7"><b>testCallByeAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">23</td></tr><tr class="passedeven"><td><a href="#m8"><b>testCallByeAsUser</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedeven"><td><a href="#m9"><b>testCallHelloAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">2</td></tr><tr class="passedeven"><td><a href="#m10"><b>testCallHelloAsUser</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<a id="m1"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethod</h2>
+<a id="m2"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithDuplicateRoles</h2>
+<a id="m3"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithManyRoles</h2>
+<a id="m4"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingRoles</h2>
+<a id="m5"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingUsername</h2>
+<a id="m6"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testNotAuthenticatedMethod</h2>
+<a id="m7"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsAdmin</h2>
+<a id="m8"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsUser</h2>
+<a id="m9"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsAdmin</h2>
+<a id="m10"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsUser</h2>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="6" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="7" errors="0">
+ <testcase name="testMissingUsername" time="1" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethod" time="6" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.MyServiceTest" tests="4" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="26" errors="1">
+ <testcase name="testCallByeAsAdmin" time="23" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="2" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="1" classname="com.poc.preauthorize.MyServiceTest">
+ <testcase name="testCallHelloAsUser" time="0" classname="com.poc.preauthorize.MyServiceTest"/>
+ <class name="com.poc.preauthorize.AuthenticationListenerTest">
+ <class name="com.poc.preauthorize.MyServiceTest">
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+dirscanner.0.params=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes|[**/Test*.java, **/*Test.java, **/*TestCase.java]|[**/*$*]
+testSuiteDefinitionTestSourceDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/src/test/java
+classPathUrl.1=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes
+classPathUrl.0=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+reportsDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire-reports
+testClassesDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+testng.test.classpath=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+user.dir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
+basedir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
=========================================================
[CODE-CHANGE_URL]:https://github.com/diego04/WebsiteImageSharing/commit/447ca44efaaf51b0ddc87765723bfe2e54585e78

=========================================================
+ * Consider using the annotation based approach ({@code @PreAuthorize}, {@code @PostFilter} annotations) combined
+ execution(* *(..)) && (@annotation(PreAuthorize) || @annotation(PreFilter)
+import org.springframework.security.access.prepost.PreAuthorize;
+ public void denyAllPreAuthorizeDeniesAccess() throws Exception {
+ @PreAuthorize("denyAll")
=========================================================
[CODE-CHANGE_URL]:https://github.com/samitkumarpatel/spring-security-DEMO/commit/8c05abf0ef0da9fb9c41721a2ec472c9d6534bf0

=========================================================
+ * Consider using the annotation based approach ({@code @PreAuthorize}, {@code @PostFilter} annotations) combined
+ execution(* *(..)) && (@annotation(PreAuthorize) || @annotation(PreFilter)
+import org.springframework.security.access.prepost.PreAuthorize;
+ public void denyAllPreAuthorizeDeniesAccess() throws Exception {
+ @PreAuthorize("denyAll")
=========================================================
[CODE-CHANGE_URL]:https://github.com/rwinch/spring-security-test-blog/commit/5b6ac1dc2df9cdfc131e721af6076a96013b6c48

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("authenticated")
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/tekul/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/ckatzorke/securing-web/commit/7e07f37f8c0a5215b7f50ccd25469e164198c393

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/spring-projects/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/spring-projects/spring-security/commit/6d45957eecc1bef7c257a2fdea4c197c6ce652d8

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("authenticated")
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/pfac/howto-spring-security/commit/0cb0c58b49acc06b6965a7ef244cba42b7398f76

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_USER')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/156b4a6eef2be3b6517ebf67ed23c5eb2ebb7024

=========================================================
+ * Consider using the annotation based approach ({@code @PreAuthorize}, {@code @PostFilter} annotations) combined
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
+ if (preAuthorize == null) {
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+ * Expression handling code to support the use of Spring-EL based expressions in {@code @PreAuthorize}, {@code @PreFilter},
+public @interface PreAuthorize {
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
+ * <tt>MethodSecurityMetadataSource</tt> which extracts metadata from the @PreFilter and @PreAuthorize annotations
+ * allowed as if a @PreAuthorize("permitAll") were present.
+ PreAuthorize preAuthorize = findAnnotation(method, targetClass, PreAuthorize.class);
+ if (preFilter == null && preAuthorize == null && postFilter == null && postAuthorize == null ) {
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+ * Contains the infrastructure classes for handling the {@code @PreAuthorize}, {@code @PreFilter}, {@code @PostAuthorize}
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/740c24f02da67a37d75ae7543b5e269afc77acdf

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/95844c134202fdd5d726c3ab81f5a241dcf10dad

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize
+ @PreAuthorize("hasPermission(#user, admin)")
+ @PreAuthorize("hasPermission(#user, admin)")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#id, 'com.aclgae.User', admin)")
=========================================================
[CODE-CHANGE_URL]:https://github.com/altfatterz/authorize/commit/16a5684afab9c739ee81cb603199a565e4e593c7

=========================================================
-import org.springframework.security.access.prepost.PreAuthorize;
- @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/antonyraj/SpringSecurityPreAuthorize/commit/48d08f3031b60435504d20eeae62b8d9a649edc6

=========================================================
+ <name>SpringSecurityPreAuthorize</name>
+ <groupId>com.poc.preauthorize</groupId>
+package com.poc.preauthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_USER') OR hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+groupId=com.poc.preauthorize
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()'><b>testAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()'><b>testAuthenticatedMethodWithDuplicateRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()'><b>testAuthenticatedMethodWithManyRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()'><b>testCallByeAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsUser()'><b>testCallByeAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()'><b>testCallHelloAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()'><b>testCallHelloAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()'><b>testMissingRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()'><b>testMissingUsername</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()'><b>testNotAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="10" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="0.663" errors="0">
+ <testcase name="testAuthenticatedMethod" time="0.0060" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingUsername" time="0.0010" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testCallByeAsAdmin" time="0.023" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="0.0010" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="0.0020" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsUser" time="0.0" classname="com.poc.preauthorize.MyServiceTest"/>
+<td>com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.MyServiceTest</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-658</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-649</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-648</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-31</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-6</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-4</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-1</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-647</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-646</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-644</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>0</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>9</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>10</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>11</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>12</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>14</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>627</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>652</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>654</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>657</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<html><head><title>testng.xml for Command line suite</title></head><body><tt>&lt;!DOCTYPE&nbsp;suite&nbsp;SYSTEM&nbsp;"http://testng.org/testng-1.0.dtd"&gt;<br/>&lt;suite&nbsp;thread-count="5"&nbsp;configfailurepolicy="skip"&nbsp;verbose="0"&nbsp;name="Command&nbsp;line&nbsp;suite"&nbsp;skipfailedinvocationcounts="false"&nbsp;annotations="JDK"&nbsp;data-provider-thread-count="10"&gt;<br/>&nbsp;&nbsp;&lt;test&nbsp;verbose="1"&nbsp;name="Command&nbsp;line&nbsp;test"&nbsp;junit="false"&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;classes&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.AuthenticationListenerTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.MyServiceTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/classes&gt;<br/>&nbsp;&nbsp;&lt;/test&gt;<br/>&lt;/suite&gt;<br/></tt></body></html>
+ <property name="user.dir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="basedir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="surefire.real.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar"/>
+ <property name="surefire.test.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="java.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="sun.java.command" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire4238019510158485087tmp /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire8676915986051255923tmp"/>
+ <testcase time="0.006" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethod"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithDuplicateRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithManyRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingRoles"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingUsername"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testNotAuthenticatedMethod"/>
+ <testcase time="0.023" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsAdmin"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsUser"/>
+ <testcase time="0.002" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsAdmin"/>
+ <testcase time="0" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsUser"/>
+<tr class="passedodd"><td rowspan="6">com.poc.preauthorize.AuthenticationListenerTest<td><a href="#m1"><b>testAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">6</td></tr><tr class="passedodd"><td><a href="#m2"><b>testAuthenticatedMethodWithDuplicateRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m3"><b>testAuthenticatedMethodWithManyRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m4"><b>testMissingRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m5"><b>testMissingUsername</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedodd"><td><a href="#m6"><b>testNotAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<tr class="passedeven"><td rowspan="4">com.poc.preauthorize.MyServiceTest<td><a href="#m7"><b>testCallByeAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">23</td></tr><tr class="passedeven"><td><a href="#m8"><b>testCallByeAsUser</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedeven"><td><a href="#m9"><b>testCallHelloAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">2</td></tr><tr class="passedeven"><td><a href="#m10"><b>testCallHelloAsUser</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<a id="m1"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethod</h2>
+<a id="m2"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithDuplicateRoles</h2>
+<a id="m3"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithManyRoles</h2>
+<a id="m4"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingRoles</h2>
+<a id="m5"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingUsername</h2>
+<a id="m6"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testNotAuthenticatedMethod</h2>
+<a id="m7"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsAdmin</h2>
+<a id="m8"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsUser</h2>
+<a id="m9"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsAdmin</h2>
+<a id="m10"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsUser</h2>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="6" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="7" errors="0">
+ <testcase name="testMissingUsername" time="1" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethod" time="6" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.MyServiceTest" tests="4" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="26" errors="1">
+ <testcase name="testCallByeAsAdmin" time="23" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="2" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="1" classname="com.poc.preauthorize.MyServiceTest">
+ <testcase name="testCallHelloAsUser" time="0" classname="com.poc.preauthorize.MyServiceTest"/>
+ <class name="com.poc.preauthorize.AuthenticationListenerTest">
+ <class name="com.poc.preauthorize.MyServiceTest">
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+dirscanner.0.params=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes|[**/Test*.java, **/*Test.java, **/*TestCase.java]|[**/*$*]
+testSuiteDefinitionTestSourceDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/src/test/java
+classPathUrl.1=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes
+classPathUrl.0=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+reportsDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire-reports
+testClassesDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+testng.test.classpath=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+user.dir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
+basedir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/052537c8b04182595e92abd1e1949b0ff7e731b4

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/0f6642d3ab6f748167fa8e3d879ea6ea70d3ba0f

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/btishiwatasns/spring-fucntionaltest-count/commit/cc48d928e7d965c7ce0a17f7133ea775a78fc398

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ String preAuthorize();
+ @PreAuthorize("hasRole('ROLE_STAFF')")
+ String preAuthorizeRoleStaff();
+ public String preAuthorize() {
+ public String preAuthorizeRoleStaff() {
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_STAFF')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_STAFF')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/052537c8b04182595e92abd1e1949b0ff7e731b4

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/0f6642d3ab6f748167fa8e3d879ea6ea70d3ba0f

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/spring-projects/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/spring-projects/spring-security/commit/6d45957eecc1bef7c257a2fdea4c197c6ce652d8

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("authenticated")
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/pfac/howto-spring-security/commit/0cb0c58b49acc06b6965a7ef244cba42b7398f76

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_USER')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/156b4a6eef2be3b6517ebf67ed23c5eb2ebb7024

=========================================================
+ * Consider using the annotation based approach ({@code @PreAuthorize}, {@code @PostFilter} annotations) combined
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
+ if (preAuthorize == null) {
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+ * Expression handling code to support the use of Spring-EL based expressions in {@code @PreAuthorize}, {@code @PreFilter},
+public @interface PreAuthorize {
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
+ * <tt>MethodSecurityMetadataSource</tt> which extracts metadata from the @PreFilter and @PreAuthorize annotations
+ * allowed as if a @PreAuthorize("permitAll") were present.
+ PreAuthorize preAuthorize = findAnnotation(method, targetClass, PreAuthorize.class);
+ if (preFilter == null && preAuthorize == null && postFilter == null && postAuthorize == null ) {
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+ * Contains the infrastructure classes for handling the {@code @PreAuthorize}, {@code @PreFilter}, {@code @PostAuthorize}
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/740c24f02da67a37d75ae7543b5e269afc77acdf

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/95844c134202fdd5d726c3ab81f5a241dcf10dad

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize
+ @PreAuthorize("hasPermission(#user, admin)")
+ @PreAuthorize("hasPermission(#user, admin)")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#id, 'com.aclgae.User', admin)")
=========================================================
[CODE-CHANGE_URL]:https://github.com/altfatterz/authorize/commit/16a5684afab9c739ee81cb603199a565e4e593c7

=========================================================
-import org.springframework.security.access.prepost.PreAuthorize;
- @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/antonyraj/SpringSecurityPreAuthorize/commit/48d08f3031b60435504d20eeae62b8d9a649edc6

=========================================================
+ <name>SpringSecurityPreAuthorize</name>
+ <groupId>com.poc.preauthorize</groupId>
+package com.poc.preauthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_USER') OR hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+groupId=com.poc.preauthorize
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()'><b>testAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()'><b>testAuthenticatedMethodWithDuplicateRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()'><b>testAuthenticatedMethodWithManyRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()'><b>testCallByeAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsUser()'><b>testCallByeAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()'><b>testCallHelloAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()'><b>testCallHelloAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()'><b>testMissingRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()'><b>testMissingUsername</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()'><b>testNotAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="10" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="0.663" errors="0">
+ <testcase name="testAuthenticatedMethod" time="0.0060" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingUsername" time="0.0010" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testCallByeAsAdmin" time="0.023" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="0.0010" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="0.0020" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsUser" time="0.0" classname="com.poc.preauthorize.MyServiceTest"/>
+<td>com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.MyServiceTest</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-658</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-649</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-648</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-31</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-6</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-4</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-1</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-647</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-646</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-644</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>0</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>9</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>10</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>11</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>12</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>14</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>627</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>652</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>654</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>657</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<html><head><title>testng.xml for Command line suite</title></head><body><tt>&lt;!DOCTYPE&nbsp;suite&nbsp;SYSTEM&nbsp;"http://testng.org/testng-1.0.dtd"&gt;<br/>&lt;suite&nbsp;thread-count="5"&nbsp;configfailurepolicy="skip"&nbsp;verbose="0"&nbsp;name="Command&nbsp;line&nbsp;suite"&nbsp;skipfailedinvocationcounts="false"&nbsp;annotations="JDK"&nbsp;data-provider-thread-count="10"&gt;<br/>&nbsp;&nbsp;&lt;test&nbsp;verbose="1"&nbsp;name="Command&nbsp;line&nbsp;test"&nbsp;junit="false"&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;classes&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.AuthenticationListenerTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.MyServiceTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/classes&gt;<br/>&nbsp;&nbsp;&lt;/test&gt;<br/>&lt;/suite&gt;<br/></tt></body></html>
+ <property name="user.dir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="basedir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="surefire.real.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar"/>
+ <property name="surefire.test.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="java.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="sun.java.command" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire4238019510158485087tmp /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire8676915986051255923tmp"/>
+ <testcase time="0.006" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethod"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithDuplicateRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithManyRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingRoles"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingUsername"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testNotAuthenticatedMethod"/>
+ <testcase time="0.023" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsAdmin"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsUser"/>
+ <testcase time="0.002" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsAdmin"/>
+ <testcase time="0" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsUser"/>
+<tr class="passedodd"><td rowspan="6">com.poc.preauthorize.AuthenticationListenerTest<td><a href="#m1"><b>testAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">6</td></tr><tr class="passedodd"><td><a href="#m2"><b>testAuthenticatedMethodWithDuplicateRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m3"><b>testAuthenticatedMethodWithManyRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m4"><b>testMissingRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m5"><b>testMissingUsername</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedodd"><td><a href="#m6"><b>testNotAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<tr class="passedeven"><td rowspan="4">com.poc.preauthorize.MyServiceTest<td><a href="#m7"><b>testCallByeAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">23</td></tr><tr class="passedeven"><td><a href="#m8"><b>testCallByeAsUser</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedeven"><td><a href="#m9"><b>testCallHelloAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">2</td></tr><tr class="passedeven"><td><a href="#m10"><b>testCallHelloAsUser</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<a id="m1"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethod</h2>
+<a id="m2"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithDuplicateRoles</h2>
+<a id="m3"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithManyRoles</h2>
+<a id="m4"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingRoles</h2>
+<a id="m5"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingUsername</h2>
+<a id="m6"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testNotAuthenticatedMethod</h2>
+<a id="m7"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsAdmin</h2>
+<a id="m8"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsUser</h2>
+<a id="m9"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsAdmin</h2>
+<a id="m10"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsUser</h2>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="6" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="7" errors="0">
+ <testcase name="testMissingUsername" time="1" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethod" time="6" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.MyServiceTest" tests="4" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="26" errors="1">
+ <testcase name="testCallByeAsAdmin" time="23" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="2" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="1" classname="com.poc.preauthorize.MyServiceTest">
+ <testcase name="testCallHelloAsUser" time="0" classname="com.poc.preauthorize.MyServiceTest"/>
+ <class name="com.poc.preauthorize.AuthenticationListenerTest">
+ <class name="com.poc.preauthorize.MyServiceTest">
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+dirscanner.0.params=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes|[**/Test*.java, **/*Test.java, **/*TestCase.java]|[**/*$*]
+testSuiteDefinitionTestSourceDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/src/test/java
+classPathUrl.1=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes
+classPathUrl.0=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+reportsDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire-reports
+testClassesDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+testng.test.classpath=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+user.dir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
+basedir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/052537c8b04182595e92abd1e1949b0ff7e731b4

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/0f6642d3ab6f748167fa8e3d879ea6ea70d3ba0f

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/btishiwatasns/spring-fucntionaltest-count/commit/cc48d928e7d965c7ce0a17f7133ea775a78fc398

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ String preAuthorize();
+ @PreAuthorize("hasRole('ROLE_STAFF')")
+ String preAuthorizeRoleStaff();
+ public String preAuthorize() {
+ public String preAuthorizeRoleStaff() {
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_STAFF')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_STAFF')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/052537c8b04182595e92abd1e1949b0ff7e731b4

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/0f6642d3ab6f748167fa8e3d879ea6ea70d3ba0f

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/spring-projects/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/spring-projects/spring-security/commit/6d45957eecc1bef7c257a2fdea4c197c6ce652d8

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("authenticated")
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/pfac/howto-spring-security/commit/0cb0c58b49acc06b6965a7ef244cba42b7398f76

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_USER')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/156b4a6eef2be3b6517ebf67ed23c5eb2ebb7024

=========================================================
+ * Consider using the annotation based approach ({@code @PreAuthorize}, {@code @PostFilter} annotations) combined
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
+ if (preAuthorize == null) {
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+ * Expression handling code to support the use of Spring-EL based expressions in {@code @PreAuthorize}, {@code @PreFilter},
+public @interface PreAuthorize {
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
+ * <tt>MethodSecurityMetadataSource</tt> which extracts metadata from the @PreFilter and @PreAuthorize annotations
+ * allowed as if a @PreAuthorize("permitAll") were present.
+ PreAuthorize preAuthorize = findAnnotation(method, targetClass, PreAuthorize.class);
+ if (preFilter == null && preAuthorize == null && postFilter == null && postAuthorize == null ) {
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+ * Contains the infrastructure classes for handling the {@code @PreAuthorize}, {@code @PreFilter}, {@code @PostAuthorize}
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/740c24f02da67a37d75ae7543b5e269afc77acdf

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/95844c134202fdd5d726c3ab81f5a241dcf10dad

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize
+ @PreAuthorize("hasPermission(#user, admin)")
+ @PreAuthorize("hasPermission(#user, admin)")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#id, 'com.aclgae.User', admin)")
=========================================================
[CODE-CHANGE_URL]:https://github.com/altfatterz/authorize/commit/16a5684afab9c739ee81cb603199a565e4e593c7

=========================================================
-import org.springframework.security.access.prepost.PreAuthorize;
- @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/antonyraj/SpringSecurityPreAuthorize/commit/48d08f3031b60435504d20eeae62b8d9a649edc6

=========================================================
+ <name>SpringSecurityPreAuthorize</name>
+ <groupId>com.poc.preauthorize</groupId>
+package com.poc.preauthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_USER') OR hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+groupId=com.poc.preauthorize
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()'><b>testAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()'><b>testAuthenticatedMethodWithDuplicateRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()'><b>testAuthenticatedMethodWithManyRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()'><b>testCallByeAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsUser()'><b>testCallByeAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()'><b>testCallHelloAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()'><b>testCallHelloAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()'><b>testMissingRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()'><b>testMissingUsername</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()'><b>testNotAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="10" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="0.663" errors="0">
+ <testcase name="testAuthenticatedMethod" time="0.0060" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingUsername" time="0.0010" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testCallByeAsAdmin" time="0.023" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="0.0010" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="0.0020" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsUser" time="0.0" classname="com.poc.preauthorize.MyServiceTest"/>
+<td>com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.MyServiceTest</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-658</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-649</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-648</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-31</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-6</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-4</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-1</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-647</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-646</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-644</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>0</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>9</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>10</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>11</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>12</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>14</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>627</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>652</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>654</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>657</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<html><head><title>testng.xml for Command line suite</title></head><body><tt>&lt;!DOCTYPE&nbsp;suite&nbsp;SYSTEM&nbsp;"http://testng.org/testng-1.0.dtd"&gt;<br/>&lt;suite&nbsp;thread-count="5"&nbsp;configfailurepolicy="skip"&nbsp;verbose="0"&nbsp;name="Command&nbsp;line&nbsp;suite"&nbsp;skipfailedinvocationcounts="false"&nbsp;annotations="JDK"&nbsp;data-provider-thread-count="10"&gt;<br/>&nbsp;&nbsp;&lt;test&nbsp;verbose="1"&nbsp;name="Command&nbsp;line&nbsp;test"&nbsp;junit="false"&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;classes&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.AuthenticationListenerTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.MyServiceTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/classes&gt;<br/>&nbsp;&nbsp;&lt;/test&gt;<br/>&lt;/suite&gt;<br/></tt></body></html>
+ <property name="user.dir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="basedir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="surefire.real.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar"/>
+ <property name="surefire.test.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="java.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="sun.java.command" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire4238019510158485087tmp /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire8676915986051255923tmp"/>
+ <testcase time="0.006" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethod"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithDuplicateRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithManyRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingRoles"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingUsername"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testNotAuthenticatedMethod"/>
+ <testcase time="0.023" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsAdmin"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsUser"/>
+ <testcase time="0.002" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsAdmin"/>
+ <testcase time="0" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsUser"/>
+<tr class="passedodd"><td rowspan="6">com.poc.preauthorize.AuthenticationListenerTest<td><a href="#m1"><b>testAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">6</td></tr><tr class="passedodd"><td><a href="#m2"><b>testAuthenticatedMethodWithDuplicateRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m3"><b>testAuthenticatedMethodWithManyRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m4"><b>testMissingRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m5"><b>testMissingUsername</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedodd"><td><a href="#m6"><b>testNotAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<tr class="passedeven"><td rowspan="4">com.poc.preauthorize.MyServiceTest<td><a href="#m7"><b>testCallByeAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">23</td></tr><tr class="passedeven"><td><a href="#m8"><b>testCallByeAsUser</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedeven"><td><a href="#m9"><b>testCallHelloAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">2</td></tr><tr class="passedeven"><td><a href="#m10"><b>testCallHelloAsUser</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<a id="m1"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethod</h2>
+<a id="m2"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithDuplicateRoles</h2>
+<a id="m3"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithManyRoles</h2>
+<a id="m4"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingRoles</h2>
+<a id="m5"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingUsername</h2>
+<a id="m6"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testNotAuthenticatedMethod</h2>
+<a id="m7"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsAdmin</h2>
+<a id="m8"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsUser</h2>
+<a id="m9"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsAdmin</h2>
+<a id="m10"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsUser</h2>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="6" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="7" errors="0">
+ <testcase name="testMissingUsername" time="1" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethod" time="6" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.MyServiceTest" tests="4" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="26" errors="1">
+ <testcase name="testCallByeAsAdmin" time="23" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="2" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="1" classname="com.poc.preauthorize.MyServiceTest">
+ <testcase name="testCallHelloAsUser" time="0" classname="com.poc.preauthorize.MyServiceTest"/>
+ <class name="com.poc.preauthorize.AuthenticationListenerTest">
+ <class name="com.poc.preauthorize.MyServiceTest">
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+dirscanner.0.params=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes|[**/Test*.java, **/*Test.java, **/*TestCase.java]|[**/*$*]
+testSuiteDefinitionTestSourceDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/src/test/java
+classPathUrl.1=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes
+classPathUrl.0=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+reportsDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire-reports
+testClassesDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+testng.test.classpath=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+user.dir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
+basedir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/052537c8b04182595e92abd1e1949b0ff7e731b4

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/0f6642d3ab6f748167fa8e3d879ea6ea70d3ba0f

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/btishiwatasns/spring-fucntionaltest-count/commit/cc48d928e7d965c7ce0a17f7133ea775a78fc398

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ String preAuthorize();
+ @PreAuthorize("hasRole('ROLE_STAFF')")
+ String preAuthorizeRoleStaff();
+ public String preAuthorize() {
+ public String preAuthorizeRoleStaff() {
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_STAFF')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_STAFF')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/052537c8b04182595e92abd1e1949b0ff7e731b4

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/0f6642d3ab6f748167fa8e3d879ea6ea70d3ba0f

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/spring-projects/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/spring-projects/spring-security/commit/6d45957eecc1bef7c257a2fdea4c197c6ce652d8

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("authenticated")
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/pfac/howto-spring-security/commit/0cb0c58b49acc06b6965a7ef244cba42b7398f76

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_USER')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/156b4a6eef2be3b6517ebf67ed23c5eb2ebb7024

=========================================================
+ * Consider using the annotation based approach ({@code @PreAuthorize}, {@code @PostFilter} annotations) combined
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
+ if (preAuthorize == null) {
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+ * Expression handling code to support the use of Spring-EL based expressions in {@code @PreAuthorize}, {@code @PreFilter},
+public @interface PreAuthorize {
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
+ * <tt>MethodSecurityMetadataSource</tt> which extracts metadata from the @PreFilter and @PreAuthorize annotations
+ * allowed as if a @PreAuthorize("permitAll") were present.
+ PreAuthorize preAuthorize = findAnnotation(method, targetClass, PreAuthorize.class);
+ if (preFilter == null && preAuthorize == null && postFilter == null && postAuthorize == null ) {
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+ * Contains the infrastructure classes for handling the {@code @PreAuthorize}, {@code @PreFilter}, {@code @PostAuthorize}
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/740c24f02da67a37d75ae7543b5e269afc77acdf

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/95844c134202fdd5d726c3ab81f5a241dcf10dad

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize
+ @PreAuthorize("hasPermission(#user, admin)")
+ @PreAuthorize("hasPermission(#user, admin)")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#id, 'com.aclgae.User', admin)")
=========================================================
[CODE-CHANGE_URL]:https://github.com/altfatterz/authorize/commit/16a5684afab9c739ee81cb603199a565e4e593c7

=========================================================
-import org.springframework.security.access.prepost.PreAuthorize;
- @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/antonyraj/SpringSecurityPreAuthorize/commit/48d08f3031b60435504d20eeae62b8d9a649edc6

=========================================================
+ <name>SpringSecurityPreAuthorize</name>
+ <groupId>com.poc.preauthorize</groupId>
+package com.poc.preauthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_USER') OR hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+groupId=com.poc.preauthorize
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()'><b>testAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()'><b>testAuthenticatedMethodWithDuplicateRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()'><b>testAuthenticatedMethodWithManyRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()'><b>testCallByeAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsUser()'><b>testCallByeAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()'><b>testCallHelloAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()'><b>testCallHelloAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()'><b>testMissingRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()'><b>testMissingUsername</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()'><b>testNotAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="10" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="0.663" errors="0">
+ <testcase name="testAuthenticatedMethod" time="0.0060" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingUsername" time="0.0010" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testCallByeAsAdmin" time="0.023" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="0.0010" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="0.0020" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsUser" time="0.0" classname="com.poc.preauthorize.MyServiceTest"/>
+<td>com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.MyServiceTest</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-658</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-649</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-648</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-31</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-6</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-4</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-1</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-647</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-646</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-644</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>0</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>9</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>10</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>11</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>12</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>14</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>627</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>652</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>654</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>657</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<html><head><title>testng.xml for Command line suite</title></head><body><tt>&lt;!DOCTYPE&nbsp;suite&nbsp;SYSTEM&nbsp;"http://testng.org/testng-1.0.dtd"&gt;<br/>&lt;suite&nbsp;thread-count="5"&nbsp;configfailurepolicy="skip"&nbsp;verbose="0"&nbsp;name="Command&nbsp;line&nbsp;suite"&nbsp;skipfailedinvocationcounts="false"&nbsp;annotations="JDK"&nbsp;data-provider-thread-count="10"&gt;<br/>&nbsp;&nbsp;&lt;test&nbsp;verbose="1"&nbsp;name="Command&nbsp;line&nbsp;test"&nbsp;junit="false"&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;classes&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.AuthenticationListenerTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.MyServiceTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/classes&gt;<br/>&nbsp;&nbsp;&lt;/test&gt;<br/>&lt;/suite&gt;<br/></tt></body></html>
+ <property name="user.dir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="basedir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="surefire.real.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar"/>
+ <property name="surefire.test.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="java.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="sun.java.command" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire4238019510158485087tmp /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire8676915986051255923tmp"/>
+ <testcase time="0.006" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethod"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithDuplicateRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithManyRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingRoles"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingUsername"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testNotAuthenticatedMethod"/>
+ <testcase time="0.023" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsAdmin"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsUser"/>
+ <testcase time="0.002" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsAdmin"/>
+ <testcase time="0" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsUser"/>
+<tr class="passedodd"><td rowspan="6">com.poc.preauthorize.AuthenticationListenerTest<td><a href="#m1"><b>testAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">6</td></tr><tr class="passedodd"><td><a href="#m2"><b>testAuthenticatedMethodWithDuplicateRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m3"><b>testAuthenticatedMethodWithManyRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m4"><b>testMissingRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m5"><b>testMissingUsername</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedodd"><td><a href="#m6"><b>testNotAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<tr class="passedeven"><td rowspan="4">com.poc.preauthorize.MyServiceTest<td><a href="#m7"><b>testCallByeAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">23</td></tr><tr class="passedeven"><td><a href="#m8"><b>testCallByeAsUser</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedeven"><td><a href="#m9"><b>testCallHelloAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">2</td></tr><tr class="passedeven"><td><a href="#m10"><b>testCallHelloAsUser</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<a id="m1"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethod</h2>
+<a id="m2"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithDuplicateRoles</h2>
+<a id="m3"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithManyRoles</h2>
+<a id="m4"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingRoles</h2>
+<a id="m5"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingUsername</h2>
+<a id="m6"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testNotAuthenticatedMethod</h2>
+<a id="m7"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsAdmin</h2>
+<a id="m8"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsUser</h2>
+<a id="m9"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsAdmin</h2>
+<a id="m10"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsUser</h2>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="6" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="7" errors="0">
+ <testcase name="testMissingUsername" time="1" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethod" time="6" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.MyServiceTest" tests="4" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="26" errors="1">
+ <testcase name="testCallByeAsAdmin" time="23" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="2" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="1" classname="com.poc.preauthorize.MyServiceTest">
+ <testcase name="testCallHelloAsUser" time="0" classname="com.poc.preauthorize.MyServiceTest"/>
+ <class name="com.poc.preauthorize.AuthenticationListenerTest">
+ <class name="com.poc.preauthorize.MyServiceTest">
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+dirscanner.0.params=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes|[**/Test*.java, **/*Test.java, **/*TestCase.java]|[**/*$*]
+testSuiteDefinitionTestSourceDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/src/test/java
+classPathUrl.1=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes
+classPathUrl.0=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+reportsDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire-reports
+testClassesDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+testng.test.classpath=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+user.dir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
+basedir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/052537c8b04182595e92abd1e1949b0ff7e731b4

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/0f6642d3ab6f748167fa8e3d879ea6ea70d3ba0f

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/btishiwatasns/spring-fucntionaltest-count/commit/cc48d928e7d965c7ce0a17f7133ea775a78fc398

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ String preAuthorize();
+ @PreAuthorize("hasRole('ROLE_STAFF')")
+ String preAuthorizeRoleStaff();
+ public String preAuthorize() {
+ public String preAuthorizeRoleStaff() {
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_STAFF')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_STAFF')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/052537c8b04182595e92abd1e1949b0ff7e731b4

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/0f6642d3ab6f748167fa8e3d879ea6ea70d3ba0f

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/spring-projects/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/spring-projects/spring-security/commit/6d45957eecc1bef7c257a2fdea4c197c6ce652d8

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("authenticated")
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/pfac/howto-spring-security/commit/0cb0c58b49acc06b6965a7ef244cba42b7398f76

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_USER')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/156b4a6eef2be3b6517ebf67ed23c5eb2ebb7024

=========================================================
+ * Consider using the annotation based approach ({@code @PreAuthorize}, {@code @PostFilter} annotations) combined
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
+ if (preAuthorize == null) {
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+ * Expression handling code to support the use of Spring-EL based expressions in {@code @PreAuthorize}, {@code @PreFilter},
+public @interface PreAuthorize {
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
+ * <tt>MethodSecurityMetadataSource</tt> which extracts metadata from the @PreFilter and @PreAuthorize annotations
+ * allowed as if a @PreAuthorize("permitAll") were present.
+ PreAuthorize preAuthorize = findAnnotation(method, targetClass, PreAuthorize.class);
+ if (preFilter == null && preAuthorize == null && postFilter == null && postAuthorize == null ) {
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+ * Contains the infrastructure classes for handling the {@code @PreAuthorize}, {@code @PreFilter}, {@code @PostAuthorize}
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/740c24f02da67a37d75ae7543b5e269afc77acdf

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/95844c134202fdd5d726c3ab81f5a241dcf10dad

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize
+ @PreAuthorize("hasPermission(#user, admin)")
+ @PreAuthorize("hasPermission(#user, admin)")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#id, 'com.aclgae.User', admin)")
=========================================================
[CODE-CHANGE_URL]:https://github.com/altfatterz/authorize/commit/16a5684afab9c739ee81cb603199a565e4e593c7

=========================================================
-import org.springframework.security.access.prepost.PreAuthorize;
- @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/antonyraj/SpringSecurityPreAuthorize/commit/48d08f3031b60435504d20eeae62b8d9a649edc6

=========================================================
+ <name>SpringSecurityPreAuthorize</name>
+ <groupId>com.poc.preauthorize</groupId>
+package com.poc.preauthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_USER') OR hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+groupId=com.poc.preauthorize
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()'><b>testAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()'><b>testAuthenticatedMethodWithDuplicateRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()'><b>testAuthenticatedMethodWithManyRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()'><b>testCallByeAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsUser()'><b>testCallByeAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()'><b>testCallHelloAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()'><b>testCallHelloAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()'><b>testMissingRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()'><b>testMissingUsername</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()'><b>testNotAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="10" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="0.663" errors="0">
+ <testcase name="testAuthenticatedMethod" time="0.0060" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingUsername" time="0.0010" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testCallByeAsAdmin" time="0.023" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="0.0010" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="0.0020" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsUser" time="0.0" classname="com.poc.preauthorize.MyServiceTest"/>
+<td>com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.MyServiceTest</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-658</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-649</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-648</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-31</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-6</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-4</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-1</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-647</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-646</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-644</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>0</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>9</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>10</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>11</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>12</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>14</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>627</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>652</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>654</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>657</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<html><head><title>testng.xml for Command line suite</title></head><body><tt>&lt;!DOCTYPE&nbsp;suite&nbsp;SYSTEM&nbsp;"http://testng.org/testng-1.0.dtd"&gt;<br/>&lt;suite&nbsp;thread-count="5"&nbsp;configfailurepolicy="skip"&nbsp;verbose="0"&nbsp;name="Command&nbsp;line&nbsp;suite"&nbsp;skipfailedinvocationcounts="false"&nbsp;annotations="JDK"&nbsp;data-provider-thread-count="10"&gt;<br/>&nbsp;&nbsp;&lt;test&nbsp;verbose="1"&nbsp;name="Command&nbsp;line&nbsp;test"&nbsp;junit="false"&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;classes&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.AuthenticationListenerTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.MyServiceTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/classes&gt;<br/>&nbsp;&nbsp;&lt;/test&gt;<br/>&lt;/suite&gt;<br/></tt></body></html>
+ <property name="user.dir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="basedir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="surefire.real.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar"/>
+ <property name="surefire.test.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="java.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="sun.java.command" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire4238019510158485087tmp /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire8676915986051255923tmp"/>
+ <testcase time="0.006" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethod"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithDuplicateRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithManyRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingRoles"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingUsername"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testNotAuthenticatedMethod"/>
+ <testcase time="0.023" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsAdmin"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsUser"/>
+ <testcase time="0.002" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsAdmin"/>
+ <testcase time="0" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsUser"/>
+<tr class="passedodd"><td rowspan="6">com.poc.preauthorize.AuthenticationListenerTest<td><a href="#m1"><b>testAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">6</td></tr><tr class="passedodd"><td><a href="#m2"><b>testAuthenticatedMethodWithDuplicateRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m3"><b>testAuthenticatedMethodWithManyRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m4"><b>testMissingRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m5"><b>testMissingUsername</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedodd"><td><a href="#m6"><b>testNotAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<tr class="passedeven"><td rowspan="4">com.poc.preauthorize.MyServiceTest<td><a href="#m7"><b>testCallByeAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">23</td></tr><tr class="passedeven"><td><a href="#m8"><b>testCallByeAsUser</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedeven"><td><a href="#m9"><b>testCallHelloAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">2</td></tr><tr class="passedeven"><td><a href="#m10"><b>testCallHelloAsUser</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<a id="m1"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethod</h2>
+<a id="m2"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithDuplicateRoles</h2>
+<a id="m3"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithManyRoles</h2>
+<a id="m4"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingRoles</h2>
+<a id="m5"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingUsername</h2>
+<a id="m6"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testNotAuthenticatedMethod</h2>
+<a id="m7"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsAdmin</h2>
+<a id="m8"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsUser</h2>
+<a id="m9"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsAdmin</h2>
+<a id="m10"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsUser</h2>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="6" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="7" errors="0">
+ <testcase name="testMissingUsername" time="1" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethod" time="6" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.MyServiceTest" tests="4" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="26" errors="1">
+ <testcase name="testCallByeAsAdmin" time="23" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="2" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="1" classname="com.poc.preauthorize.MyServiceTest">
+ <testcase name="testCallHelloAsUser" time="0" classname="com.poc.preauthorize.MyServiceTest"/>
+ <class name="com.poc.preauthorize.AuthenticationListenerTest">
+ <class name="com.poc.preauthorize.MyServiceTest">
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+dirscanner.0.params=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes|[**/Test*.java, **/*Test.java, **/*TestCase.java]|[**/*$*]
+testSuiteDefinitionTestSourceDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/src/test/java
+classPathUrl.1=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes
+classPathUrl.0=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+reportsDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire-reports
+testClassesDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+testng.test.classpath=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+user.dir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
+basedir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/052537c8b04182595e92abd1e1949b0ff7e731b4

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/0f6642d3ab6f748167fa8e3d879ea6ea70d3ba0f

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/btishiwatasns/spring-fucntionaltest-count/commit/cc48d928e7d965c7ce0a17f7133ea775a78fc398

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ String preAuthorize();
+ @PreAuthorize("hasRole('ROLE_STAFF')")
+ String preAuthorizeRoleStaff();
+ public String preAuthorize() {
+ public String preAuthorizeRoleStaff() {
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_STAFF')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_STAFF')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/052537c8b04182595e92abd1e1949b0ff7e731b4

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/0f6642d3ab6f748167fa8e3d879ea6ea70d3ba0f

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/spring-projects/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/spring-projects/spring-security/commit/6d45957eecc1bef7c257a2fdea4c197c6ce652d8

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("authenticated")
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/pfac/howto-spring-security/commit/0cb0c58b49acc06b6965a7ef244cba42b7398f76

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_USER')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/156b4a6eef2be3b6517ebf67ed23c5eb2ebb7024

=========================================================
+ * Consider using the annotation based approach ({@code @PreAuthorize}, {@code @PostFilter} annotations) combined
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
+ if (preAuthorize == null) {
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+ * Expression handling code to support the use of Spring-EL based expressions in {@code @PreAuthorize}, {@code @PreFilter},
+public @interface PreAuthorize {
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
+ * <tt>MethodSecurityMetadataSource</tt> which extracts metadata from the @PreFilter and @PreAuthorize annotations
+ * allowed as if a @PreAuthorize("permitAll") were present.
+ PreAuthorize preAuthorize = findAnnotation(method, targetClass, PreAuthorize.class);
+ if (preFilter == null && preAuthorize == null && postFilter == null && postAuthorize == null ) {
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+ * Contains the infrastructure classes for handling the {@code @PreAuthorize}, {@code @PreFilter}, {@code @PostAuthorize}
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/740c24f02da67a37d75ae7543b5e269afc77acdf

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/95844c134202fdd5d726c3ab81f5a241dcf10dad

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize
+ @PreAuthorize("hasPermission(#user, admin)")
+ @PreAuthorize("hasPermission(#user, admin)")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#id, 'com.aclgae.User', admin)")
=========================================================
[CODE-CHANGE_URL]:https://github.com/altfatterz/authorize/commit/16a5684afab9c739ee81cb603199a565e4e593c7

=========================================================
-import org.springframework.security.access.prepost.PreAuthorize;
- @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/antonyraj/SpringSecurityPreAuthorize/commit/48d08f3031b60435504d20eeae62b8d9a649edc6

=========================================================
+ <name>SpringSecurityPreAuthorize</name>
+ <groupId>com.poc.preauthorize</groupId>
+package com.poc.preauthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_USER') OR hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+groupId=com.poc.preauthorize
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()'><b>testAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()'><b>testAuthenticatedMethodWithDuplicateRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()'><b>testAuthenticatedMethodWithManyRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()'><b>testCallByeAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsUser()'><b>testCallByeAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()'><b>testCallHelloAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()'><b>testCallHelloAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()'><b>testMissingRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()'><b>testMissingUsername</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()'><b>testNotAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="10" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="0.663" errors="0">
+ <testcase name="testAuthenticatedMethod" time="0.0060" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingUsername" time="0.0010" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testCallByeAsAdmin" time="0.023" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="0.0010" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="0.0020" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsUser" time="0.0" classname="com.poc.preauthorize.MyServiceTest"/>
+<td>com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.MyServiceTest</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-658</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-649</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-648</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-31</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-6</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-4</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-1</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-647</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-646</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-644</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>0</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>9</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>10</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>11</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>12</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>14</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>627</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>652</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>654</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>657</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<html><head><title>testng.xml for Command line suite</title></head><body><tt>&lt;!DOCTYPE&nbsp;suite&nbsp;SYSTEM&nbsp;"http://testng.org/testng-1.0.dtd"&gt;<br/>&lt;suite&nbsp;thread-count="5"&nbsp;configfailurepolicy="skip"&nbsp;verbose="0"&nbsp;name="Command&nbsp;line&nbsp;suite"&nbsp;skipfailedinvocationcounts="false"&nbsp;annotations="JDK"&nbsp;data-provider-thread-count="10"&gt;<br/>&nbsp;&nbsp;&lt;test&nbsp;verbose="1"&nbsp;name="Command&nbsp;line&nbsp;test"&nbsp;junit="false"&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;classes&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.AuthenticationListenerTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.MyServiceTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/classes&gt;<br/>&nbsp;&nbsp;&lt;/test&gt;<br/>&lt;/suite&gt;<br/></tt></body></html>
+ <property name="user.dir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="basedir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="surefire.real.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar"/>
+ <property name="surefire.test.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="java.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="sun.java.command" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire4238019510158485087tmp /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire8676915986051255923tmp"/>
+ <testcase time="0.006" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethod"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithDuplicateRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithManyRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingRoles"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingUsername"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testNotAuthenticatedMethod"/>
+ <testcase time="0.023" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsAdmin"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsUser"/>
+ <testcase time="0.002" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsAdmin"/>
+ <testcase time="0" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsUser"/>
+<tr class="passedodd"><td rowspan="6">com.poc.preauthorize.AuthenticationListenerTest<td><a href="#m1"><b>testAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">6</td></tr><tr class="passedodd"><td><a href="#m2"><b>testAuthenticatedMethodWithDuplicateRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m3"><b>testAuthenticatedMethodWithManyRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m4"><b>testMissingRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m5"><b>testMissingUsername</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedodd"><td><a href="#m6"><b>testNotAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<tr class="passedeven"><td rowspan="4">com.poc.preauthorize.MyServiceTest<td><a href="#m7"><b>testCallByeAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">23</td></tr><tr class="passedeven"><td><a href="#m8"><b>testCallByeAsUser</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedeven"><td><a href="#m9"><b>testCallHelloAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">2</td></tr><tr class="passedeven"><td><a href="#m10"><b>testCallHelloAsUser</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<a id="m1"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethod</h2>
+<a id="m2"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithDuplicateRoles</h2>
+<a id="m3"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithManyRoles</h2>
+<a id="m4"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingRoles</h2>
+<a id="m5"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingUsername</h2>
+<a id="m6"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testNotAuthenticatedMethod</h2>
+<a id="m7"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsAdmin</h2>
+<a id="m8"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsUser</h2>
+<a id="m9"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsAdmin</h2>
+<a id="m10"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsUser</h2>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="6" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="7" errors="0">
+ <testcase name="testMissingUsername" time="1" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethod" time="6" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.MyServiceTest" tests="4" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="26" errors="1">
+ <testcase name="testCallByeAsAdmin" time="23" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="2" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="1" classname="com.poc.preauthorize.MyServiceTest">
+ <testcase name="testCallHelloAsUser" time="0" classname="com.poc.preauthorize.MyServiceTest"/>
+ <class name="com.poc.preauthorize.AuthenticationListenerTest">
+ <class name="com.poc.preauthorize.MyServiceTest">
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+dirscanner.0.params=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes|[**/Test*.java, **/*Test.java, **/*TestCase.java]|[**/*$*]
+testSuiteDefinitionTestSourceDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/src/test/java
+classPathUrl.1=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes
+classPathUrl.0=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+reportsDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire-reports
+testClassesDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+testng.test.classpath=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+user.dir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
+basedir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/052537c8b04182595e92abd1e1949b0ff7e731b4

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/0f6642d3ab6f748167fa8e3d879ea6ea70d3ba0f

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/btishiwatasns/spring-fucntionaltest-count/commit/cc48d928e7d965c7ce0a17f7133ea775a78fc398

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ String preAuthorize();
+ @PreAuthorize("hasRole('ROLE_STAFF')")
+ String preAuthorizeRoleStaff();
+ public String preAuthorize() {
+ public String preAuthorizeRoleStaff() {
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_STAFF')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_STAFF')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/052537c8b04182595e92abd1e1949b0ff7e731b4

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/0f6642d3ab6f748167fa8e3d879ea6ea70d3ba0f

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/spring-projects/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/spring-projects/spring-security/commit/6d45957eecc1bef7c257a2fdea4c197c6ce652d8

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("authenticated")
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/pfac/howto-spring-security/commit/0cb0c58b49acc06b6965a7ef244cba42b7398f76

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_USER')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/156b4a6eef2be3b6517ebf67ed23c5eb2ebb7024

=========================================================
+ * Consider using the annotation based approach ({@code @PreAuthorize}, {@code @PostFilter} annotations) combined
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
+ if (preAuthorize == null) {
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+ * Expression handling code to support the use of Spring-EL based expressions in {@code @PreAuthorize}, {@code @PreFilter},
+public @interface PreAuthorize {
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
+ * <tt>MethodSecurityMetadataSource</tt> which extracts metadata from the @PreFilter and @PreAuthorize annotations
+ * allowed as if a @PreAuthorize("permitAll") were present.
+ PreAuthorize preAuthorize = findAnnotation(method, targetClass, PreAuthorize.class);
+ if (preFilter == null && preAuthorize == null && postFilter == null && postAuthorize == null ) {
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+ * Contains the infrastructure classes for handling the {@code @PreAuthorize}, {@code @PreFilter}, {@code @PostAuthorize}
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/740c24f02da67a37d75ae7543b5e269afc77acdf

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/95844c134202fdd5d726c3ab81f5a241dcf10dad

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize
+ @PreAuthorize("hasPermission(#user, admin)")
+ @PreAuthorize("hasPermission(#user, admin)")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#id, 'com.aclgae.User', admin)")
=========================================================
[CODE-CHANGE_URL]:https://github.com/altfatterz/authorize/commit/16a5684afab9c739ee81cb603199a565e4e593c7

=========================================================
-import org.springframework.security.access.prepost.PreAuthorize;
- @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/antonyraj/SpringSecurityPreAuthorize/commit/48d08f3031b60435504d20eeae62b8d9a649edc6

=========================================================
+ <name>SpringSecurityPreAuthorize</name>
+ <groupId>com.poc.preauthorize</groupId>
+package com.poc.preauthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_USER') OR hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+groupId=com.poc.preauthorize
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()'><b>testAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()'><b>testAuthenticatedMethodWithDuplicateRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()'><b>testAuthenticatedMethodWithManyRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()'><b>testCallByeAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsUser()'><b>testCallByeAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()'><b>testCallHelloAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()'><b>testCallHelloAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()'><b>testMissingRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()'><b>testMissingUsername</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()'><b>testNotAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="10" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="0.663" errors="0">
+ <testcase name="testAuthenticatedMethod" time="0.0060" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingUsername" time="0.0010" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testCallByeAsAdmin" time="0.023" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="0.0010" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="0.0020" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsUser" time="0.0" classname="com.poc.preauthorize.MyServiceTest"/>
+<td>com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.MyServiceTest</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-658</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-649</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-648</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-31</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-6</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-4</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-1</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-647</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-646</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-644</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>0</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>9</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>10</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>11</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>12</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>14</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>627</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>652</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>654</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>657</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<html><head><title>testng.xml for Command line suite</title></head><body><tt>&lt;!DOCTYPE&nbsp;suite&nbsp;SYSTEM&nbsp;"http://testng.org/testng-1.0.dtd"&gt;<br/>&lt;suite&nbsp;thread-count="5"&nbsp;configfailurepolicy="skip"&nbsp;verbose="0"&nbsp;name="Command&nbsp;line&nbsp;suite"&nbsp;skipfailedinvocationcounts="false"&nbsp;annotations="JDK"&nbsp;data-provider-thread-count="10"&gt;<br/>&nbsp;&nbsp;&lt;test&nbsp;verbose="1"&nbsp;name="Command&nbsp;line&nbsp;test"&nbsp;junit="false"&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;classes&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.AuthenticationListenerTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.MyServiceTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/classes&gt;<br/>&nbsp;&nbsp;&lt;/test&gt;<br/>&lt;/suite&gt;<br/></tt></body></html>
+ <property name="user.dir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="basedir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="surefire.real.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar"/>
+ <property name="surefire.test.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="java.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="sun.java.command" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire4238019510158485087tmp /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire8676915986051255923tmp"/>
+ <testcase time="0.006" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethod"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithDuplicateRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithManyRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingRoles"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingUsername"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testNotAuthenticatedMethod"/>
+ <testcase time="0.023" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsAdmin"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsUser"/>
+ <testcase time="0.002" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsAdmin"/>
+ <testcase time="0" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsUser"/>
+<tr class="passedodd"><td rowspan="6">com.poc.preauthorize.AuthenticationListenerTest<td><a href="#m1"><b>testAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">6</td></tr><tr class="passedodd"><td><a href="#m2"><b>testAuthenticatedMethodWithDuplicateRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m3"><b>testAuthenticatedMethodWithManyRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m4"><b>testMissingRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m5"><b>testMissingUsername</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedodd"><td><a href="#m6"><b>testNotAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<tr class="passedeven"><td rowspan="4">com.poc.preauthorize.MyServiceTest<td><a href="#m7"><b>testCallByeAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">23</td></tr><tr class="passedeven"><td><a href="#m8"><b>testCallByeAsUser</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedeven"><td><a href="#m9"><b>testCallHelloAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">2</td></tr><tr class="passedeven"><td><a href="#m10"><b>testCallHelloAsUser</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<a id="m1"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethod</h2>
+<a id="m2"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithDuplicateRoles</h2>
+<a id="m3"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithManyRoles</h2>
+<a id="m4"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingRoles</h2>
+<a id="m5"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingUsername</h2>
+<a id="m6"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testNotAuthenticatedMethod</h2>
+<a id="m7"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsAdmin</h2>
+<a id="m8"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsUser</h2>
+<a id="m9"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsAdmin</h2>
+<a id="m10"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsUser</h2>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="6" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="7" errors="0">
+ <testcase name="testMissingUsername" time="1" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethod" time="6" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.MyServiceTest" tests="4" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="26" errors="1">
+ <testcase name="testCallByeAsAdmin" time="23" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="2" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="1" classname="com.poc.preauthorize.MyServiceTest">
+ <testcase name="testCallHelloAsUser" time="0" classname="com.poc.preauthorize.MyServiceTest"/>
+ <class name="com.poc.preauthorize.AuthenticationListenerTest">
+ <class name="com.poc.preauthorize.MyServiceTest">
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+dirscanner.0.params=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes|[**/Test*.java, **/*Test.java, **/*TestCase.java]|[**/*$*]
+testSuiteDefinitionTestSourceDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/src/test/java
+classPathUrl.1=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes
+classPathUrl.0=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+reportsDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire-reports
+testClassesDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+testng.test.classpath=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+user.dir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
+basedir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/052537c8b04182595e92abd1e1949b0ff7e731b4

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/0f6642d3ab6f748167fa8e3d879ea6ea70d3ba0f

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/btishiwatasns/spring-fucntionaltest-count/commit/cc48d928e7d965c7ce0a17f7133ea775a78fc398

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ String preAuthorize();
+ @PreAuthorize("hasRole('ROLE_STAFF')")
+ String preAuthorizeRoleStaff();
+ public String preAuthorize() {
+ public String preAuthorizeRoleStaff() {
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_STAFF')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_STAFF')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/052537c8b04182595e92abd1e1949b0ff7e731b4

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/0f6642d3ab6f748167fa8e3d879ea6ea70d3ba0f

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/spring-projects/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/spring-projects/spring-security/commit/6d45957eecc1bef7c257a2fdea4c197c6ce652d8

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("authenticated")
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/pfac/howto-spring-security/commit/0cb0c58b49acc06b6965a7ef244cba42b7398f76

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_USER')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/156b4a6eef2be3b6517ebf67ed23c5eb2ebb7024

=========================================================
+ * Consider using the annotation based approach ({@code @PreAuthorize}, {@code @PostFilter} annotations) combined
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
+ if (preAuthorize == null) {
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+ * Expression handling code to support the use of Spring-EL based expressions in {@code @PreAuthorize}, {@code @PreFilter},
+public @interface PreAuthorize {
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
+ * <tt>MethodSecurityMetadataSource</tt> which extracts metadata from the @PreFilter and @PreAuthorize annotations
+ * allowed as if a @PreAuthorize("permitAll") were present.
+ PreAuthorize preAuthorize = findAnnotation(method, targetClass, PreAuthorize.class);
+ if (preFilter == null && preAuthorize == null && postFilter == null && postAuthorize == null ) {
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+ * Contains the infrastructure classes for handling the {@code @PreAuthorize}, {@code @PreFilter}, {@code @PostAuthorize}
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/740c24f02da67a37d75ae7543b5e269afc77acdf

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/kyzrfranz/grails-gae-security/commit/95844c134202fdd5d726c3ab81f5a241dcf10dad

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize
+ @PreAuthorize("hasPermission(#user, admin)")
+ @PreAuthorize("hasPermission(#user, admin)")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasPermission(#id, 'com.aclgae.User', admin)")
=========================================================
[CODE-CHANGE_URL]:https://github.com/altfatterz/authorize/commit/16a5684afab9c739ee81cb603199a565e4e593c7

=========================================================
-import org.springframework.security.access.prepost.PreAuthorize;
- @PreAuthorize("hasRole('admin')")
+ @PreAuthorize("hasRole('admin')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/antonyraj/SpringSecurityPreAuthorize/commit/48d08f3031b60435504d20eeae62b8d9a649edc6

=========================================================
+ <name>SpringSecurityPreAuthorize</name>
+ <groupId>com.poc.preauthorize</groupId>
+package com.poc.preauthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_USER') OR hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+package com.poc.preauthorize;
+ <description>POC - Spring Security Test Case on PreAuthorize</description>
+ <bean id="myService" class="com.poc.preauthorize.MyServiceImpl" />
+groupId=com.poc.preauthorize
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()'><b>testAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()'><b>testAuthenticatedMethodWithDuplicateRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()'><b>testAuthenticatedMethodWithManyRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()'><b>testCallByeAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallByeAsUser()'><b>testCallByeAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()'><b>testCallHelloAsAdmin</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()'><b>testCallHelloAsUser</b><br>Test class: com.poc.preauthorize.MyServiceTest</td>
+<td>com.poc.preauthorize.MyServiceTest@5ff3ce5c</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()'><b>testMissingRoles</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()'><b>testMissingUsername</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<td title='com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()'><b>testNotAuthenticatedMethod</b><br>Test class: com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.AuthenticationListenerTest@56609959</td></tr>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="10" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="0.663" errors="0">
+ <testcase name="testAuthenticatedMethod" time="0.0060" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingUsername" time="0.0010" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0.0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testCallByeAsAdmin" time="0.023" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="0.0010" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="0.0020" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsUser" time="0.0" classname="com.poc.preauthorize.MyServiceTest"/>
+<td>com.poc.preauthorize.AuthenticationListenerTest</td>
+<td>com.poc.preauthorize.MyServiceTest</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-658</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-649</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-648</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-31</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-6</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-4</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>-1</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-647</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-646</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>-644</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>0</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethod()">testAuthenticatedMethod</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>9</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithDuplicateRoles()">testAuthenticatedMethodWithDuplicateRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>10</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testAuthenticatedMethodWithManyRoles()">testAuthenticatedMethodWithManyRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>11</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingRoles()">testMissingRoles</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>12</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testMissingUsername()">testMissingUsername</td>
+<tr bgcolor="919fe2"> <td>13/03/22 16:08:57</td> <td>14</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.AuthenticationListenerTest.testNotAuthenticatedMethod()">testNotAuthenticatedMethod</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>627</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()">testCallByeAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>652</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallByeAsUser()">testCallByeAsUser</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>654</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()">testCallHelloAsAdmin</td>
+<tr bgcolor="f994ad"> <td>13/03/22 16:08:58</td> <td>657</td> <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td title="com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()">testCallHelloAsUser</td>
+<html><head><title>testng.xml for Command line suite</title></head><body><tt>&lt;!DOCTYPE&nbsp;suite&nbsp;SYSTEM&nbsp;"http://testng.org/testng-1.0.dtd"&gt;<br/>&lt;suite&nbsp;thread-count="5"&nbsp;configfailurepolicy="skip"&nbsp;verbose="0"&nbsp;name="Command&nbsp;line&nbsp;suite"&nbsp;skipfailedinvocationcounts="false"&nbsp;annotations="JDK"&nbsp;data-provider-thread-count="10"&gt;<br/>&nbsp;&nbsp;&lt;test&nbsp;verbose="1"&nbsp;name="Command&nbsp;line&nbsp;test"&nbsp;junit="false"&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;classes&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.AuthenticationListenerTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;class&nbsp;name="com.poc.preauthorize.MyServiceTest"/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/classes&gt;<br/>&nbsp;&nbsp;&lt;/test&gt;<br/>&lt;/suite&gt;<br/></tt></body></html>
+ <property name="user.dir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="basedir" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize"/>
+ <property name="surefire.real.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar"/>
+ <property name="surefire.test.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="java.class.path" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes:/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes:/home/anthony/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/anthony/.m2/repository/org/springframework/spring-context/3.0.5.RELEASE/spring-context-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-aop/3.0.5.RELEASE/spring-aop-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/anthony/.m2/repository/org/springframework/spring-beans/3.0.5.RELEASE/spring-beans-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-expression/3.0.5.RELEASE/spring-expression-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/testng/testng/5.14.2/testng-5.14.2.jar:/home/anthony/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/home/anthony/.m2/repository/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar:/home/anthony/.m2/repository/com/google/inject/guice/2.0/guice-2.0.jar:/home/anthony/.m2/repository/com/beust/jcommander/1.10/jcommander-1.10.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE.jar:/home/anthony/.m2/repository/org/springframework/spring-tx/3.0.3.RELEASE/spring-tx-3.0.3.RELEASE.jar:/home/anthony/.m2/repository/org/aspectj/aspectjrt/1.6.8/aspectjrt-1.6.8.jar:/home/anthony/.m2/repository/org/aspectj/aspectjweaver/1.6.8/aspectjweaver-1.6.8.jar:/home/anthony/.m2/repository/org/springframework/security/spring-security-config/3.0.5.RELEASE/spring-security-config-3.0.5.RELEASE.jar:"/>
+ <property name="sun.java.command" value="/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefirebooter528242502479846743.jar /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire4238019510158485087tmp /home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire/surefire8676915986051255923tmp"/>
+ <testcase time="0.006" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethod"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithDuplicateRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testAuthenticatedMethodWithManyRoles"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingRoles"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testMissingUsername"/>
+ <testcase time="0" classname="com.poc.preauthorize.AuthenticationListenerTest" name="testNotAuthenticatedMethod"/>
+ <testcase time="0.023" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsAdmin"/>
+ <testcase time="0.001" classname="com.poc.preauthorize.MyServiceTest" name="testCallByeAsUser"/>
+ <testcase time="0.002" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsAdmin"/>
+ <testcase time="0" classname="com.poc.preauthorize.MyServiceTest" name="testCallHelloAsUser"/>
+<tr class="passedodd"><td rowspan="6">com.poc.preauthorize.AuthenticationListenerTest<td><a href="#m1"><b>testAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">6</td></tr><tr class="passedodd"><td><a href="#m2"><b>testAuthenticatedMethodWithDuplicateRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m3"><b>testAuthenticatedMethodWithManyRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m4"><b>testMissingRoles</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr><tr class="passedodd"><td><a href="#m5"><b>testMissingUsername</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedodd"><td><a href="#m6"><b>testNotAuthenticatedMethod</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<tr class="passedeven"><td rowspan="4">com.poc.preauthorize.MyServiceTest<td><a href="#m7"><b>testCallByeAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">23</td></tr><tr class="passedeven"><td><a href="#m8"><b>testCallByeAsUser</b> </a></td><td class="numi">1</td><td class="numi">1</td></tr><tr class="passedeven"><td><a href="#m9"><b>testCallHelloAsAdmin</b> </a></td><td class="numi">1</td><td class="numi">2</td></tr><tr class="passedeven"><td><a href="#m10"><b>testCallHelloAsUser</b> </a></td><td class="numi">1</td><td class="numi">0</td></tr>
+<a id="m1"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethod</h2>
+<a id="m2"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithDuplicateRoles</h2>
+<a id="m3"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testAuthenticatedMethodWithManyRoles</h2>
+<a id="m4"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingRoles</h2>
+<a id="m5"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testMissingUsername</h2>
+<a id="m6"></a><h2>com.poc.preauthorize.AuthenticationListenerTest:testNotAuthenticatedMethod</h2>
+<a id="m7"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsAdmin</h2>
+<a id="m8"></a><h2>com.poc.preauthorize.MyServiceTest:testCallByeAsUser</h2>
+<a id="m9"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsAdmin</h2>
+<a id="m10"></a><h2>com.poc.preauthorize.MyServiceTest:testCallHelloAsUser</h2>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.AuthenticationListenerTest" tests="6" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="7" errors="0">
+ <testcase name="testMissingUsername" time="1" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethod" time="6" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testMissingRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithDuplicateRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testNotAuthenticatedMethod" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+ <testcase name="testAuthenticatedMethodWithManyRoles" time="0" classname="com.poc.preauthorize.AuthenticationListenerTest"/>
+<testsuite hostname="antony-Latitude-E5420" name="com.poc.preauthorize.MyServiceTest" tests="4" failures="0" timestamp="22 Mar 2013 10:38:58 GMT" time="26" errors="1">
+ <testcase name="testCallByeAsAdmin" time="23" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallHelloAsAdmin" time="2" classname="com.poc.preauthorize.MyServiceTest"/>
+ <testcase name="testCallByeAsUser" time="1" classname="com.poc.preauthorize.MyServiceTest">
+ <testcase name="testCallHelloAsUser" time="0" classname="com.poc.preauthorize.MyServiceTest"/>
+ <class name="com.poc.preauthorize.AuthenticationListenerTest">
+ <class name="com.poc.preauthorize.MyServiceTest">
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ at com.poc.preauthorize.MyServiceTest.testCallByeAsUser(MyServiceTest.java:48)
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallByeAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsAdmin()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+ <![CDATA[public void com.poc.preauthorize.MyServiceTest.testCallHelloAsUser()]]>
+dirscanner.0.params=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes|[**/Test*.java, **/*Test.java, **/*TestCase.java]|[**/*$*]
+testSuiteDefinitionTestSourceDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/src/test/java
+classPathUrl.1=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/classes
+classPathUrl.0=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+reportsDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/surefire-reports
+testClassesDirectory=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+testng.test.classpath=/home/anthony/works-security-test/SpringSecurityPreAuthorize/target/test-classes
+user.dir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
+basedir=/home/anthony/works-security-test/SpringSecurityPreAuthorize
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/052537c8b04182595e92abd1e1949b0ff7e731b4

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/0f6642d3ab6f748167fa8e3d879ea6ea70d3ba0f

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/justinedelson/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
=========================================================
[CODE-CHANGE_URL]:https://github.com/btishiwatasns/spring-fucntionaltest-count/commit/cc48d928e7d965c7ce0a17f7133ea775a78fc398

=========================================================
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ String preAuthorize();
+ @PreAuthorize("hasRole('ROLE_STAFF')")
+ String preAuthorizeRoleStaff();
+ public String preAuthorize() {
+ public String preAuthorizeRoleStaff() {
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_STAFF')")
+ @PreAuthorize("hasRole('ROLE_ADMIN')")
+ @PreAuthorize("hasRole('ROLE_STAFF')")
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/052537c8b04182595e92abd1e1949b0ff7e731b4

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/0f6642d3ab6f748167fa8e3d879ea6ea70d3ba0f

=========================================================
=========================================================
[CODE-CHANGE_URL]:https://github.com/mrjabba/spring-security/commit/14c473960522cef5d2b6d34fdc24199cef4c9d33

=========================================================
- ## Specifies whether the use of Spring Security's expression-based annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Specifies whether the use of Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this application context. Defaults to "disabled".
+ ## Allows the default expression-based mechanism for handling Spring Security's pre and post invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be replace entirely. Only applies if these annotations are enabled.
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
+ return new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ * to grant or deny access depending on whether the @PreAuthorize expression evaluates to 'true' or 'false',
- Expression preAuthorize = mace.getAuthorizeExpression();
+ Expression preAuthorize = preAttr.getAuthorizeExpression();
- return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx)?ACCESS_GRANTED:ACCESS_DENIED;
+ return ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx);
+Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter,
+ * Marker interface for attributes which are created from combined @PreFilter and @PreAuthorize annotations.
+ * generated from @PreFilter and @PreAuthorize annotations.
-import org.springframework.security.access.expression.annotation.PreAuthorize;
- return createAttributeList(preFilter, preAuthorize, postFilter, postAuthorize);
+ PreInvocationAttribute pre = attributeFactory.createPreInvocationAttribute(preFilter, preAuthorize);
- private List<ConfigAttribute> createAttributeList(PreFilter preFilter, PreAuthorize preAuthorize,
- Expression preAuthorizeExpression = preAuthorize == null ? parser.parseExpression("permitAll") : parser.parseExpression(preAuthorize.value());
- pre = new PreInvocationExpressionAttribute(preFilterExpression, filterObject, preAuthorizeExpression);
+ PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize);
+Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+ public PreInvocationAttribute createPreInvocationAttribute(PreFilter preFilter, PreAuthorize preAuthorize) {
+ return new PythonInterpreterPreInvocationAttribute(preAuthorize.value());
+import org.springframework.security.access.prepost.PreAuthorize;
+ @PreAuthorize("someMethod.py")
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.access.expression.annotation.PreAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
